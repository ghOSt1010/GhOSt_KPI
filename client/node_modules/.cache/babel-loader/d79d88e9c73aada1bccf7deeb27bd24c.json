{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { RegionCardinality, Regions } from \"../../regions\";\n/**\n * Returns the scroll{Left,Top} offsets of the provided region based on its\n * cardinality.\n */\n\nexport function getScrollPositionForRegion(region, currScrollLeft, currScrollTop, getLeftOffset, getTopOffset, numFrozenRows, numFrozenColumns) {\n  if (numFrozenRows === void 0) {\n    numFrozenRows = 0;\n  }\n\n  if (numFrozenColumns === void 0) {\n    numFrozenColumns = 0;\n  }\n\n  var cardinality = Regions.getRegionCardinality(region);\n  var scrollTop = currScrollTop;\n  var scrollLeft = currScrollLeft; // if these were max-frozen-index values, we would have added 1 before passing to the get*Offset\n  // functions, but the counts are already 1-indexed, so we can just pass those.\n\n  var frozenColumnsCumulativeWidth = getLeftOffset(numFrozenColumns);\n  var frozenRowsCumulativeHeight = getTopOffset(numFrozenRows);\n\n  switch (cardinality) {\n    case RegionCardinality.CELLS:\n      {\n        // scroll to the top-left corner of the block of cells\n        var topOffset = getTopOffset(region.rows[0]);\n        var leftOffset = getLeftOffset(region.cols[0]);\n        scrollTop = getClampedScrollPosition(topOffset, frozenRowsCumulativeHeight);\n        scrollLeft = getClampedScrollPosition(leftOffset, frozenColumnsCumulativeWidth);\n        break;\n      }\n\n    case RegionCardinality.FULL_ROWS:\n      {\n        // scroll to the top of the row block\n        var topOffset = getTopOffset(region.rows[0]);\n        scrollTop = getClampedScrollPosition(topOffset, frozenRowsCumulativeHeight);\n        break;\n      }\n\n    case RegionCardinality.FULL_COLUMNS:\n      {\n        // scroll to the left side of the column block\n        var leftOffset = getLeftOffset(region.cols[0]);\n        scrollLeft = getClampedScrollPosition(leftOffset, frozenColumnsCumulativeWidth);\n        break;\n      }\n\n    default:\n      {\n        // if it's a FULL_TABLE region, scroll back to the top-left cell of the table\n        scrollTop = 0;\n        scrollLeft = 0;\n        break;\n      }\n  }\n\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}\n/**\n * Returns the thickness of the target scroll bar in pixels.\n * If the target scroll bar is not present, 0 is returned.\n */\n\nexport function measureScrollBarThickness(element, direction) {\n  // offset size includes the scroll bar. client size does not.\n  // the difference gives the thickness of the scroll bar.\n  return direction === \"horizontal\" ? element.offsetHeight - element.clientHeight : element.offsetWidth - element.clientWidth;\n}\n/**\n * Adjust the scroll position to align content just beyond the frozen region, if necessary.\n */\n\nfunction getClampedScrollPosition(scrollOffset, frozenRegionCumulativeSize) {\n  // if the new scroll offset falls within the frozen region, clamp it to 0\n  return Math.max(scrollOffset - frozenRegionCumulativeSize, 0);\n}","map":null,"metadata":{},"sourceType":"module"}