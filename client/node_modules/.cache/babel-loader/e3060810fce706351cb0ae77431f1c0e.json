{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx\";\nimport React, { Component } from 'react';\nimport UsersCard from './components/Users/UsersCard';\nimport { Tabs, Tab, Button, H2, ButtonGroup, Divider } from '@blueprintjs/core';\nimport UsersTable from './components/Users/UsersTable';\nimport Client from '../../Modules/Client/Client';\nimport UserDialog from './components/Users/UserDialog';\n\nvar AdminPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPanel, _Component);\n\n  function AdminPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdminPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdminPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: ''\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, usertype, password, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, usertype = _this$state.usertype, password = _this$state.password;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, usertype);\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AdminPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsersData();\n    }\n  }, {\n    key: \"getUsersData\",\n    value: function () {\n      var _getUsersData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setLoading(true);\n                _context2.prev = 1;\n                _context2.next = 4;\n                return Client.Services.UsersService.getUsers();\n\n              case 4:\n                result = _context2.sent;\n                this.setState({\n                  users: result.data\n                });\n                _context2.next = 13;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                alert(_context2.t0);\n                this.setState({\n                  errorMsg: _context2.t0.response\n                });\n                Client.Notifications.alert('Error while loading users list');\n\n              case 13:\n                _context2.prev = 13;\n                this.setLoading(false);\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8, 13, 16]]);\n      }));\n\n      function getUsersData() {\n        return _getUsersData.apply(this, arguments);\n      }\n\n      return getUsersData;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                this.resetErrorMsg();\n                _context3.next = 4;\n                return Client.Services.UsersService.deleteUser(id);\n\n              case 4:\n                result = _context3.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('User removed successfully');\n                }\n\n                _context3.next = 12;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context3.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete user');\n\n              case 12:\n                _context3.prev = 12;\n                this.props.onRefresh();\n                return _context3.finish(12);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 8, 12, 15]]);\n      }));\n\n      function deleteUser(_x2) {\n        return _deleteUser.apply(this, arguments);\n      }\n\n      return deleteUser;\n    }()\n  }, {\n    key: \"openAlert\",\n    value: function openAlert(msg) {\n      this.setState({\n        isAlertOpen: true,\n        errorMessage: msg\n      });\n    }\n  }, {\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"openUserDialog\",\n    value: function openUserDialog() {\n      this.setState({\n        isUserDialogOpen: true\n      });\n    }\n  }, {\n    key: \"closeUserDialog\",\n    value: function closeUserDialog() {\n      this.setState({\n        isUserDialogOpen: false\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        email: '',\n        username: '',\n        usertype: 'standard',\n        password: '',\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"handleSelection\",\n    value: function handleSelection(e) {\n      e.preventDefault();\n      this.setState({\n        selected: e.target.id\n      });\n      alert(this.state.selected);\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Employees') {\n        return React.createElement(ButtonGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, React.createElement(Button, {\n          icon: \"edit\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"add\",\n          small: true,\n          minimal: true,\n          onClick: function onClick() {\n            return _this2.openUserDialog();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"trash\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"refresh\",\n          small: true,\n          minimal: true,\n          onClick: function onClick() {\n            return _this2.getUsersData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          users = _this$state2.users,\n          isLoading = _this$state2.isLoading;\n      var _this$state3 = this.state,\n          email = _this$state3.email,\n          username = _this$state3.username,\n          usertype = _this$state3.usertype,\n          password = _this$state3.password,\n          isAlertOpen = _this$state3.isAlertOpen;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Admin Panel\")), React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Users\",\n        title: \"Users\",\n        panel: React.createElement(UsersCard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        id: \"Employees\",\n        title: \"Employees\",\n        panel: React.createElement(UsersTable, {\n          usersData: users,\n          onRefresh: function onRefresh() {\n            return _this3.getUsersData();\n          },\n          isLoading: isLoading,\n          rowSelect: function rowSelect() {\n            return _this3.handleSelection(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), this.renderControlls()), React.createElement(UserDialog, {\n        isOpen: this.state.isUserDialogOpen,\n        toOpen: function toOpen() {\n          return _this3.openUserDialog();\n        },\n        toClose: function toClose() {\n          return _this3.closeUserDialog();\n        },\n        email: email,\n        username: username,\n        password: password,\n        usertype: usertype,\n        onChange: this.onChange,\n        handleSubmit: this.handleSubmit,\n        buttonCaption: \"asd\",\n        onClear: function onClear() {\n          return _this3.clearForm();\n        },\n        isAlertOpen: isAlertOpen,\n        closeAlert: function closeAlert() {\n          return _this3.closeAlert();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AdminPanel;\n}(Component);\n\nexport { AdminPanel as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx"],"names":["React","Component","UsersCard","Tabs","Tab","Button","H2","ButtonGroup","Divider","UsersTable","Client","UserDialog","AdminPanel","state","activeTabID","selectedTabId","isLoading","users","openAlert","errorMessage","isUserDialogOpen","username","email","password","usertype","handleSubmit","e","preventDefault","errorMsg","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","success","getUsersData","response","data","message","alert","error","onChange","target","id","value","setState","handleTabChange","setLoading","getUsers","resetErrorMsg","deleteUser","props","onRefresh","msg","isAlertOpen","loading","selected","openUserDialog","handleSelection","renderControlls","closeUserDialog","clearForm","closeAlert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport UsersCard from './components/Users/UsersCard';\n\nimport { Tabs, Tab, Button, H2, ButtonGroup, Divider } from '@blueprintjs/core';\nimport UsersTable from './components/Users/UsersTable';\nimport Client from '../../Modules/Client/Client';\nimport UserDialog from './components/Users/UserDialog';\n\nexport default class AdminPanel extends Component {\n   state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: ''\n   };\n\n   componentDidMount() {\n      this.getUsersData();\n   }\n\n   async getUsersData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.UsersService.getUsers();\n         this.setState({\n            users: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading users list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteUser(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.UsersService.deleteUser(id);\n         if (result.status === 200) {\n            Client.Notifications.success('User removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete user');\n      } finally {\n         this.props.onRefresh();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, username, usertype, password } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openUserDialog() {\n      this.setState({\n         isUserDialogOpen: true\n      });\n   }\n   closeUserDialog() {\n      this.setState({\n         isUserDialogOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         usertype: 'standard',\n         password: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n   handleSelection(e) {\n      e.preventDefault();\n      this.setState({\n         selected: e.target.id\n      });\n      alert(this.state.selected);\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Employees') {\n         return (\n            <ButtonGroup>\n               <Button icon='edit' small minimal />\n               <Button\n                  icon='add'\n                  small\n                  minimal\n                  onClick={() => this.openUserDialog()}\n               />\n               <Button icon='trash' small minimal />\n               <Divider />\n               <Button\n                  icon='refresh'\n                  small\n                  minimal\n                  onClick={() => this.getUsersData()}\n               />\n            </ButtonGroup>\n         );\n      }\n   }\n\n   render() {\n      const { users, isLoading } = this.state;\n      const { email, username, usertype, password, isAlertOpen } = this.state;\n\n      return (\n         <div>\n            <div className='mt-2'>\n               <H2>Admin Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab id='Users' title='Users' panel={<UsersCard />} />\n               <Tab\n                  id='Employees'\n                  title='Employees'\n                  panel={\n                     <UsersTable\n                        usersData={users}\n                        onRefresh={() => this.getUsersData()}\n                        isLoading={isLoading}\n                        rowSelect={() => this.handleSelection(e)}\n                     />\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n            <UserDialog\n               isOpen={this.state.isUserDialogOpen}\n               toOpen={() => this.openUserDialog()}\n               toClose={() => this.closeUserDialog()}\n               email={email}\n               username={username}\n               password={password}\n               usertype={usertype}\n               onChange={this.onChange}\n               handleSubmit={this.handleSubmit}\n               buttonCaption='asd'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            ></UserDialog>\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}