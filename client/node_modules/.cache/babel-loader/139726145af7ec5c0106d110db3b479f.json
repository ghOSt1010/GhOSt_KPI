{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { JSONFormat } from \"./formats/jsonFormat\";\nimport { TruncatedFormat } from \"./formats/truncatedFormat\";\nexport var emptyCellRenderer = function emptyCellRenderer() {\n  return React.createElement(Cell, null);\n};\n\nvar Cell =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Cell, _super);\n\n  function Cell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Cell.prototype.shouldComponentUpdate = function (nextProps) {\n    // deeply compare \"style,\" because a new but identical object might have been provided.\n    return !CoreUtils.shallowCompareKeys(this.props, nextProps, {\n      exclude: [\"style\"]\n    }) || !CoreUtils.deepCompareKeys(this.props.style, nextProps.style);\n  };\n\n  Cell.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n        cellRef = _c.cellRef,\n        tabIndex = _c.tabIndex,\n        onKeyDown = _c.onKeyDown,\n        onKeyUp = _c.onKeyUp,\n        onKeyPress = _c.onKeyPress,\n        style = _c.style,\n        intent = _c.intent,\n        interactive = _c.interactive,\n        loading = _c.loading,\n        tooltip = _c.tooltip,\n        truncated = _c.truncated,\n        className = _c.className,\n        wrapText = _c.wrapText;\n    var classes = classNames(Classes.TABLE_CELL, CoreClasses.intentClass(intent), (_a = {}, _a[Classes.TABLE_CELL_INTERACTIVE] = interactive, _a[CoreClasses.LOADING] = loading, _a[Classes.TABLE_TRUNCATED_CELL] = truncated, _a), className);\n    var textClasses = classNames((_b = {}, _b[Classes.TABLE_TRUNCATED_TEXT] = truncated, _b[Classes.TABLE_NO_WRAP_TEXT] = !wrapText, _b)); // add width and height to the children, for use in shouldComponentUpdate in truncatedFormat\n    // note: these aren't actually used by truncated format, just in shouldComponentUpdate\n\n    var modifiedChildren = React.Children.map(this.props.children, function (child) {\n      if (style != null && React.isValidElement(child) || CoreUtils.isElementOfType(child, TruncatedFormat) || CoreUtils.isElementOfType(child, JSONFormat)) {\n        return React.cloneElement(child, {\n          parentCellHeight: parseInt(style.height.toString(), 10),\n          parentCellWidth: parseInt(style.width.toString(), 10)\n        });\n      }\n\n      return child;\n    });\n    var content = React.createElement(\"div\", {\n      className: textClasses\n    }, modifiedChildren);\n    return React.createElement(\"div\", tslib_1.__assign({\n      className: classes,\n      title: tooltip,\n      ref: cellRef\n    }, {\n      style: style,\n      tabIndex: tabIndex,\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp,\n      onKeyPress: onKeyPress\n    }), React.createElement(LoadableContent, {\n      loading: loading,\n      variableLength: true\n    }, content));\n  };\n\n  Cell.displayName = DISPLAYNAME_PREFIX + \".Cell\";\n  Cell.defaultProps = {\n    truncated: true,\n    wrapText: false\n  };\n  return Cell;\n}(React.Component);\n\nexport { Cell };","map":null,"metadata":{},"sourceType":"module"}