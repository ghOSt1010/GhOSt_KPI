{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Icon, Popover, Position, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport { columnInteractionBarContextTypes } from \"../common/context\";\nimport { LoadableContent } from \"../common/loadableContent\";\nimport { HeaderCell } from \"./headerCell\";\nexport function HorizontalCellDivider() {\n  return React.createElement(\"div\", {\n    className: Classes.TABLE_HORIZONTAL_CELL_DIVIDER\n  });\n}\n\nvar ColumnHeaderCell =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColumnHeaderCell, _super);\n\n  function ColumnHeaderCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isActive: false\n    };\n\n    _this.handlePopoverOpened = function () {\n      return _this.setState({\n        isActive: true\n      });\n    };\n\n    _this.handlePopoverClosing = function () {\n      return _this.setState({\n        isActive: false\n      });\n    };\n\n    return _this;\n  }\n  /**\n   * This method determines if a `MouseEvent` was triggered on a target that\n   * should be used as the header click/drag target. This enables users of\n   * this component to render fully interactive components in their header\n   * cells without worry of selection or resize operations from capturing\n   * their mouse events.\n   */\n\n\n  ColumnHeaderCell.isHeaderMouseTarget = function (target) {\n    return target.classList.contains(Classes.TABLE_HEADER) || target.classList.contains(Classes.TABLE_COLUMN_NAME) || target.classList.contains(Classes.TABLE_INTERACTION_BAR) || target.classList.contains(Classes.TABLE_HEADER_CONTENT);\n  };\n\n  ColumnHeaderCell.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        // from IColumnHeaderCellProps\n    enableColumnReordering = _b.enableColumnReordering,\n        isColumnSelected = _b.isColumnSelected,\n        menuIcon = _b.menuIcon,\n        // from IColumnNameProps\n    name = _b.name,\n        nameRenderer = _b.nameRenderer,\n        // from IHeaderProps\n    spreadableProps = tslib_1.__rest(_b, [\"enableColumnReordering\", \"isColumnSelected\", \"menuIcon\", \"name\", \"nameRenderer\"]);\n\n    var classes = classNames(spreadableProps.className, Classes.TABLE_COLUMN_HEADER_CELL, (_a = {}, _a[Classes.TABLE_HAS_INTERACTION_BAR] = this.context.enableColumnInteractionBar, _a[Classes.TABLE_HAS_REORDER_HANDLE] = this.props.reorderHandle != null, _a));\n    return React.createElement(HeaderCell, tslib_1.__assign({\n      isReorderable: this.props.enableColumnReordering,\n      isSelected: this.props.isColumnSelected\n    }, spreadableProps, {\n      className: classes\n    }), this.renderName(), this.maybeRenderContent(), this.props.loading ? undefined : this.props.resizeHandle);\n  };\n\n  ColumnHeaderCell.prototype.renderName = function () {\n    var _a = this.props,\n        index = _a.index,\n        loading = _a.loading,\n        name = _a.name,\n        nameRenderer = _a.nameRenderer,\n        reorderHandle = _a.reorderHandle;\n    var dropdownMenu = this.maybeRenderDropdownMenu();\n    var defaultName = React.createElement(\"div\", {\n      className: Classes.TABLE_TRUNCATED_TEXT\n    }, name);\n    var nameComponent = React.createElement(LoadableContent, {\n      loading: loading,\n      variableLength: true\n    }, nameRenderer == null ? defaultName : nameRenderer(name, index));\n\n    if (this.context.enableColumnInteractionBar) {\n      return React.createElement(\"div\", {\n        className: Classes.TABLE_COLUMN_NAME,\n        title: name\n      }, React.createElement(\"div\", {\n        className: Classes.TABLE_INTERACTION_BAR\n      }, reorderHandle, dropdownMenu), React.createElement(HorizontalCellDivider, null), React.createElement(\"div\", {\n        className: Classes.TABLE_COLUMN_NAME_TEXT\n      }, nameComponent));\n    } else {\n      return React.createElement(\"div\", {\n        className: Classes.TABLE_COLUMN_NAME,\n        title: name\n      }, reorderHandle, dropdownMenu, React.createElement(\"div\", {\n        className: Classes.TABLE_COLUMN_NAME_TEXT\n      }, nameComponent));\n    }\n  };\n\n  ColumnHeaderCell.prototype.maybeRenderContent = function () {\n    if (this.props.children === null) {\n      return undefined;\n    }\n\n    return React.createElement(\"div\", {\n      className: Classes.TABLE_HEADER_CONTENT\n    }, this.props.children);\n  };\n\n  ColumnHeaderCell.prototype.maybeRenderDropdownMenu = function () {\n    var _a;\n\n    var _b = this.props,\n        index = _b.index,\n        menuIcon = _b.menuIcon,\n        menuRenderer = _b.menuRenderer;\n\n    if (!CoreUtils.isFunction(menuRenderer)) {\n      return undefined;\n    }\n\n    var classes = classNames(Classes.TABLE_TH_MENU_CONTAINER, (_a = {}, _a[Classes.TABLE_TH_MENU_OPEN] = this.state.isActive, _a));\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"div\", {\n      className: Classes.TABLE_TH_MENU_CONTAINER_BACKGROUND\n    }), React.createElement(Popover, {\n      content: menuRenderer(index),\n      position: Position.BOTTOM,\n      className: Classes.TABLE_TH_MENU,\n      modifiers: {\n        preventOverflow: {\n          boundariesElement: \"window\"\n        }\n      },\n      onOpened: this.handlePopoverOpened,\n      onClosing: this.handlePopoverClosing\n    }, React.createElement(Icon, {\n      icon: menuIcon\n    })));\n  };\n\n  ColumnHeaderCell.defaultProps = {\n    isActive: false,\n    menuIcon: \"chevron-down\"\n  };\n  ColumnHeaderCell.contextTypes = columnInteractionBarContextTypes;\n  ColumnHeaderCell = tslib_1.__decorate([polyfill], ColumnHeaderCell);\n  return ColumnHeaderCell;\n}(AbstractPureComponent2);\n\nexport { ColumnHeaderCell };","map":null,"metadata":{},"sourceType":"module"}