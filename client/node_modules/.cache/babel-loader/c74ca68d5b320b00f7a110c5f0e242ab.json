{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* istanbul ignore next */\nexport var Clipboard = {\n  /**\n   * Overrides the inherited CSS of the element to make sure it is\n   * selectable. This method also makes the element pseudo-invisible.\n   */\n  applySelectableStyles: function applySelectableStyles(elem) {\n    elem.style.overflow = \"hidden\";\n    elem.style.height = \"0px\";\n    elem.style.setProperty(\"-webkit-user-select\", \"all\");\n    elem.style.setProperty(\"-moz-user-select\", \"all\");\n    elem.style.setProperty(\"-ms-user-select\", \"all\");\n    elem.style.setProperty(\"user-select\", \"all\");\n    return elem;\n  },\n\n  /**\n   * Copies table cells to the clipboard. The parameter is a row-major\n   * 2-dimensional `Array` of strings and can contain nulls. We assume all\n   * rows are the same length. If not, the cells will still be copied, but\n   * the columns may not align. Returns a boolean indicating whether the\n   * copy succeeded.\n   *\n   * See `Clipboard.copy`\n   */\n  copyCells: function copyCells(cells) {\n    var table = document.createElement(\"table\");\n    Clipboard.applySelectableStyles(table);\n\n    for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n      var row = cells_1[_i];\n      var tr = table.appendChild(document.createElement(\"tr\"));\n\n      for (var _a = 0, row_1 = row; _a < row_1.length; _a++) {\n        var cell = row_1[_a];\n        var td = tr.appendChild(document.createElement(\"td\"));\n        td.textContent = cell;\n      }\n    }\n\n    var tsv = cells.map(function (row) {\n      return row.join(\"\\t\");\n    }).join(\"\\n\");\n    return Clipboard.copyElement(table, tsv);\n  },\n\n  /**\n   * Copies the text to the clipboard. Returns a boolean\n   * indicating whether the copy succeeded.\n   *\n   * See `Clipboard.copy`\n   */\n  copyString: function copyString(value) {\n    var text = document.createElement(\"textarea\");\n    Clipboard.applySelectableStyles(text);\n    text.value = value;\n    return Clipboard.copyElement(text, value);\n  },\n\n  /**\n   * Copies the element and its children to the clipboard. Returns a boolean\n   * indicating whether the copy succeeded.\n   *\n   * If a plaintext argument is supplied, we add both the text/html and\n   * text/plain mime types to the clipboard. This preserves the built in\n   * semantics of copying elements to the clipboard while allowing custom\n   * plaintext output for programs that can't cope with HTML data in the\n   * clipboard.\n   *\n   * Verified on Firefox 47, Chrome 51.\n   *\n   * Note: Sometimes the copy does not succeed. Presumably, in order to\n   * prevent memory issues, browsers will limit the total amount of data you\n   * can copy to the clipboard. Based on ad hoc testing, we found an\n   * inconsistent limit at about 300KB or 40,000 cells. Depending on the on\n   * the content of cells, your limits may vary.\n   */\n  copyElement: function copyElement(elem, plaintext) {\n    if (!Clipboard.isCopySupported()) {\n      return false;\n    } // must be document.body instead of document.documentElement for firefox\n\n\n    document.body.appendChild(elem);\n\n    try {\n      window.getSelection().selectAllChildren(elem);\n\n      if (plaintext != null) {\n        // add plaintext fallback\n        // http://stackoverflow.com/questions/23211018/copy-to-clipboard-with-jquery-js-in-chrome\n        elem.addEventListener(\"copy\", function (e) {\n          e.preventDefault();\n          var clipboardData = e.clipboardData || window.clipboardData;\n\n          if (clipboardData != null) {\n            clipboardData.setData(\"text\", plaintext);\n          }\n        });\n      }\n\n      return document.execCommand(\"copy\");\n    } catch (err) {\n      return false;\n    } finally {\n      document.body.removeChild(elem);\n    }\n  },\n\n  /**\n   * Returns a boolean indicating whether the current browser nominally\n   * supports the `copy` operation using the `execCommand` API.\n   */\n  isCopySupported: function isCopySupported() {\n    return document.queryCommandSupported != null && document.queryCommandSupported(\"copy\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}