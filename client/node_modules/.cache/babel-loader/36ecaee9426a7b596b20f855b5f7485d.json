{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/components/Forms/ReportForm.jsx\";\nimport React, { Component } from 'react';\nimport { Form } from 'reactstrap';\nimport { Button, ButtonGroup, FormGroup, InputGroup, HTMLTable, NumericInput, Icon, Spinner } from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\nimport KPIsOptions from '../Selects/KPIsOptions';\n\nvar ReportForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReportForm, _Component);\n\n  function ReportForm() {\n    _classCallCheck(this, ReportForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReportForm).apply(this, arguments));\n  }\n\n  _createClass(ReportForm, [{\n    key: \"renderRest\",\n    value: function renderRest() {\n      if (this.props.target >= this.props.result) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, \"Passed\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, \"Status\")), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          icon: \"tick\",\n          intent: \"success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(Spinner, {\n          value: this.props.result / this.props.target,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }))));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onChange = _this$props.onChange,\n          onSubmit = _this$props.onSubmit,\n          buttonCaption = _this$props.buttonCaption,\n          onClear = _this$props.onClear,\n          kpi = _this$props.kpi,\n          reportedBy = _this$props.reportedBy,\n          result = _this$props.result,\n          completed = _this$props.completed,\n          status = _this$props.status,\n          reportedAt = _this$props.reportedAt,\n          selectedKPI = _this$props.selectedKPI;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"mb-2\",\n        ref: \"createProjectForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(HTMLTable, {\n        condensed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        label: \"KPI\",\n        labelFor: \"kpi\",\n        labelInfo: \"(required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        colSpan: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(KPIsOptions, {\n        id: \"kpi\",\n        ref: \"kpi\",\n        onChange: onChange,\n        vale: kpi,\n        selected: selectedKPI,\n        fill: true,\n        placeholder: \"Select KPI...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        label: \"Name\",\n        labelFor: \"name\",\n        labelInfo: \"(required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        colSpan: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        id: \"reportedBy\",\n        onChange: onChange,\n        placeholder: \"Reported By...\",\n        type: \"text\",\n        value: reportedBy,\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        label: \"Reported At\",\n        labelFor: \"reportedAt\",\n        labelInfo: \"(required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        colSpan: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(DateInput, {\n        formatDate: function formatDate(reportedAt) {\n          return reportedAt.toLocaleDateString();\n        },\n        onChange: this.props.handleDateChange,\n        parseDate: function parseDate(reportedAt) {\n          return new Date(reportedAt).toLocaleDateString();\n        },\n        placeholder: \"DD/MM/YYYY\",\n        defaultValue: new Date(),\n        value: reportedAt,\n        minDate: new Date(),\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        label: \"Result\",\n        labelFor: \"result\",\n        labelInfo: \"(required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        colSpan: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(NumericInput, {\n        id: \"result\",\n        onValueChange: this.props.onResultValueChange,\n        placeholder: \"Result...\",\n        type: \"number\",\n        value: result,\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Status\"), React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Completed\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, status), React.createElement(\"td\", {\n        colSpan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, completed)), this.renderRest()), React.createElement(\"div\", {\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Button, {\n        icon: \"refresh\",\n        onClick: onClear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Clear\"), React.createElement(Button, {\n        icon: \"saved\",\n        onClick: onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, buttonCaption)))));\n    }\n  }]);\n\n  return ReportForm;\n}(Component);\n\nexport { ReportForm as default };\nReportForm.defaultProps = {\n  addButtonCaption: 'Add'\n};","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/components/Forms/ReportForm.jsx"],"names":["React","Component","Form","Button","ButtonGroup","FormGroup","InputGroup","HTMLTable","NumericInput","Icon","Spinner","DateInput","KPIsOptions","ReportForm","props","target","result","onChange","onSubmit","buttonCaption","onClear","kpi","reportedBy","completed","status","reportedAt","selectedKPI","toLocaleDateString","handleDateChange","Date","onResultValueChange","renderRest","defaultProps","addButtonCaption"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form } from 'reactstrap';\nimport {\n   Button,\n   ButtonGroup,\n   FormGroup,\n   InputGroup,\n   HTMLTable,\n   NumericInput,\n   Icon,\n   Spinner\n} from '@blueprintjs/core';\nimport { DateInput } from '@blueprintjs/datetime';\n\nimport KPIsOptions from '../Selects/KPIsOptions';\n\nexport default class ReportForm extends Component {\n   renderRest() {\n      if (this.props.target >= this.props.result) {\n         return (\n            <div>\n               <tr>\n                  <td>Passed</td>\n                  <td>Status</td>\n               </tr>\n               <tr>\n                  <td className='text-center'>\n                     <Icon icon='tick' intent='success' />\n                  </td>\n                  <td className='text-center'>\n                     <Spinner value={this.props.result / this.props.target} />\n                  </td>\n               </tr>\n            </div>\n         );\n      }\n   }\n\n   render() {\n      const {\n         onChange,\n         onSubmit,\n         buttonCaption,\n         onClear,\n         kpi,\n         reportedBy,\n         result,\n         completed,\n         status,\n         reportedAt,\n         selectedKPI\n      } = this.props;\n\n      return (\n         <div>\n            <Form className='mb-2' ref='createProjectForm'>\n               <HTMLTable condensed>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='KPI'\n                           labelFor='kpi'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <KPIsOptions\n                           id='kpi'\n                           ref='kpi'\n                           onChange={onChange}\n                           vale={kpi}\n                           selected={selectedKPI}\n                           fill\n                           placeholder='Select KPI...'\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='Name'\n                           labelFor='name'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <InputGroup\n                           id='reportedBy'\n                           onChange={onChange}\n                           placeholder='Reported By...'\n                           type='text'\n                           value={reportedBy}\n                           fill\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='Reported At'\n                           labelFor='reportedAt'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <DateInput\n                           formatDate={reportedAt =>\n                              reportedAt.toLocaleDateString()\n                           }\n                           onChange={this.props.handleDateChange}\n                           parseDate={reportedAt =>\n                              new Date(reportedAt).toLocaleDateString()\n                           }\n                           placeholder='DD/MM/YYYY'\n                           defaultValue={new Date()}\n                           value={reportedAt}\n                           minDate={new Date()}\n                           fill\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td>\n                        <FormGroup\n                           label='Result'\n                           labelFor='result'\n                           labelInfo='(required)'\n                        />\n                     </td>\n                     <td colSpan='3'>\n                        <NumericInput\n                           id='result'\n                           onValueChange={this.props.onResultValueChange}\n                           placeholder='Result...'\n                           type='number'\n                           value={result}\n                           fill\n                        />\n                     </td>\n                  </tr>\n                  <tr>\n                     <td colSpan='2'>Status</td>\n                     <td colSpan='2'>Completed</td>\n                  </tr>\n                  <tr>\n                     <td colSpan='2'>{status}</td>\n                     <td colSpan='2'>{completed}</td>\n                  </tr>\n                  {this.renderRest()}\n               </HTMLTable>\n\n               <div className='text-right'>\n                  <ButtonGroup>\n                     <Button icon='refresh' onClick={onClear}>\n                        Clear\n                     </Button>\n                     <Button icon='saved' onClick={onSubmit}>\n                        {buttonCaption}\n                     </Button>\n                  </ButtonGroup>\n               </div>\n            </Form>\n         </div>\n      );\n   }\n}\nReportForm.defaultProps = {\n   addButtonCaption: 'Add'\n};\n"]},"metadata":{},"sourceType":"module"}