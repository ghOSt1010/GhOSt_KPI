{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport API from '../../API';\nimport Request from '../../Requests/Request';\nimport SlaType from './DTO/SLAType';\n/**\n * TODO:\n * -- finish all service methods\n */\n\nvar SLAsService =\n/*#__PURE__*/\nfunction () {\n  function SLAsService() {\n    _classCallCheck(this, SLAsService);\n  }\n\n  _createClass(SLAsService, null, [{\n    key: \"createSLADTO\",\n\n    /**\n     * @private\n     * @param {String} type\n     */\n    value: function createSLADTO(type) {\n      return new SlaType(type).getSLATypeDTO();\n    }\n  }, {\n    key: \"getSLATypes\",\n    value: function () {\n      var _getSLATypes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Request.get(API.ROUTES.SLA_TYPES.GET_ALL_SLAS).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getSLATypes() {\n        return _getSLATypes.apply(this, arguments);\n      }\n\n      return getSLATypes;\n    }()\n  }, {\n    key: \"saveNewSLATypes\",\n    value: function () {\n      var _saveNewSLATypes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(type) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Request.post(API.ROUTES.SLA_TYPES.CREATE_NEW_SLA_TYPE, this.createSLADTO(type)).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function saveNewSLATypes(_x) {\n        return _saveNewSLATypes.apply(this, arguments);\n      }\n\n      return saveNewSLATypes;\n    }()\n  }, {\n    key: \"deleteSLATypeByID\",\n    value: function () {\n      var _deleteSLATypeByID = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Request.delete(API.ROUTES.SLA_TYPES.DELETE_SLA_TYPE_BY_ID + id).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteSLATypeByID(_x2) {\n        return _deleteSLATypeByID.apply(this, arguments);\n      }\n\n      return deleteSLATypeByID;\n    }()\n  }, {\n    key: \"updateSLAType\",\n    value: function () {\n      var _updateSLAType = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(type) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Request.put(API.ROUTES.SLA_TYPES.UPDATE_SLA_TYPE, type).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateSLAType(_x3) {\n        return _updateSLAType.apply(this, arguments);\n      }\n\n      return updateSLAType;\n    }()\n  }, {\n    key: \"getSLATypeByID\",\n    value: function () {\n      var _getSLATypeByID = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Request.get(API.ROUTES.SLA_TYPES.GET_SLA_TYPE_BY_ID + id).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getSLATypeByID(_x4) {\n        return _getSLATypeByID.apply(this, arguments);\n      }\n\n      return getSLATypeByID;\n    }()\n  }]);\n\n  return SLAsService;\n}();\n\nexport { SLAsService as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/Client/API/Services/SLAsService/SLATypesService.js"],"names":["API","Request","SlaType","SLAsService","type","getSLATypeDTO","get","ROUTES","SLA_TYPES","GET_ALL_SLAS","then","res","catch","err","post","CREATE_NEW_SLA_TYPE","createSLADTO","id","delete","DELETE_SLA_TYPE_BY_ID","put","UPDATE_SLA_TYPE","GET_SLA_TYPE_BY_ID"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA;;;;;IAIqBC,W;;;;;;;;;;AAClB;;;;iCAIoBC,I,EAAM;AACvB,aAAO,IAAIF,OAAJ,CAAYE,IAAZ,EAAkBC,aAAlB,EAAP;AACF;;;;;;;;;;;;uBAEeJ,OAAO,CAACK,GAAR,CAAYN,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBC,YAAjC,EACTC,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;iDAQaT,I;;;;;;uBACbH,OAAO,CAACa,IAAR,CACVd,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBO,mBADX,EAEV,KAAKC,YAAL,CAAkBZ,IAAlB,CAFU,EAITM,IAJS,CAIJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBANS,EAOTC,KAPS,CAOH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBATS,C;;;;;;;;;;;;;;;;;;;;;;;;iDAWeI,E;;;;;;uBACfhB,OAAO,CAACiB,MAAR,CACVlB,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBW,qBAArB,GAA6CF,EADnC,EAGTP,IAHS,CAGJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBALS,EAMTC,KANS,CAMH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBARS,C;;;;;;;;;;;;;;;;;;;;;;;;iDAWWT,I;;;;;;uBACXH,OAAO,CAACmB,GAAR,CAAYpB,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBa,eAAjC,EAAkDjB,IAAlD,EACTM,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;iDAQYI,E;;;;;;uBACZhB,OAAO,CAACK,GAAR,CAAYN,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBc,kBAArB,GAA0CL,EAAtD,EACTP,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;SAnDEV,W","sourcesContent":["import API from '../../API';\nimport Request from '../../Requests/Request';\nimport SlaType from './DTO/SLAType';\n/**\n * TODO:\n * -- finish all service methods\n */\nexport default class SLAsService {\n   /**\n    * @private\n    * @param {String} type\n    */\n   static createSLADTO(type) {\n      return new SlaType(type).getSLATypeDTO();\n   }\n   static async getSLATypes() {\n      return await Request.get(API.ROUTES.SLA_TYPES.GET_ALL_SLAS)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async saveNewSLATypes(type) {\n      return await Request.post(\n         API.ROUTES.SLA_TYPES.CREATE_NEW_SLA_TYPE,\n         this.createSLADTO(type)\n      )\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async deleteSLATypeByID(id) {\n      return await Request.delete(\n         API.ROUTES.SLA_TYPES.DELETE_SLA_TYPE_BY_ID + id\n      )\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async updateSLAType(type) {\n      return await Request.put(API.ROUTES.SLA_TYPES.UPDATE_SLA_TYPE, type)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   static async getSLATypeByID(id) {\n      return await Request.get(API.ROUTES.SLA_TYPES.GET_SLA_TYPE_BY_ID + id)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n"]},"metadata":{},"sourceType":"module"}