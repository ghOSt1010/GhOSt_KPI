{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// HACKHACK: workaround for https://github.com/palantir/tslint/issues/1768\n// tslint:disable adjacent-overload-signatures\n\n/**\n * A simple object for storing the client bounds of HTMLElements. Since\n * ClientRects are immutable, this object enables editing and some simple\n * manipulation methods.\n */\nvar Rect =\n/** @class */\nfunction () {\n  function Rect(left, top, width, height) {\n    this.left = left;\n    this.top = top;\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Returns the smallest Rect that entirely contains the supplied rects\n   */\n\n\n  Rect.union = function (anyRect0, anyRect1) {\n    var rect0 = Rect.wrap(anyRect0);\n    var rect1 = Rect.wrap(anyRect1);\n    var top = Math.min(rect0.top, rect1.top);\n    var left = Math.min(rect0.left, rect1.left);\n    var bottom = Math.max(rect0.top + rect0.height, rect1.top + rect1.height);\n    var right = Math.max(rect0.left + rect0.width, rect1.left + rect1.width);\n    var height = bottom - top;\n    var width = right - left;\n    return new Rect(left, top, width, height);\n  };\n  /**\n   * Returns a new Rect that subtracts the origin of the second argument\n   * from the first.\n   */\n\n\n  Rect.subtractOrigin = function (anyRect0, anyRect1) {\n    var rect0 = Rect.wrap(anyRect0);\n    var rect1 = Rect.wrap(anyRect1);\n    return new Rect(rect0.left - rect1.left, rect0.top - rect1.top, rect0.width, rect0.height);\n  };\n  /**\n   * Returns the CSS properties representing the absolute positioning of\n   * this Rect.\n   */\n\n\n  Rect.style = function (rect) {\n    return {\n      height: rect.height + \"px\",\n      left: rect.left + \"px\",\n      position: \"absolute\",\n      top: rect.top + \"px\",\n      width: rect.width + \"px\"\n    };\n  };\n  /**\n   * Given a ClientRect or Rect object, returns a Rect object.\n   */\n\n\n  Rect.wrap = function (rect) {\n    if (rect instanceof Rect) {\n      return rect;\n    } else {\n      return new Rect(rect.left, rect.top, rect.width, rect.height);\n    }\n  };\n\n  Rect.prototype.subtractOrigin = function (anyRect) {\n    return Rect.subtractOrigin(this, anyRect);\n  };\n\n  Rect.prototype.union = function (anyRect) {\n    return Rect.union(this, anyRect);\n  };\n\n  Rect.prototype.style = function () {\n    return Rect.style(this);\n  };\n\n  Rect.prototype.sizeStyle = function () {\n    return {\n      height: this.height + \"px\",\n      width: this.width + \"px\"\n    };\n  };\n\n  Rect.prototype.containsX = function (clientX) {\n    return clientX >= this.left && clientX <= this.left + this.width;\n  };\n\n  Rect.prototype.containsY = function (clientY) {\n    return clientY >= this.top && clientY <= this.top + this.height;\n  };\n\n  Rect.prototype.equals = function (rect) {\n    return rect != null && this.left === rect.left && this.top === rect.top && this.width === rect.width && this.height === rect.height;\n  };\n\n  Rect.ORIGIN = new Rect(0, 0, 0, 0);\n  return Rect;\n}();\n\nexport { Rect };","map":null,"metadata":{},"sourceType":"module"}