{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as Classes from \"../common/classes\";\n/**\n * Efficiently detect when an HTMLElement is resized.\n *\n * Attaches an invisible \"resize-sensor\" div to the element. Then it checks\n * the element's offsetWidth and offsetHeight whenever a scroll event is\n * triggered on the \"resize-sensor\" children. These events are further\n * debounced using requestAnimationFrame.\n *\n * Inspired by: https://github.com/marcj/css-element-queries/blob/master/src/ResizeSensor.js\n */\n\nvar ResizeSensor =\n/** @class */\nfunction () {\n  function ResizeSensor() {}\n\n  ResizeSensor.attach = function (element, callback) {\n    var lifecycle = ResizeSensor.debounce(callback);\n    var resizeSensor = document.createElement(\"div\");\n    resizeSensor.className = Classes.TABLE_RESIZE_SENSOR;\n    resizeSensor.style.cssText = ResizeSensor.RESIZE_SENSOR_STYLE;\n    resizeSensor.innerHTML = ResizeSensor.RESIZE_SENSOR_HTML;\n    element.appendChild(resizeSensor);\n\n    if (getComputedStyle(element, null).getPropertyValue(\"position\") === \"static\") {\n      element.style.position = \"relative\";\n    }\n\n    var expand = resizeSensor.childNodes[0];\n    var expandChild = expand.childNodes[0];\n    var shrink = resizeSensor.childNodes[1];\n\n    var reset = function reset() {\n      expandChild.style.width = \"100000px\";\n      expandChild.style.height = \"100000px\";\n      expand.scrollLeft = 100000;\n      expand.scrollTop = 100000;\n      shrink.scrollLeft = 100000;\n      shrink.scrollTop = 100000;\n    };\n\n    reset();\n    var lastWidth;\n    var lastHeight;\n\n    var onScroll = function onScroll() {\n      var currentWidth = element.offsetWidth;\n      var currentHeight = element.offsetHeight;\n\n      if (currentWidth !== lastWidth || currentHeight !== lastHeight) {\n        lastWidth = currentWidth;\n        lastHeight = currentHeight;\n        lifecycle.trigger();\n      }\n\n      reset();\n    };\n\n    expand.addEventListener(\"scroll\", onScroll);\n    shrink.addEventListener(\"scroll\", onScroll);\n    return function () {\n      element.removeChild(resizeSensor);\n      lifecycle.cancelled = true;\n    };\n  };\n\n  ResizeSensor.debounce = function (callback) {\n    var scope = {\n      cancelled: false,\n      trigger: function trigger() {\n        if (scope.triggered || scope.cancelled) {\n          return;\n        }\n\n        scope.triggered = true;\n        requestAnimationFrame(function () {\n          scope.triggered = false;\n\n          if (!scope.cancelled) {\n            callback();\n          }\n        });\n      },\n      triggered: false\n    };\n    return scope;\n  };\n\n  ResizeSensor.RESIZE_SENSOR_STYLE = \"position: absolute; left: 0; top: 0; right: 0; \" + \"bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n  ResizeSensor.RESIZE_SENSOR_HTML = \"<div class=\\\"\" + Classes.TABLE_RESIZE_SENSOR_EXPAND + \"\\\"\\n        style=\\\"\" + ResizeSensor.RESIZE_SENSOR_STYLE + \"\\\"><div style=\\\"position: absolute; left: 0; top: 0; transition: 0s;\\\"\\n        ></div></div><div class=\\\"\" + Classes.TABLE_RESIZE_SENSOR_SHRINK + \"\\\" style=\\\"\" + ResizeSensor.RESIZE_SENSOR_STYLE + \"\\\"\\n        ><div style=\\\"position: absolute; left: 0; top: 0; transition: 0s; width: 200%; height: 200%;\\\"></div></div>\";\n  return ResizeSensor;\n}();\n\nexport { ResizeSensor };","map":null,"metadata":{},"sourceType":"module"}