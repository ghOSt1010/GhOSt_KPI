{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, InputGroup, Overlay, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar Omnibar =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Omnibar, _super);\n\n  function Omnibar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.TypedQueryList = QueryList.ofType();\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          _b = _a.inputProps,\n          inputProps = _b === void 0 ? {} : _b,\n          isOpen = _a.isOpen,\n          _c = _a.overlayProps,\n          overlayProps = _c === void 0 ? {} : _c;\n      var handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n      var handlers = isOpen ? {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      } : {};\n      return React.createElement(Overlay, tslib_1.__assign({\n        hasBackdrop: true\n      }, overlayProps, {\n        isOpen: isOpen,\n        className: classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className),\n        onClose: _this.handleOverlayClose\n      }), React.createElement(\"div\", tslib_1.__assign({\n        className: classNames(Classes.OMNIBAR, listProps.className)\n      }, handlers), React.createElement(InputGroup, tslib_1.__assign({\n        autoFocus: true,\n        large: true,\n        leftIcon: \"search\",\n        placeholder: \"Search...\"\n      }, inputProps, {\n        onChange: listProps.handleQueryChange,\n        value: listProps.query\n      })), listProps.itemList));\n    };\n\n    _this.handleOverlayClose = function (event) {\n      Utils.safeInvokeMember(_this.props.overlayProps, \"onClose\", event);\n      Utils.safeInvoke(_this.props.onClose, event);\n    };\n\n    return _this;\n  }\n\n  Omnibar.ofType = function () {\n    return Omnibar;\n  };\n\n  Omnibar.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        _b = _a.initialContent,\n        initialContent = _b === void 0 ? null : _b,\n        isOpen = _a.isOpen,\n        inputProps = _a.inputProps,\n        overlayProps = _a.overlayProps,\n        restProps = tslib_1.__rest(_a, [\"initialContent\", \"isOpen\", \"inputProps\", \"overlayProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      initialContent: initialContent,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  Omnibar.displayName = DISPLAYNAME_PREFIX + \".Omnibar\";\n  return Omnibar;\n}(React.PureComponent);\n\nexport { Omnibar };","map":null,"metadata":{},"sourceType":"module"}