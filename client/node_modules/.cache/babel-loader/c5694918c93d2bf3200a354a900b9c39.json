{"ast":null,"code":"import _defineProperty from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/scarlet_app/client/src/components/Table/EmployeeTable/EmployeeProductivityReportingTable.jsx\";\nimport React, { Component } from 'react';\nimport { Table, Button, Input, Spinner, Progress } from 'reactstrap';\nimport axios from 'axios';\n\nvar EmployeeProductivityReportingTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EmployeeProductivityReportingTable, _Component);\n\n  function EmployeeProductivityReportingTable(props) {\n    var _this;\n\n    _classCallCheck(this, EmployeeProductivityReportingTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmployeeProductivityReportingTable).call(this, props));\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                console.log(_this.state.empArr);\n                /*\r\n                var readyempReport = this.state.empArr.map((emp, index) => {\r\n                   return {\r\n                      reportedAt: emp.reportedAt,\r\n                      project: emp.project._id,\r\n                      emp_id: emp._id,\r\n                      emp: emp.emp,\r\n                      logic: emp.logic,\r\n                      empType: emp.type.type,\r\n                      target: emp.target,\r\n                      result: emp.result,\r\n                      status: emp.status\r\n                   };\r\n                });\r\n                  var data = {\r\n                   empReport: readyempReport\r\n                };\r\n                  const URL =\r\n                   '/api/reports/report/employee/availability/';\r\n                  this.setState({\r\n                   isCompleted: await this.isCompleted()\r\n                });\r\n                  if (this.state.isCompleted) {\r\n                   axios.post(URL, data).then(doc => {\r\n                      alert('emp Report saved successfully');\r\n                      this.setState({\r\n                         enableInputs: false\r\n                      });\r\n                   });\r\n                } else {\r\n                   alert('emp Report not completed yet');\r\n                }\r\n                */\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getEmployees = _this.getEmployees.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderTableHeaders = _this.renderTableHeaders.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderTableData = _this.renderTableData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      modal: false,\n      theme: _this.props.theme,\n      isLoading: true,\n      workingHoursTarget: 160,\n      enableInputs: true,\n      empArr: [],\n      isCompleted: false\n    };\n    return _this;\n  }\n\n  _createClass(EmployeeProductivityReportingTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getEmployees();\n    }\n  }, {\n    key: \"getEmployees\",\n    value: function getEmployees() {\n      var _this2 = this;\n\n      this.setState({\n        isLoading: true\n      });\n      var URL = '/api/employees/';\n      axios.get(URL).then(function (res) {\n        var correctData = res.data.map(function (emp, index) {\n          return {\n            _id: emp._id,\n            project: emp.project,\n            name: emp.name,\n            sap: emp.sap,\n            role: emp.role,\n            phone: 0,\n            email: 0,\n            chat: 0,\n            leverage: 0,\n            web: 0,\n            target: 500,\n            productivity: 0,\n            actualProductivity: 0,\n            productivityWithLeverage: 0,\n            actualproductivityWithLeverage: 0,\n            availability: 1\n          };\n        });\n\n        _this2.setState({\n          empArr: correctData,\n          isLoading: false\n        });\n      }).catch(function (err) {\n        alert('Error loading Employees Availability table');\n        console.log(JSON.stringify(err));\n      });\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme() {\n      var theme = this.state.theme;\n\n      if (theme === 'dark') {\n        return 'bg-dark text-white table-dark';\n      }\n\n      if (theme === 'light') {\n        return '';\n      }\n    }\n  }, {\n    key: \"setCardTheme\",\n    value: function setCardTheme() {\n      var theme = this.state.theme;\n\n      if (theme === 'dark') {\n        return 'bg-dark text-white';\n      }\n\n      if (theme === 'light') {\n        return '';\n      }\n    }\n  }, {\n    key: \"setInputTheme\",\n    value: function setInputTheme() {\n      var theme = this.props.theme;\n\n      if (theme === 'dark') {\n        return 'bg-transparent text-white no-border text-center';\n      }\n\n      if (theme === 'light') {\n        return 'bg-transparent text-center';\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(index, dataType, value) {\n      var newState = this.state.empArr.map(function (item, i) {\n        if (i === index) {\n          return _objectSpread({}, item, _defineProperty({}, dataType, value));\n        }\n\n        item.totalContacts = item.phone + item.email + item.chat + item.leverage;\n        item.productivity = item.totalContacts / item.target;\n        return item;\n      });\n      this.setState({\n        empArr: newState\n      });\n    }\n  }, {\n    key: \"renderTableHeaders\",\n    value: function renderTableHeaders() {\n      return React.createElement(\"tr\", {\n        className: \"bg-black text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Project\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"SAP\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Role\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Target\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Phone\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Chat\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Web\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Leverage\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Total Contacts\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Productivity\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Effective Productivity\"));\n    }\n  }, {\n    key: \"renderTableData\",\n    value: function renderTableData() {\n      var _this3 = this;\n\n      return this.state.empArr.map(function (emp, index) {\n        return React.createElement(\"tr\", {\n          key: emp._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, emp.reportedAt = new Date().toLocaleDateString()), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, emp.project.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, emp.sap), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, emp.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, emp.role.role), React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, emp.target), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"number\",\n          onChange: function onChange(e) {\n            return _this3.handleChange(index, 'phone', parseFloat(e.target.value));\n          },\n          step: \"0.001\",\n          min: \"0\",\n          value: _this3.state.empArr[index].phone,\n          size: \"sm\",\n          disabled: !_this3.state.enableInputs,\n          className: _this3.setInputTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"number\",\n          onChange: function onChange(e) {\n            return _this3.handleChange(index, 'email', parseFloat(e.target.value));\n          },\n          step: \"0.001\",\n          min: \"0\",\n          value: _this3.state.empArr[index].email,\n          size: \"sm\",\n          disabled: !_this3.state.enableInputs,\n          className: _this3.setInputTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"number\",\n          onChange: function onChange(e) {\n            return _this3.handleChange(index, 'chat', parseFloat(e.target.value));\n          },\n          step: \"0.001\",\n          min: \"0\",\n          value: _this3.state.empArr[index].chat,\n          size: \"sm\",\n          disabled: !_this3.state.enableInputs,\n          className: _this3.setInputTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"number\",\n          onChange: function onChange(e) {\n            return _this3.handleChange(index, 'web', parseFloat(e.target.value));\n          },\n          step: \"0.001\",\n          min: \"0\",\n          value: _this3.state.empArr[index].web,\n          size: \"sm\",\n          disabled: !_this3.state.enableInputs,\n          className: _this3.setInputTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"number\",\n          onChange: function onChange(e) {\n            return _this3.handleChange(index, 'leverage', parseFloat(e.target.value));\n          },\n          step: \"0.001\",\n          min: \"0\",\n          value: _this3.state.empArr[index].leverage,\n          size: \"sm\",\n          disabled: !_this3.state.enableInputs,\n          className: _this3.setInputTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, emp.totalContacts = _this3.calcProductivity(emp)), React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, emp.productivity + ' %'), React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, emp.actualProductivity + ' %'));\n      });\n    }\n  }, {\n    key: \"calcProductivity\",\n    value: function calcProductivity(emp) {\n      emp.phone = isNaN(emp.phone) ? 0 : emp.phone;\n      emp.chat = isNaN(emp.chat) ? 0 : emp.chat;\n      emp.email = isNaN(emp.email) ? 0 : emp.email;\n      emp.web = isNaN(emp.web) ? 0 : emp.web;\n      emp.leverage = isNaN(emp.leverage) ? 0 : emp.leverage;\n      emp.totalContacts = emp.phone + emp.chat + emp.email + emp.web + emp.leverage;\n      emp.productivity = Math.round(emp.totalContacts / emp.target * 100);\n      return emp.totalContacts;\n    }\n  }, {\n    key: \"isCompleted\",\n    value: function () {\n      var _isCompleted = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var empArr, isReady, i;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                empArr = this.state.empArr;\n                isReady = false;\n                i = 0;\n\n              case 3:\n                if (!(i < empArr.length)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(isNaN(empArr[i].result) || empArr[i].result === null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 7;\n                return isReady;\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n                i++;\n                _context2.next = 3;\n                break;\n\n              case 11:\n                _context2.next = 13;\n                return !isReady;\n\n              case 13:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function isCompleted() {\n        return _isCompleted.apply(this, arguments);\n      }\n\n      return isCompleted;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          empArr = _this$state.empArr,\n          isLoading = _this$state.isLoading;\n\n      if (isLoading) {\n        return React.createElement(\"div\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, React.createElement(Spinner, {\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          },\n          __self: this\n        }));\n      }\n\n      if (empArr.length === 0) {\n        return React.createElement(\"div\", {\n          className: \"text-center text-secondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324\n          },\n          __self: this\n        }, React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          },\n          __self: this\n        }, \"No emps found...\"));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, \"emps to Report\", React.createElement(Button, {\n        color: \"primary\",\n        size: \"sm\",\n        ref: \"getEmployeesData\",\n        id: \"getEmployeesData\",\n        className: \"float-right\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, \"Submit \", React.createElement(\"span\", {\n        className: \"fas fa-check ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }), React.createElement(Table, {\n        responsive: true,\n        borderless: true,\n        striped: true,\n        hover: true,\n        size: \"sm\",\n        className: this.setTheme(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, this.renderTableHeaders()), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, this.renderTableData())));\n    }\n  }]);\n\n  return EmployeeProductivityReportingTable;\n}(Component);\n/*\r\nrequired data structure\r\n==================================================================\r\n   reportedAt: { type: Date, default: Date.now },\r\n   \r\n\r\n   result: { type: Number, required: true },          *to be calculated and send\r\n   status: { type: Boolean, required: true }          **to be calculated and send\r\n                                                         **(server side validation post submit)\r\n===================================================================\r\n*/\n\n\nexport { EmployeeProductivityReportingTable as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/scarlet_app/client/src/components/Table/EmployeeTable/EmployeeProductivityReportingTable.jsx"],"names":["React","Component","Table","Button","Input","Spinner","Progress","axios","EmployeeProductivityReportingTable","props","handleSubmit","e","preventDefault","console","log","state","empArr","getEmployees","bind","renderTableHeaders","renderTableData","modal","theme","isLoading","workingHoursTarget","enableInputs","isCompleted","setState","URL","get","then","res","correctData","data","map","emp","index","_id","project","name","sap","role","phone","email","chat","leverage","web","target","productivity","actualProductivity","productivityWithLeverage","actualproductivityWithLeverage","availability","catch","err","alert","JSON","stringify","dataType","value","newState","item","i","totalContacts","reportedAt","Date","toLocaleDateString","handleChange","parseFloat","setInputTheme","calcProductivity","isNaN","Math","round","isReady","length","result","setTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Button, Input, Spinner, Progress } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nexport default class EmployeeProductivityReportingTable extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.getEmployees = this.getEmployees.bind(this);\r\n      this.renderTableHeaders = this.renderTableHeaders.bind(this);\r\n      this.renderTableData = this.renderTableData.bind(this);\r\n\r\n      this.state = {\r\n         modal: false,\r\n         theme: this.props.theme,\r\n         isLoading: true,\r\n         workingHoursTarget: 160,\r\n         enableInputs: true,\r\n         empArr: [],\r\n         isCompleted: false\r\n      };\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.getEmployees();\r\n   }\r\n\r\n   getEmployees() {\r\n      this.setState({ isLoading: true });\r\n\r\n      const URL = '/api/employees/';\r\n\r\n      axios\r\n         .get(URL)\r\n         .then(res => {\r\n            var correctData = res.data.map((emp, index) => {\r\n               return {\r\n                  _id: emp._id,\r\n                  project: emp.project,\r\n                  name: emp.name,\r\n                  sap: emp.sap,\r\n                  role: emp.role,\r\n                  phone: 0,\r\n                  email: 0,\r\n                  chat: 0,\r\n                  leverage: 0,\r\n                  web: 0,\r\n                  target: 500,\r\n                  productivity: 0,\r\n                  actualProductivity: 0,\r\n                  productivityWithLeverage: 0,\r\n                  actualproductivityWithLeverage: 0,\r\n                  availability: 1\r\n               };\r\n            });\r\n            this.setState({\r\n               empArr: correctData,\r\n               isLoading: false\r\n            });\r\n         })\r\n         .catch(err => {\r\n            alert('Error loading Employees Availability table');\r\n            console.log(JSON.stringify(err));\r\n         });\r\n   }\r\n\r\n   setTheme() {\r\n      const { theme } = this.state;\r\n      if (theme === 'dark') {\r\n         return 'bg-dark text-white table-dark';\r\n      }\r\n      if (theme === 'light') {\r\n         return '';\r\n      }\r\n   }\r\n\r\n   setCardTheme() {\r\n      const { theme } = this.state;\r\n      if (theme === 'dark') {\r\n         return 'bg-dark text-white';\r\n      }\r\n      if (theme === 'light') {\r\n         return '';\r\n      }\r\n   }\r\n\r\n   setInputTheme() {\r\n      const { theme } = this.props;\r\n      if (theme === 'dark') {\r\n         return 'bg-transparent text-white no-border text-center';\r\n      }\r\n      if (theme === 'light') {\r\n         return 'bg-transparent text-center';\r\n      }\r\n   }\r\n\r\n   handleChange(index, dataType, value) {\r\n      const newState = this.state.empArr.map((item, i) => {\r\n         if (i === index) {\r\n            return { ...item, [dataType]: value };\r\n         }\r\n         item.totalContacts =\r\n            item.phone + item.email + item.chat + item.leverage;\r\n         item.productivity = item.totalContacts / item.target;\r\n         return item;\r\n      });\r\n\r\n      this.setState({\r\n         empArr: newState\r\n      });\r\n   }\r\n\r\n   renderTableHeaders() {\r\n      return (\r\n         <tr className='bg-black text-white'>\r\n            <th>Date</th>\r\n            <th>Project</th>\r\n            <th>SAP</th>\r\n            <th>Name</th>\r\n            <th>Role</th>\r\n            <th className='text-center'>Target</th>\r\n            <th className='text-center'>Phone</th>\r\n            <th className='text-center'>Email</th>\r\n            <th className='text-center'>Chat</th>\r\n            <th className='text-center'>Web</th>\r\n            <th className='text-center'>Leverage</th>\r\n            <th className='text-center'>Total Contacts</th>\r\n            <th className='text-center'>Productivity</th>\r\n            <th className='text-center'>Effective Productivity</th>\r\n         </tr>\r\n      );\r\n   }\r\n\r\n   renderTableData() {\r\n      return this.state.empArr.map((emp, index) => {\r\n         return (\r\n            <tr key={emp._id}>\r\n               <td>{(emp.reportedAt = new Date().toLocaleDateString())}</td>\r\n               <td>{emp.project.name}</td>\r\n               <td>{emp.sap}</td>\r\n               <td>{emp.name}</td>\r\n               <td>{emp.role.role}</td>\r\n               <td className='text-center'>{emp.target}</td>\r\n               <td>\r\n                  <Input\r\n                     type='number'\r\n                     onChange={e =>\r\n                        this.handleChange(\r\n                           index,\r\n                           'phone',\r\n                           parseFloat(e.target.value)\r\n                        )\r\n                     }\r\n                     step='0.001'\r\n                     min='0'\r\n                     value={this.state.empArr[index].phone}\r\n                     size='sm'\r\n                     disabled={!this.state.enableInputs}\r\n                     className={this.setInputTheme()}\r\n                  />\r\n               </td>\r\n               <td>\r\n                  <Input\r\n                     type='number'\r\n                     onChange={e =>\r\n                        this.handleChange(\r\n                           index,\r\n                           'email',\r\n                           parseFloat(e.target.value)\r\n                        )\r\n                     }\r\n                     step='0.001'\r\n                     min='0'\r\n                     value={this.state.empArr[index].email}\r\n                     size='sm'\r\n                     disabled={!this.state.enableInputs}\r\n                     className={this.setInputTheme()}\r\n                  />\r\n               </td>\r\n               <td>\r\n                  <Input\r\n                     type='number'\r\n                     onChange={e =>\r\n                        this.handleChange(\r\n                           index,\r\n                           'chat',\r\n                           parseFloat(e.target.value)\r\n                        )\r\n                     }\r\n                     step='0.001'\r\n                     min='0'\r\n                     value={this.state.empArr[index].chat}\r\n                     size='sm'\r\n                     disabled={!this.state.enableInputs}\r\n                     className={this.setInputTheme()}\r\n                  />\r\n               </td>\r\n               <td>\r\n                  <Input\r\n                     type='number'\r\n                     onChange={e =>\r\n                        this.handleChange(\r\n                           index,\r\n                           'web',\r\n                           parseFloat(e.target.value)\r\n                        )\r\n                     }\r\n                     step='0.001'\r\n                     min='0'\r\n                     value={this.state.empArr[index].web}\r\n                     size='sm'\r\n                     disabled={!this.state.enableInputs}\r\n                     className={this.setInputTheme()}\r\n                  />\r\n               </td>\r\n               <td>\r\n                  <Input\r\n                     type='number'\r\n                     onChange={e =>\r\n                        this.handleChange(\r\n                           index,\r\n                           'leverage',\r\n                           parseFloat(e.target.value)\r\n                        )\r\n                     }\r\n                     step='0.001'\r\n                     min='0'\r\n                     value={this.state.empArr[index].leverage}\r\n                     size='sm'\r\n                     disabled={!this.state.enableInputs}\r\n                     className={this.setInputTheme()}\r\n                  />\r\n               </td>\r\n               <td className='text-center'>\r\n                  {(emp.totalContacts = this.calcProductivity(emp))}\r\n               </td>\r\n               <td className='text-center'>{emp.productivity + ' %'}</td>\r\n               <td className='text-center'>{emp.actualProductivity + ' %'}</td>\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   calcProductivity(emp) {\r\n      emp.phone = isNaN(emp.phone) ? 0 : emp.phone;\r\n      emp.chat = isNaN(emp.chat) ? 0 : emp.chat;\r\n      emp.email = isNaN(emp.email) ? 0 : emp.email;\r\n      emp.web = isNaN(emp.web) ? 0 : emp.web;\r\n      emp.leverage = isNaN(emp.leverage) ? 0 : emp.leverage;\r\n\r\n      emp.totalContacts =\r\n         emp.phone + emp.chat + emp.email + emp.web + emp.leverage;\r\n      emp.productivity = Math.round((emp.totalContacts / emp.target) * 100);\r\n\r\n      return emp.totalContacts;\r\n   }\r\n\r\n   async isCompleted() {\r\n      const { empArr } = this.state;\r\n      var isReady = false;\r\n\r\n      for (let i = 0; i < empArr.length; i++) {\r\n         if (isNaN(empArr[i].result) || empArr[i].result === null) {\r\n            return await isReady;\r\n         }\r\n      }\r\n      return await !isReady;\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n      console.log(this.state.empArr);\r\n      /*\r\n      var readyempReport = this.state.empArr.map((emp, index) => {\r\n         return {\r\n            reportedAt: emp.reportedAt,\r\n            project: emp.project._id,\r\n            emp_id: emp._id,\r\n            emp: emp.emp,\r\n            logic: emp.logic,\r\n            empType: emp.type.type,\r\n            target: emp.target,\r\n            result: emp.result,\r\n            status: emp.status\r\n         };\r\n      });\r\n\r\n      var data = {\r\n         empReport: readyempReport\r\n      };\r\n\r\n      const URL =\r\n         '/api/reports/report/employee/availability/';\r\n\r\n      this.setState({\r\n         isCompleted: await this.isCompleted()\r\n      });\r\n\r\n      if (this.state.isCompleted) {\r\n         axios.post(URL, data).then(doc => {\r\n            alert('emp Report saved successfully');\r\n            this.setState({\r\n               enableInputs: false\r\n            });\r\n         });\r\n      } else {\r\n         alert('emp Report not completed yet');\r\n      }\r\n      */\r\n   };\r\n\r\n   render() {\r\n      const { empArr, isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <div className='text-center'>\r\n               <Spinner color='primary' />\r\n            </div>\r\n         );\r\n      }\r\n\r\n      if (empArr.length === 0) {\r\n         return (\r\n            <div className='text-center text-secondary'>\r\n               <h6>No emps found...</h6>\r\n            </div>\r\n         );\r\n      }\r\n\r\n      return (\r\n         <div className='mt-5'>\r\n            <p>\r\n               emps to Report\r\n               <Button\r\n                  color='primary'\r\n                  size='sm'\r\n                  ref='getEmployeesData'\r\n                  id='getEmployeesData'\r\n                  className='float-right'\r\n                  onClick={this.handleSubmit}\r\n               >\r\n                  Submit <span className='fas fa-check ml-2' />\r\n               </Button>\r\n            </p>\r\n            <hr />\r\n            <Table\r\n               responsive\r\n               borderless\r\n               striped\r\n               hover\r\n               size='sm'\r\n               className={this.setTheme()}\r\n            >\r\n               <thead>{this.renderTableHeaders()}</thead>\r\n               <tbody>{this.renderTableData()}</tbody>\r\n            </Table>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n/*\r\nrequired data structure\r\n==================================================================\r\n   reportedAt: { type: Date, default: Date.now },\r\n   \r\n\r\n   result: { type: Number, required: true },          *to be calculated and send\r\n   status: { type: Boolean, required: true }          **to be calculated and send\r\n                                                         **(server side validation post submit)\r\n===================================================================\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}