{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport User from '../User/User';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n  }\n\n  _createClass(Auth, null, [{\n    key: \"authenticateUser\",\n\n    /**\n     * Authenticate a user. Save a token string in Local Storage\n     *\n     * @param {object} user\n     */\n    value: function authenticateUser(user) {\n      localStorage.setItem('user', JSON.stringify(user));\n      return this.isUserAuthenticated();\n    }\n    /**\n     * Check if a user is authenticated - check if a token is saved in Local Storage\n     * @async\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isUserAuthenticated\",\n    value: function isUserAuthenticated() {\n      return localStorage.getItem('user') !== null;\n    }\n    /**\n     * Deauthenticate a user. Remove a token from Local Storage.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"deauthenticateUser\",\n    value: function deauthenticateUser() {\n      localStorage.removeItem('user');\n      return localStorage.getItem('user') === null;\n    }\n    /**\n     * Get a token value.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var whoCall = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var user = localStorage.getItem('user') || null;\n\n      if (!user) {\n        return null;\n      }\n\n      user = JSON.parse(user);\n      return user.token;\n    }\n    /**\n     *  @returns {Boolean} Authorized : ['root','admin','ops manager', 'general manager']\n     */\n\n  }, {\n    key: \"isAuthorizedToRemove\",\n    value: function isAuthorizedToRemove() {\n      var userType = User.getUserType();\n\n      if (userType === 'root' || userType === 'admin' || userType === 'operations manager' || userType === 'general manager') {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {Boolean} Admin or Root : ['root','admin']\n     */\n\n  }, {\n    key: \"isAdminOrRoot\",\n    value: function isAdminOrRoot() {\n      var userType = User.getUserType();\n\n      if (userType === 'root' || userType === 'admin') {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport default Auth;","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/Modules/Client/API/Auth/Auth.js"],"names":["User","Auth","user","localStorage","setItem","JSON","stringify","isUserAuthenticated","getItem","removeItem","whoCall","parse","token","userType","getUserType"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,cAAjB;;IAEMC,I;;;;;;;;;;AACH;;;;;qCAKwBC,I,EAAM;AAC3BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACA,aAAO,KAAKK,mBAAL,EAAP;AACF;AAED;;;;;;;;0CAK6B;AAC1B,aAAOJ,YAAY,CAACK,OAAb,CAAqB,MAArB,MAAiC,IAAxC;AACF;AAED;;;;;;;yCAI4B;AACzBL,MAAAA,YAAY,CAACM,UAAb,CAAwB,MAAxB;AACA,aAAON,YAAY,CAACK,OAAb,CAAqB,MAArB,MAAiC,IAAxC;AACF;AAED;;;;;;;;+BAK8B;AAAA,UAAdE,OAAc,uEAAJ,EAAI;AAC3B,UAAIR,IAAI,GAAGC,YAAY,CAACK,OAAb,CAAqB,MAArB,KAAgC,IAA3C;;AACA,UAAI,CAACN,IAAL,EAAW;AACR,eAAO,IAAP;AACF;;AACDA,MAAAA,IAAI,GAAGG,IAAI,CAACM,KAAL,CAAWT,IAAX,CAAP;AACA,aAAOA,IAAI,CAACU,KAAZ;AACF;AAED;;;;;;2CAG8B;AAC3B,UAAIC,QAAQ,GAAGb,IAAI,CAACc,WAAL,EAAf;;AAEA,UACGD,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,OADb,IAEAA,QAAQ,KAAK,oBAFb,IAGAA,QAAQ,KAAK,iBAJhB,EAKE;AACC,eAAO,IAAP;AACF;;AACD,aAAO,KAAP;AACF;AAED;;;;;;oCAGuB;AACpB,UAAIA,QAAQ,GAAGb,IAAI,CAACc,WAAL,EAAf;;AAEA,UAAID,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC9C,eAAO,IAAP;AACF;;AACD,aAAO,KAAP;AACF;;;;;;AAEJ,eAAeZ,IAAf","sourcesContent":["import User from '../User/User';\n\nclass Auth {\n   /**\n    * Authenticate a user. Save a token string in Local Storage\n    *\n    * @param {object} user\n    */\n   static authenticateUser(user) {\n      localStorage.setItem('user', JSON.stringify(user));\n      return this.isUserAuthenticated();\n   }\n\n   /**\n    * Check if a user is authenticated - check if a token is saved in Local Storage\n    * @async\n    * @returns {boolean}\n    */\n   static isUserAuthenticated() {\n      return localStorage.getItem('user') !== null;\n   }\n\n   /**\n    * Deauthenticate a user. Remove a token from Local Storage.\n    * @return {boolean}\n    */\n   static deauthenticateUser() {\n      localStorage.removeItem('user');\n      return localStorage.getItem('user') === null;\n   }\n\n   /**\n    * Get a token value.\n    *\n    * @returns {string}\n    */\n   static getToken(whoCall = '') {\n      var user = localStorage.getItem('user') || null;\n      if (!user) {\n         return null;\n      }\n      user = JSON.parse(user);\n      return user.token;\n   }\n\n   /**\n    *  @returns {Boolean} Authorized : ['root','admin','ops manager', 'general manager']\n    */\n   static isAuthorizedToRemove() {\n      var userType = User.getUserType();\n\n      if (\n         userType === 'root' ||\n         userType === 'admin' ||\n         userType === 'operations manager' ||\n         userType === 'general manager'\n      ) {\n         return true;\n      }\n      return false;\n   }\n\n   /**\n    * @returns {Boolean} Admin or Root : ['root','admin']\n    */\n   static isAdminOrRoot() {\n      var userType = User.getUserType();\n\n      if (userType === 'root' || userType === 'admin') {\n         return true;\n      }\n      return false;\n   }\n}\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}