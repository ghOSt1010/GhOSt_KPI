{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/Employees/EmployeeCard.jsx\";\nimport React, { Component } from 'react';\nimport { Alert, H5, Portal } from '@blueprintjs/core';\nimport EmployeeForm from './EmployeeForm';\nimport Client from '../../../../Modules/Client/Client';\nimport DataManagerCard from '../../../../components/Card/DataManagerCard';\nimport UsersTable from './EmployeesTable';\n\nvar UsersCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UsersCard, _Component);\n\n  function UsersCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UsersCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UsersCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      sap: '',\n      name: '',\n      email: '',\n      role: '',\n      supportType: '',\n      project: '',\n      mainlanguage: '',\n      rm: '',\n      isLoading: 'false',\n      openAlert: false,\n      errorMessage: '',\n      errorMsg: ''\n    };\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, role, password, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, role = _this$state.role, password = _this$state.password;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, role, '5dfffe289fe19f21c85f3287', //<- temporaryfix\n                '5dfffe289fe19f21c85f3287' //<- temporaryfix\n                );\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(UsersCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsersData();\n    }\n  }, {\n    key: \"getUsersData\",\n    value: function () {\n      var _getUsersData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setLoading(true);\n                _context2.prev = 1;\n                this.resetErrorMsg();\n                _context2.next = 5;\n                return Client.Services.UsersService.getUsers();\n\n              case 5:\n                result = _context2.sent;\n                this.setState({\n                  users: result.data\n                });\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](1);\n                this.setState({\n                  errorMsg: _context2.t0.response\n                });\n                Client.Notifications.alert('Error while loading users list');\n\n              case 13:\n                _context2.prev = 13;\n                this.setLoading(false);\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 9, 13, 16]]);\n      }));\n\n      function getUsersData() {\n        return _getUsersData.apply(this, arguments);\n      }\n\n      return getUsersData;\n    }()\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMsg: ''\n      });\n    }\n  }, {\n    key: \"openAlert\",\n    value: function openAlert(msg) {\n      this.setState({\n        openAlert: true,\n        errorMessage: msg\n      });\n    }\n  }, {\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        email: '',\n        username: '',\n        role: 'USER',\n        password: '',\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          isLoading = _this$state2.isLoading,\n          sap = _this$state2.sap,\n          name = _this$state2.name,\n          email = _this$state2.email,\n          role = _this$state2.role,\n          supportType = _this$state2.supportType,\n          project = _this$state2.project,\n          mainlanguage = _this$state2.mainlanguage,\n          rm = _this$state2.rm,\n          errorMessage = _this$state2.errorMessage,\n          openAlert = _this$state2.openAlert;\n      return React.createElement(DataManagerCard, {\n        icon: \"th\",\n        cardSize: \"m\",\n        headerText: \"Users\",\n        cardCaption: \"All app users\",\n        addButtonText: \"Add new user\",\n        id: \"allUsers\",\n        modalHeaderText: \"Add new user\",\n        onRefresh: function onRefresh() {\n          return _this2.getUsersData();\n        },\n        table: React.createElement(UsersTable, {\n          usersData: users,\n          onRefresh: function onRefresh() {\n            return _this2.getUsersData();\n          },\n          isLoading: isLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }),\n        addForm: React.createElement(EmployeeForm, {\n          onChange: this.onChange,\n          onSubmit: this.handleSubmit,\n          sap: sap,\n          name: name,\n          email: email,\n          role: role,\n          supportType: supportType,\n          project: project,\n          mainlanguage: mainlanguage,\n          rm: rm,\n          buttonCaption: \"Create\",\n          onClear: function onClear() {\n            return _this2.clearForm();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        isOpen: openAlert,\n        confirmButtonText: \"Clear form\",\n        onConfirm: function onConfirm() {\n          return _this2.clearForm();\n        },\n        cancelButtonText: \"Cancel\",\n        onCancel: function onCancel() {\n          return _this2.closeAlert();\n        },\n        intent: \"danger\",\n        icon: \"issue\",\n        ussePortal: React.createElement(Portal, {\n          container: document.getElementById('allUsers'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(H5, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, errorMessage), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Do you want to clear the data?\")));\n    }\n  }]);\n\n  return UsersCard;\n}(Component);\n\nexport { UsersCard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/Employees/EmployeeCard.jsx"],"names":["React","Component","Alert","H5","Portal","EmployeeForm","Client","DataManagerCard","UsersTable","UsersCard","state","sap","name","email","role","supportType","project","mainlanguage","rm","isLoading","openAlert","errorMessage","errorMsg","onChange","e","target","id","value","setState","handleSubmit","preventDefault","username","password","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","success","getUsersData","response","data","message","alert","error","setLoading","resetErrorMsg","getUsers","users","loading","msg","clearForm","closeAlert","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Alert, H5, Portal } from '@blueprintjs/core';\nimport EmployeeForm from './EmployeeForm';\nimport Client from '../../../../Modules/Client/Client';\nimport DataManagerCard from '../../../../components/Card/DataManagerCard';\nimport UsersTable from './EmployeesTable';\n\nexport default class UsersCard extends Component {\n   state = {\n      sap: '',\n      name: '',\n      email: '',\n      role: '',\n      supportType: '',\n      project: '',\n      mainlanguage: '',\n      rm: '',\n\n      isLoading: 'false',\n      openAlert: false,\n      errorMessage: '',\n      errorMsg: ''\n   };\n\n   componentDidMount() {\n      this.getUsersData();\n   }\n\n   async getUsersData() {\n      this.setLoading(true);\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.UsersService.getUsers();\n         this.setState({\n            users: result.data\n         });\n      } catch (err) {\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading users list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n   resetErrorMsg() {\n      this.setState({\n         errorMsg: ''\n      });\n   }\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openAlert(msg) {\n      this.setState({ openAlert: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ openAlert: false, errorMessage: '' });\n   }\n\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         role: 'USER',\n         password: '',\n         openAlert: false,\n         errorMessage: ''\n      });\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, username, role, password } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         role,\n         '5dfffe289fe19f21c85f3287', //<- temporaryfix\n         '5dfffe289fe19f21c85f3287' //<- temporaryfix\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   render() {\n      const {\n         isLoading,\n         sap,\n         name,\n         email,\n         role,\n         supportType,\n         project,\n         mainlanguage,\n         rm,\n         errorMessage,\n         openAlert\n      } = this.state;\n      return (\n         <DataManagerCard\n            icon='th'\n            cardSize='m'\n            headerText='Users'\n            cardCaption='All app users'\n            addButtonText='Add new user'\n            id='allUsers'\n            modalHeaderText='Add new user'\n            onRefresh={() => this.getUsersData()}\n            table={\n               <UsersTable\n                  usersData={users}\n                  onRefresh={() => this.getUsersData()}\n                  isLoading={isLoading}\n               ></UsersTable>\n            }\n            addForm={\n               <EmployeeForm\n                  onChange={this.onChange}\n                  onSubmit={this.handleSubmit}\n                  sap={sap}\n                  name={name}\n                  email={email}\n                  role={role}\n                  supportType={supportType}\n                  project={project}\n                  mainlanguage={mainlanguage}\n                  rm={rm}\n                  buttonCaption='Create'\n                  onClear={() => this.clearForm()}\n               />\n            }\n         >\n            <Alert\n               isOpen={openAlert}\n               confirmButtonText='Clear form'\n               onConfirm={() => this.clearForm()}\n               cancelButtonText='Cancel'\n               onCancel={() => this.closeAlert()}\n               intent='danger'\n               icon='issue'\n               ussePortal={\n                  <Portal container={document.getElementById('allUsers')} />\n               }\n            >\n               <H5>{errorMessage}</H5>\n               <strong>Do you want to clear the data?</strong>\n            </Alert>\n         </DataManagerCard>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}