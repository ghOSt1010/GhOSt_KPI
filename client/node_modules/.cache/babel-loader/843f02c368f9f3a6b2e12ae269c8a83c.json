{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, InputGroup, Keys, Popover, Position, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar Suggest =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Suggest, _super);\n\n  function Suggest() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isOpen: _this.props.popoverProps != null && _this.props.popoverProps.isOpen || false,\n      selectedItem: _this.getInitialSelectedItem()\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.input = null;\n    _this.queryList = null;\n    _this.refHandlers = {\n      input: function input(ref) {\n        _this.input = ref;\n        Utils.safeInvokeMember(_this.props.inputProps, \"inputRef\", ref);\n      },\n      queryList: function queryList(ref) {\n        return _this.queryList = ref;\n      }\n    };\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          fill = _a.fill,\n          _b = _a.inputProps,\n          inputProps = _b === void 0 ? {} : _b,\n          _c = _a.popoverProps,\n          popoverProps = _c === void 0 ? {} : _c;\n      var _d = _this.state,\n          isOpen = _d.isOpen,\n          selectedItem = _d.selectedItem;\n      var handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n      var _e = inputProps.autoComplete,\n          autoComplete = _e === void 0 ? \"off\" : _e,\n          _f = inputProps.placeholder,\n          placeholder = _f === void 0 ? \"Search...\" : _f;\n      var selectedItemText = selectedItem ? _this.props.inputValueRenderer(selectedItem) : \"\"; // placeholder shows selected item while open.\n\n      var inputPlaceholder = isOpen && selectedItemText ? selectedItemText : placeholder; // value shows query when open, and query remains when closed if nothing is selected.\n      // if resetOnClose is enabled, then hide query when not open. (see handlePopoverOpening)\n\n      var inputValue = isOpen ? listProps.query : selectedItemText || (_this.props.resetOnClose ? \"\" : listProps.query);\n\n      if (fill) {\n        popoverProps.fill = true;\n        inputProps.fill = true;\n      }\n\n      return React.createElement(Popover, tslib_1.__assign({\n        autoFocus: false,\n        enforceFocus: false,\n        isOpen: isOpen,\n        position: Position.BOTTOM_LEFT\n      }, popoverProps, {\n        className: classNames(listProps.className, popoverProps.className),\n        onInteraction: _this.handlePopoverInteraction,\n        popoverClassName: classNames(Classes.SELECT_POPOVER, popoverProps.popoverClassName),\n        onOpening: _this.handlePopoverOpening,\n        onOpened: _this.handlePopoverOpened\n      }), React.createElement(InputGroup, tslib_1.__assign({\n        autoComplete: autoComplete,\n        disabled: _this.props.disabled\n      }, inputProps, {\n        inputRef: _this.refHandlers.input,\n        onChange: listProps.handleQueryChange,\n        onFocus: _this.handleInputFocus,\n        onKeyDown: _this.getTargetKeyDownHandler(handleKeyDown),\n        onKeyUp: _this.getTargetKeyUpHandler(handleKeyUp),\n        placeholder: inputPlaceholder,\n        value: inputValue\n      })), React.createElement(\"div\", {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      }, listProps.itemList));\n    };\n\n    _this.selectText = function () {\n      // wait until the input is properly focused to select the text inside of it\n      requestAnimationFrame(function () {\n        if (_this.input != null) {\n          _this.input.setSelectionRange(0, _this.input.value.length);\n        }\n      });\n    };\n\n    _this.handleInputFocus = function (event) {\n      _this.selectText(); // TODO can we leverage Popover.openOnTargetFocus for this?\n\n\n      if (!_this.props.openOnKeyDown) {\n        _this.setState({\n          isOpen: true\n        });\n      }\n\n      Utils.safeInvokeMember(_this.props.inputProps, \"onFocus\", event);\n    };\n\n    _this.handleItemSelect = function (item, event) {\n      var nextOpenState;\n\n      if (!_this.props.closeOnSelect) {\n        if (_this.input != null) {\n          _this.input.focus();\n        }\n\n        _this.selectText();\n\n        nextOpenState = true;\n      } else {\n        if (_this.input != null) {\n          _this.input.blur();\n        }\n\n        nextOpenState = false;\n      } // the internal state should only change when uncontrolled.\n\n\n      if (_this.props.selectedItem === undefined) {\n        _this.setState({\n          isOpen: nextOpenState,\n          selectedItem: item\n        });\n      } else {\n        // otherwise just set the next open state.\n        _this.setState({\n          isOpen: nextOpenState\n        });\n      }\n\n      Utils.safeInvoke(_this.props.onItemSelect, item, event);\n    };\n\n    _this.handlePopoverInteraction = function (nextOpenState) {\n      return requestAnimationFrame(function () {\n        if (_this.input != null && _this.input !== document.activeElement) {\n          // the input is no longer focused so we can close the popover\n          _this.setState({\n            isOpen: false\n          });\n        }\n\n        Utils.safeInvokeMember(_this.props.popoverProps, \"onInteraction\", nextOpenState);\n      });\n    };\n\n    _this.handlePopoverOpening = function (node) {\n      // reset query before opening instead of when closing to prevent flash of unfiltered items.\n      // this is a limitation of the interactions between QueryList state and Popover transitions.\n      if (_this.props.resetOnClose && _this.queryList) {\n        _this.queryList.setQuery(\"\", true);\n      }\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpening\", node);\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      // scroll active item into view after popover transition completes and all dimensions are stable.\n      if (_this.queryList != null) {\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpened\", node);\n    };\n\n    _this.getTargetKeyDownHandler = function (handleQueryListKeyDown) {\n      return function (evt) {\n        var which = evt.which;\n\n        if (which === Keys.ESCAPE || which === Keys.TAB) {\n          if (_this.input != null) {\n            _this.input.blur();\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n        } else if (_this.props.openOnKeyDown && which !== Keys.BACKSPACE && which !== Keys.ARROW_LEFT && which !== Keys.ARROW_RIGHT) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        if (_this.state.isOpen) {\n          Utils.safeInvoke(handleQueryListKeyDown, evt);\n        }\n\n        Utils.safeInvokeMember(_this.props.inputProps, \"onKeyDown\", evt);\n      };\n    };\n\n    _this.getTargetKeyUpHandler = function (handleQueryListKeyUp) {\n      return function (evt) {\n        if (_this.state.isOpen) {\n          Utils.safeInvoke(handleQueryListKeyUp, evt);\n        }\n\n        Utils.safeInvokeMember(_this.props.inputProps, \"onKeyUp\", evt);\n      };\n    };\n\n    return _this;\n  }\n\n  Suggest.ofType = function () {\n    return Suggest;\n  };\n\n  Suggest.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        disabled = _a.disabled,\n        inputProps = _a.inputProps,\n        popoverProps = _a.popoverProps,\n        restProps = tslib_1.__rest(_a, [\"disabled\", \"inputProps\", \"popoverProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      onItemSelect: this.handleItemSelect,\n      ref: this.refHandlers.queryList,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  Suggest.prototype.componentDidUpdate = function (_prevProps, prevState) {\n    // If the selected item prop changes, update the underlying state.\n    if (this.props.selectedItem !== undefined && this.props.selectedItem !== this.state.selectedItem) {\n      this.setState({\n        selectedItem: this.props.selectedItem\n      });\n    }\n\n    if (this.state.isOpen && !prevState.isOpen && this.queryList != null) {\n      this.queryList.scrollActiveItemIntoView();\n    }\n  };\n\n  Suggest.prototype.getInitialSelectedItem = function () {\n    // controlled > uncontrolled > default\n    if (this.props.selectedItem !== undefined) {\n      return this.props.selectedItem;\n    } else if (this.props.defaultSelectedItem !== undefined) {\n      return this.props.defaultSelectedItem;\n    } else {\n      return null;\n    }\n  };\n\n  Suggest.displayName = DISPLAYNAME_PREFIX + \".Suggest\";\n  Suggest.defaultProps = {\n    closeOnSelect: true,\n    fill: false,\n    openOnKeyDown: false,\n    resetOnClose: false\n  };\n  return Suggest;\n}(React.PureComponent);\n\nexport { Suggest };","map":null,"metadata":{},"sourceType":"module"}