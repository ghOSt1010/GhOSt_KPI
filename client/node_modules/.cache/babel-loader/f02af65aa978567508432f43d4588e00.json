{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Dashboards/Dashboards.jsx\";\nimport React, { Component } from 'react';\nimport { Tabs, Tab, H2, Classes, Spinner } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport MainDashboard from './components/MainDashboard';\nimport DashboardControllers from './components/DashboardControllers';\nimport TestView2 from './components/TestComponent2';\nimport ProjectOptions from '../../components/Selects/ProjectOptions';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Dashboards',\n      selectedTabId: 'Dashboards',\n      isLoading: true,\n      data: [],\n      errorMessage: '',\n      project: '',\n      target: 100,\n      labels: [1, 2, 3, 4, 5, 6, 6, 78, 8, 8, 90],\n      series: [{\n        name: 'series-1',\n        data: [30, 40, 45, 50, 49, 60, 70, 91]\n      }]\n    };\n\n    _this.onChangeProject = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var project, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setLoading(true);\n                project = this.state.project;\n                _context.prev = 2;\n                _context.next = 5;\n                return Client.Services.ReportingService.getReportByProjectID();\n\n              case 5:\n                result = _context.sent;\n                this.setState({\n                  data: result.data\n                });\n                console.log(result.data);\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](2);\n                alert(_context.t0);\n                this.setState({\n                  errorMsg: _context.t0.response\n                });\n                Client.Notifications.alert('Error while loading reports');\n\n              case 15:\n                _context.prev = 15;\n                this.setLoading(false);\n                return _context.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 10, 15, 18]]);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Dashboards') {\n        return React.createElement(DashboardControllers, {\n          onRefresh: function onRefresh() {\n            return _this2.getData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var project = this.state.project;\n\n      if (project === '') {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"no project seleted yet\");\n      }\n\n      return React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Dashboards\",\n        title: \"Main Dashboard\",\n        panel: React.createElement(MainDashboard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        id: \"2\",\n        title: \"Beta\",\n        panel: React.createElement(TestView2, {\n          labels: this.state.labels,\n          yaxisLabel: \"Results\",\n          xasisLabel: \"Reports\",\n          series: this.state.series,\n          targetValue: this.state.target,\n          targetInfo: \"KPI target\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), this.renderControlls());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          isLoading = _this$state.isLoading,\n          project = _this$state.project;\n\n      if (isLoading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        id: \"Dashboards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Dashboard Panel\", React.createElement(\"div\", {\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(ProjectOptions, {\n        id: \"project\",\n        ref: \"project\",\n        onChange: this.onChangeProject,\n        value: this.state.project,\n        placeholder: \"Select Project...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })))), this.renderContent());\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Dashboards/Dashboards.jsx"],"names":["React","Component","Tabs","Tab","H2","Classes","Spinner","Client","MainDashboard","DashboardControllers","TestView2","ProjectOptions","Dashboard","state","activeTabID","selectedTabId","isLoading","data","errorMessage","project","target","labels","series","name","onChangeProject","e","id","value","setState","handleTabChange","getData","setLoading","Services","ReportingService","getReportByProjectID","result","console","log","alert","errorMsg","response","Notifications","loading","renderControlls","renderContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tabs, Tab, H2, Classes, Spinner } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport MainDashboard from './components/MainDashboard';\nimport DashboardControllers from './components/DashboardControllers';\nimport TestView2 from './components/TestComponent2';\nimport ProjectOptions from '../../components/Selects/ProjectOptions';\n\nexport default class Dashboard extends Component {\n   state = {\n      activeTabID: 'Dashboards',\n      selectedTabId: 'Dashboards',\n      isLoading: true,\n      data: [],\n      errorMessage: '',\n      project: '',\n      target: 100,\n      labels: [1, 2, 3, 4, 5, 6, 6, 78, 8, 8, 90],\n      series: [\n         {\n            name: 'series-1',\n            data: [30, 40, 45, 50, 49, 60, 70, 91]\n         }\n      ]\n   };\n\n   componentDidMount() {\n      this.getData();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      const { project } = this.state;\n\n      try {\n         //this.resetErrorMsg();\n         var result = await Client.Services.ReportingService.getReportByProjectID();\n         this.setState({\n            data: result.data\n         });\n         console.log(result.data);\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading reports');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChangeProject = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Dashboards') {\n         return <DashboardControllers onRefresh={() => this.getData()} />;\n      }\n   }\n   renderContent() {\n      const { project } = this.state;\n      if (project === '') {\n         return <p>no project seleted yet</p>;\n      }\n      return (\n         <Tabs\n            onChange={this.handleTabChange}\n            selectedTabId={this.state.selectedTabId}\n            large\n         >\n            <Tab\n               id='Dashboards'\n               title='Main Dashboard'\n               panel={<MainDashboard />}\n            />\n            <Tab\n               id='2'\n               title='Beta'\n               panel={\n                  <TestView2\n                     labels={this.state.labels}\n                     yaxisLabel='Results'\n                     xasisLabel='Reports'\n                     series={this.state.series}\n                     targetValue={this.state.target}\n                     targetInfo='KPI target'\n                  />\n               }\n            />\n            <Tabs.Expander />\n            {this.renderControlls()}\n         </Tabs>\n      );\n   }\n\n   render() {\n      const { data, isLoading, project } = this.state;\n\n      if (isLoading) {\n         return <Spinner></Spinner>;\n      }\n\n      return (\n         <div id='Dashboards'>\n            <div className='mt-2'>\n               <H2>\n                  Dashboard Panel\n                  <div className='float-right'>\n                     <ProjectOptions\n                        id='project'\n                        ref='project'\n                        onChange={this.onChangeProject}\n                        value={this.state.project}\n                        placeholder='Select Project...'\n                     />\n                  </div>\n               </H2>\n            </div>\n            {this.renderContent()}\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}