{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Charts/Chart/Chart.jsx\";\nimport React, { Component } from 'react';\nimport { Line, Bar, Pie, Doughnut, HorizontalBar, Radar, defaults } from 'react-chartjs-2';\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      theme: _this.props.theme\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"setChartFontColor\",\n    value: function setChartFontColor() {\n      if (this.state.theme === 'dark') {\n        defaults.global.defaultFontColor = 'lightgray';\n      } else {\n        defaults.global.defaultFontColor = 'black';\n      }\n    }\n  }, {\n    key: \"getChartOption\",\n    value: function getChartOption() {\n      var _displyGridLinesX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _displyGridLinesY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _isDoughnut = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      this.setChartFontColor();\n      var _doughnutHole = 0;\n      if (_isDoughnut) _doughnutHole = 75;\n      var chartOption = {\n        fontColor: 'white',\n        maintainAspectRatio: true,\n        responsive: true,\n        cutoutPercentage: _doughnutHole,\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: !_isDoughnut\n            },\n            gridLines: {\n              display: _displyGridLinesX,\n              drawBorder: false,\n              color: 'rgb(0,0,0,0.1)'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: !_isDoughnut\n            },\n            gridLines: {\n              display: _displyGridLinesY,\n              drawBorder: false,\n              color: 'rgb(0,0,0,0.1)'\n            }\n          }]\n        }\n      };\n      return chartOption;\n    } //chart factory\n\n  }, {\n    key: \"getChart\",\n    value: function getChart(chartType, data, height, width) {\n      if (chartType === 'Bar' | chartType === 'bar') {\n        return React.createElement(Bar, {\n          options: this.getChartOption(),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'HorizontalBar' | chartType === 'horizontalBar' | chartType === 'hBar') {\n        return React.createElement(HorizontalBar, {\n          options: this.getChartOption(),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Line' | chartType === 'line') {\n        return React.createElement(Line, {\n          options: this.getChartOption(),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Pie' | chartType === 'pie') {\n        return React.createElement(Pie, {\n          options: this.getChartOption(false, false, true),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Radar' | chartType === 'radar') {\n        return React.createElement(Radar, {\n          options: this.getChartOption(false, false, true),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Doughnut' | chartType === 'doughnut') {\n        return React.createElement(Doughnut, {\n          options: this.getChartOption(false, false, true),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chartType = _this$props.chartType,\n          data = _this$props.data,\n          height = _this$props.height,\n          width = _this$props.width;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.getChart(chartType, data, height, width));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport { Chart as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Charts/Chart/Chart.jsx"],"names":["React","Component","Line","Bar","Pie","Doughnut","HorizontalBar","Radar","defaults","Chart","state","theme","props","global","defaultFontColor","_displyGridLinesX","_displyGridLinesY","_isDoughnut","setChartFontColor","_doughnutHole","chartOption","fontColor","maintainAspectRatio","responsive","cutoutPercentage","scales","xAxes","ticks","display","gridLines","drawBorder","color","yAxes","chartType","data","height","width","getChartOption","getChart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Line, Bar, Pie, Doughnut, HorizontalBar, Radar, defaults } from 'react-chartjs-2'\n\nexport default class Chart extends Component {\n\n   state = {\n      theme: this.props.theme\n   }\n\n   setChartFontColor(){\n      if (this.state.theme === 'dark'){\n         defaults.global.defaultFontColor = 'lightgray';\n      }else{\n         defaults.global.defaultFontColor = 'black';\n      }\n   }\n\n   getChartOption(_displyGridLinesX = true, _displyGridLinesY = true, _isDoughnut = false) {\n      this.setChartFontColor()\n      let _doughnutHole = 0;\n      if (_isDoughnut) _doughnutHole = 75;\n      let chartOption = {\n         fontColor: 'white',\n         maintainAspectRatio: true,\n         responsive: true,\n         cutoutPercentage: _doughnutHole,\n         scales: {\n            xAxes: [{\n               ticks: {\n                  display: !_isDoughnut\n               },\n               gridLines: {\n                  display: _displyGridLinesX,\n                  drawBorder: false,\n                  color: 'rgb(0,0,0,0.1)'\n               }\n            }],\n            yAxes: [{\n               ticks: {\n                  display: !_isDoughnut\n               },\n               gridLines: {\n                  display: _displyGridLinesY,\n                  drawBorder: false,\n                  color: 'rgb(0,0,0,0.1)'\n               }\n            }]\n         }\n      }\n      return chartOption;\n   }\n\n   //chart factory\n   getChart(chartType, data, height, width) {\n      if (chartType === 'Bar' | chartType === 'bar') {\n         return <Bar options={this.getChartOption()} data={data} height={height} width={width} />\n      }\n      if (chartType === 'HorizontalBar' | chartType === 'horizontalBar' | chartType === 'hBar') {\n         return <HorizontalBar options={this.getChartOption()} data={data} height={height} width={width} />\n      }\n      if (chartType === 'Line' | chartType === 'line') {\n         return <Line options={this.getChartOption()} data={data} height={height} width={width} />\n      }\n      if (chartType === 'Pie' | chartType === 'pie') {\n         return <Pie options={this.getChartOption(false, false, true)} data={data} height={height} width={width} />\n      }\n      if (chartType === 'Radar' | chartType === 'radar') {\n         return <Radar options={this.getChartOption(false, false, true)} data={data} height={height} width={width} />\n      }\n      if (chartType === 'Doughnut' | chartType === 'doughnut') {\n         return <Doughnut options={this.getChartOption(false, false, true)} data={data} height={height} width={width} />\n      }\n   }\n\n   render() {\n\n      const { chartType, data, height, width } = this.props;\n\n      return (\n         <div>\n            {this.getChart(chartType,\n               data,\n               height,\n               width\n            )}\n         </div>\n      )\n   }\n}\n"]},"metadata":{},"sourceType":"module"}