{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractComponent2, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as Classes from \"../common/classes\";\nimport * as Errors from \"../common/errors\";\nexport var QuadrantType;\n\n(function (QuadrantType) {\n  /**\n   * The main quadrant beneath any frozen rows or columns.\n   */\n  QuadrantType[\"MAIN\"] = \"main\";\n  /**\n   * The top quadrant, containing column headers and frozen rows.\n   */\n\n  QuadrantType[\"TOP\"] = \"top\";\n  /**\n   * The left quadrant, containing row headers and frozen columns.\n   */\n\n  QuadrantType[\"LEFT\"] = \"left\";\n  /**\n   * The top-left quadrant, containing the headers and cells common to both\n   * the frozen columns and frozen rows.\n   */\n\n  QuadrantType[\"TOP_LEFT\"] = \"top-left\";\n})(QuadrantType || (QuadrantType = {}));\n\nvar TableQuadrant =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TableQuadrant, _super);\n\n  function TableQuadrant() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableQuadrant.prototype.render = function () {\n    var _a = this.props,\n        grid = _a.grid,\n        enableRowHeader = _a.enableRowHeader,\n        quadrantType = _a.quadrantType,\n        bodyRenderer = _a.bodyRenderer;\n    var showFrozenRowsOnly = quadrantType === QuadrantType.TOP || quadrantType === QuadrantType.TOP_LEFT;\n    var showFrozenColumnsOnly = quadrantType === QuadrantType.LEFT || quadrantType === QuadrantType.TOP_LEFT;\n    var className = classNames(Classes.TABLE_QUADRANT, this.getQuadrantCssClass(), this.props.className);\n    var maybeMenu = enableRowHeader && CoreUtils.safeInvoke(this.props.menuRenderer);\n    var maybeRowHeader = enableRowHeader && CoreUtils.safeInvoke(this.props.rowHeaderCellRenderer, showFrozenRowsOnly);\n    var maybeColumnHeader = CoreUtils.safeInvoke(this.props.columnHeaderCellRenderer, showFrozenColumnsOnly);\n    var body = quadrantType != null ? bodyRenderer(quadrantType, showFrozenRowsOnly, showFrozenColumnsOnly) : bodyRenderer(); // need to set bottom container size to prevent overlay clipping on scroll\n\n    var bottomContainerStyle = {\n      height: grid.getHeight(),\n      width: grid.getWidth()\n    };\n    return React.createElement(\"div\", {\n      className: className,\n      style: this.props.style,\n      ref: this.props.quadrantRef\n    }, React.createElement(\"div\", {\n      className: Classes.TABLE_QUADRANT_SCROLL_CONTAINER,\n      ref: this.props.scrollContainerRef,\n      onScroll: this.props.onScroll,\n      onWheel: this.props.onWheel\n    }, React.createElement(\"div\", {\n      className: Classes.TABLE_TOP_CONTAINER\n    }, maybeMenu, maybeColumnHeader), React.createElement(\"div\", {\n      className: Classes.TABLE_BOTTOM_CONTAINER,\n      style: bottomContainerStyle\n    }, maybeRowHeader, React.createElement(\"div\", {\n      className: Classes.TABLE_QUADRANT_BODY_CONTAINER,\n      ref: this.props.bodyRef\n    }, body))));\n  };\n\n  TableQuadrant.prototype.validateProps = function (nextProps) {\n    var quadrantType = nextProps.quadrantType;\n\n    if (nextProps.onScroll != null && quadrantType != null && quadrantType !== QuadrantType.MAIN) {\n      console.warn(Errors.QUADRANT_ON_SCROLL_UNNECESSARILY_DEFINED);\n    }\n  };\n\n  TableQuadrant.prototype.getQuadrantCssClass = function () {\n    switch (this.props.quadrantType) {\n      case QuadrantType.MAIN:\n        return Classes.TABLE_QUADRANT_MAIN;\n\n      case QuadrantType.TOP:\n        return Classes.TABLE_QUADRANT_TOP;\n\n      case QuadrantType.LEFT:\n        return Classes.TABLE_QUADRANT_LEFT;\n\n      case QuadrantType.TOP_LEFT:\n        return Classes.TABLE_QUADRANT_TOP_LEFT;\n\n      default:\n        return undefined;\n    }\n  }; // we want the user to explicitly pass a quadrantType. define defaultProps as a Partial to avoid\n  // declaring that and other required props here.\n\n\n  TableQuadrant.defaultProps = {\n    enableRowHeader: true\n  };\n  TableQuadrant = tslib_1.__decorate([polyfill], TableQuadrant);\n  return TableQuadrant;\n}(AbstractComponent2);\n\nexport { TableQuadrant };","map":null,"metadata":{},"sourceType":"module"}