{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Draggable } from \"./draggable\";\nexport var Orientation;\n\n(function (Orientation) {\n  Orientation[Orientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\n  Orientation[Orientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\n})(Orientation || (Orientation = {}));\n\nvar ResizeHandle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ResizeHandle, _super);\n\n  function ResizeHandle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isDragging: false\n    };\n\n    _this.handleActivate = function (event) {\n      _this.setState({\n        isDragging: true\n      });\n\n      _this.props.onLayoutLock(true);\n\n      event.stopPropagation();\n      event.stopImmediatePropagation();\n      return true;\n    };\n\n    _this.handleDragMove = function (_event, coords) {\n      var orientationIndex = _this.props.orientation;\n\n      if (_this.props.onResizeMove != null) {\n        _this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n      }\n    };\n\n    _this.handleDragEnd = function (_event, coords) {\n      var orientationIndex = _this.props.orientation;\n\n      _this.setState({\n        isDragging: false\n      });\n\n      _this.props.onLayoutLock(false);\n\n      if (_this.props.onResizeMove != null) {\n        _this.props.onResizeMove(coords.offset[orientationIndex], coords.delta[orientationIndex]);\n      }\n\n      if (_this.props.onResizeEnd != null) {\n        _this.props.onResizeEnd(coords.offset[orientationIndex]);\n      }\n    };\n\n    _this.handleClick = function (_event) {\n      _this.setState({\n        isDragging: false\n      });\n\n      _this.props.onLayoutLock(false);\n    };\n\n    _this.handleDoubleClick = function (_event) {\n      _this.setState({\n        isDragging: false\n      });\n\n      _this.props.onLayoutLock(false);\n\n      if (_this.props.onDoubleClick != null) {\n        _this.props.onDoubleClick();\n      }\n    };\n\n    return _this;\n  }\n\n  ResizeHandle.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n        onResizeMove = _c.onResizeMove,\n        onResizeEnd = _c.onResizeEnd,\n        onDoubleClick = _c.onDoubleClick,\n        orientation = _c.orientation;\n\n    if (onResizeMove == null && onResizeEnd == null && onDoubleClick == null) {\n      return undefined;\n    }\n\n    var targetClasses = classNames(Classes.TABLE_RESIZE_HANDLE_TARGET, (_a = {}, _a[Classes.TABLE_DRAGGING] = this.state.isDragging, _a[Classes.TABLE_RESIZE_HORIZONTAL] = orientation === Orientation.HORIZONTAL, _a[Classes.TABLE_RESIZE_VERTICAL] = orientation === Orientation.VERTICAL, _a), this.props.className);\n    var handleClasses = classNames(Classes.TABLE_RESIZE_HANDLE, (_b = {}, _b[Classes.TABLE_DRAGGING] = this.state.isDragging, _b));\n    return React.createElement(Draggable, {\n      onActivate: this.handleActivate,\n      onClick: this.handleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onDragEnd: this.handleDragEnd,\n      onDragMove: this.handleDragMove\n    }, React.createElement(\"div\", {\n      className: targetClasses\n    }, React.createElement(\"div\", {\n      className: handleClasses\n    })));\n  };\n\n  return ResizeHandle;\n}(React.PureComponent);\n\nexport { ResizeHandle };","map":null,"metadata":{},"sourceType":"module"}