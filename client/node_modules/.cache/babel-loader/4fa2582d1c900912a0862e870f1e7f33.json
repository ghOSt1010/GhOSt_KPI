{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/scarlet_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/scarlet_app/client/src/components/Charts/Chart/Chart.jsx\";\nimport React, { Component } from \"react\";\nimport { Line, Bar, Pie, Doughnut, HorizontalBar, Radar, defaults } from \"react-chartjs-2\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      theme: _this.props.theme\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      this.setChartFontColor();\n    }\n  }, {\n    key: \"setChartFontColor\",\n    value: function setChartFontColor() {\n      var theme = this.state.theme;\n\n      if (theme === \"dark\") {\n        defaults.global.defaultFontColor = \"lightgray\";\n        defaults.global.legend.fontColor = \"white\";\n      }\n\n      if (theme === \"light\") {\n        defaults.global.defaultFontColor = \"black\";\n        defaults.global.legend.fontColor = \"black\";\n      }\n    }\n  }, {\n    key: \"getChartOption\",\n    value: function getChartOption() {\n      var _displyGridLinesX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _displyGridLinesY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _isDoughnut = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      this.setChartFontColor();\n      var _doughnutHole = 0;\n      if (_isDoughnut) _doughnutHole = 75;\n      var chartOption = {\n        maintainAspectRatio: true,\n        legend: {\n          labels: {//fontColor: \"black\"\n          }\n        },\n        responsive: true,\n        cutoutPercentage: _doughnutHole,\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: !_isDoughnut\n            },\n            gridLines: {\n              display: _displyGridLinesX,\n              drawBorder: false,\n              color: \"rgb(0,0,0,0.1)\"\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: !_isDoughnut\n            },\n            gridLines: {\n              display: _displyGridLinesY,\n              drawBorder: false,\n              color: \"rgb(0,0,0,0.1)\"\n            }\n          }]\n        }\n      };\n      return chartOption;\n    } //chart factory\n\n  }, {\n    key: \"getChart\",\n    value: function getChart(chartType, data, height, width) {\n      if (chartType === \"Bar\" | chartType === \"bar\") {\n        return React.createElement(Bar, {\n          options: this.getChartOption(),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === \"HorizontalBar\" | chartType === \"horizontalBar\" | chartType === \"hBar\") {\n        return React.createElement(HorizontalBar, {\n          options: this.getChartOption(),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === \"Line\" | chartType === \"line\") {\n        return React.createElement(Line, {\n          options: this.getChartOption(),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === \"Pie\" | chartType === \"pie\") {\n        return React.createElement(Pie, {\n          options: this.getChartOption(false, false, true),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === \"Radar\" | chartType === \"radar\") {\n        return React.createElement(Radar, {\n          options: this.getChartOption(false, false, true),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === \"Doughnut\" | chartType === \"doughnut\") {\n        return React.createElement(Doughnut, {\n          options: this.getChartOption(false, false, true),\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chartType = _this$props.chartType,\n          data = _this$props.data,\n          height = _this$props.height,\n          width = _this$props.width;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, this.getChart(chartType, data, height, width));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport { Chart as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/scarlet_app/client/src/components/Charts/Chart/Chart.jsx"],"names":["React","Component","Line","Bar","Pie","Doughnut","HorizontalBar","Radar","defaults","Chart","state","theme","props","setChartFontColor","global","defaultFontColor","legend","fontColor","_displyGridLinesX","_displyGridLinesY","_isDoughnut","_doughnutHole","chartOption","maintainAspectRatio","labels","responsive","cutoutPercentage","scales","xAxes","ticks","display","gridLines","drawBorder","color","yAxes","chartType","data","height","width","getChartOption","getChart"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n   Line,\r\n   Bar,\r\n   Pie,\r\n   Doughnut,\r\n   HorizontalBar,\r\n   Radar,\r\n   defaults\r\n} from \"react-chartjs-2\";\r\n\r\nexport default class Chart extends Component {\r\n   state = {\r\n      theme: this.props.theme\r\n   };\r\n\r\n   componentWillReceiveProps() {\r\n      this.setChartFontColor();\r\n   }\r\n\r\n   setChartFontColor() {\r\n      const { theme } = this.state;\r\n      if (theme === \"dark\") {\r\n         defaults.global.defaultFontColor = \"lightgray\";\r\n         defaults.global.legend.fontColor = \"white\";\r\n      }\r\n      if (theme === \"light\") {\r\n         defaults.global.defaultFontColor = \"black\";\r\n         defaults.global.legend.fontColor = \"black\";\r\n      }\r\n   }\r\n\r\n   getChartOption(\r\n      _displyGridLinesX = true,\r\n      _displyGridLinesY = true,\r\n      _isDoughnut = false\r\n   ) {\r\n      this.setChartFontColor();\r\n      let _doughnutHole = 0;\r\n      if (_isDoughnut) _doughnutHole = 75;\r\n      let chartOption = {\r\n         maintainAspectRatio: true,\r\n         legend: {\r\n            labels: {\r\n               //fontColor: \"black\"\r\n            }\r\n         },\r\n         responsive: true,\r\n         cutoutPercentage: _doughnutHole,\r\n         scales: {\r\n            xAxes: [\r\n               {\r\n                  ticks: {\r\n                     display: !_isDoughnut\r\n                  },\r\n                  gridLines: {\r\n                     display: _displyGridLinesX,\r\n                     drawBorder: false,\r\n                     color: \"rgb(0,0,0,0.1)\"\r\n                  }\r\n               }\r\n            ],\r\n            yAxes: [\r\n               {\r\n                  ticks: {\r\n                     display: !_isDoughnut\r\n                  },\r\n                  gridLines: {\r\n                     display: _displyGridLinesY,\r\n                     drawBorder: false,\r\n                     color: \"rgb(0,0,0,0.1)\"\r\n                  }\r\n               }\r\n            ]\r\n         }\r\n      };\r\n      return chartOption;\r\n   }\r\n\r\n   //chart factory\r\n   getChart(chartType, data, height, width) {\r\n      if ((chartType === \"Bar\") | (chartType === \"bar\")) {\r\n         return (\r\n            <Bar\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if (\r\n         (chartType === \"HorizontalBar\") |\r\n         (chartType === \"horizontalBar\") |\r\n         (chartType === \"hBar\")\r\n      ) {\r\n         return (\r\n            <HorizontalBar\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === \"Line\") | (chartType === \"line\")) {\r\n         return (\r\n            <Line\r\n               options={this.getChartOption()}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === \"Pie\") | (chartType === \"pie\")) {\r\n         return (\r\n            <Pie\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === \"Radar\") | (chartType === \"radar\")) {\r\n         return (\r\n            <Radar\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n      if ((chartType === \"Doughnut\") | (chartType === \"doughnut\")) {\r\n         return (\r\n            <Doughnut\r\n               options={this.getChartOption(false, false, true)}\r\n               data={data}\r\n               height={height}\r\n               width={width}\r\n            />\r\n         );\r\n      }\r\n   }\r\n\r\n   render() {\r\n      const { chartType, data, height, width } = this.props;\r\n\r\n      return <div>{this.getChart(chartType, data, height, width)}</div>;\r\n   }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}