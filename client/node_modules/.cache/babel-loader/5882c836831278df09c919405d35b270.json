{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\nimport { Orientation } from \"../interactions/resizeHandle\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Header } from \"./header\";\nimport { RowHeaderCell } from \"./rowHeaderCell\";\n\nvar RowHeader =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RowHeader, _super);\n\n  function RowHeader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.wrapCells = function (cells) {\n      var _a = _this.props,\n          rowIndexStart = _a.rowIndexStart,\n          grid = _a.grid;\n      var tableHeight = grid.getRect().height;\n\n      var scrollTopCorrection = _this.props.grid.getCumulativeHeightBefore(rowIndexStart);\n\n      var style = {\n        // reduce the height to clamp the sliding window as we approach the final headers; otherwise,\n        // we'll have tons of useless whitespace at the end.\n        height: tableHeight - scrollTopCorrection,\n        // only header cells in view will render, but we need to reposition them to stay in view\n        // as we scroll vertically.\n        transform: \"translateY(\" + (scrollTopCorrection || 0) + \"px)\"\n      }; // add a wrapper set to the full-table height to ensure container styles stretch from the first\n      // cell all the way to the last\n\n      return React.createElement(\"div\", {\n        style: {\n          height: tableHeight\n        }\n      }, React.createElement(\"div\", {\n        className: Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER,\n        style: style\n      }, cells));\n    };\n\n    _this.convertPointToRow = function (clientXOrY, useMidpoint) {\n      var locator = _this.props.locator;\n      return locator != null ? locator.convertPointToRow(clientXOrY, useMidpoint) : null;\n    };\n\n    _this.getCellExtremaClasses = function (index, indexEnd) {\n      return _this.props.grid.getExtremaClasses(index, 0, indexEnd, 1);\n    };\n\n    _this.getRowHeight = function (index) {\n      return _this.props.grid.getRowRect(index).height;\n    };\n\n    _this.getDragCoordinate = function (clientCoords) {\n      return clientCoords[1]; // y-coordinate\n    };\n\n    _this.getMouseCoordinate = function (event) {\n      return event.clientY;\n    };\n\n    _this.handleResizeEnd = function (index, size) {\n      _this.props.onResizeGuide(null);\n\n      _this.props.onRowHeightChanged(index, size);\n    };\n\n    _this.handleSizeChanged = function (index, size) {\n      var rect = _this.props.grid.getRowRect(index);\n\n      _this.props.onResizeGuide([rect.top + size]);\n    };\n\n    _this.isCellSelected = function (index) {\n      return Regions.hasFullRow(_this.props.selectedRegions, index);\n    };\n\n    _this.isGhostIndex = function (index) {\n      return _this.props.grid.isGhostIndex(index, -1);\n    };\n\n    _this.renderGhostCell = function (index, extremaClasses) {\n      var rect = _this.props.grid.getGhostCellRect(index, 0);\n\n      return React.createElement(RowHeaderCell, {\n        className: classNames(extremaClasses),\n        index: index,\n        key: Classes.rowIndexClass(index),\n        loading: _this.props.loading,\n        style: {\n          height: rect.height + \"px\"\n        }\n      });\n    };\n\n    _this.toRegion = function (index1, index2) {\n      // the `this` value is messed up for Regions.row, so we have to have a wrapper function here\n      return Regions.row(index1, index2);\n    };\n\n    return _this;\n  }\n\n  RowHeader.prototype.render = function () {\n    var _a = this.props,\n        // from IRowHeaderProps\n    onRowHeightChanged = _a.onRowHeightChanged,\n        renderHeaderCell = _a.rowHeaderCellRenderer,\n        // from IRowHeights\n    minSize = _a.minRowHeight,\n        maxSize = _a.maxRowHeight,\n        defaultRowHeight = _a.defaultRowHeight,\n        // from IRowIndices\n    indexStart = _a.rowIndexStart,\n        indexEnd = _a.rowIndexEnd,\n        // from IHeaderProps\n    spreadableProps = tslib_1.__rest(_a, [\"onRowHeightChanged\", \"rowHeaderCellRenderer\", \"minRowHeight\", \"maxRowHeight\", \"defaultRowHeight\", \"rowIndexStart\", \"rowIndexEnd\"]);\n\n    return React.createElement(Header, tslib_1.__assign({\n      convertPointToIndex: this.convertPointToRow,\n      fullRegionCardinality: RegionCardinality.FULL_ROWS,\n      getCellExtremaClasses: this.getCellExtremaClasses,\n      getCellIndexClass: Classes.rowCellIndexClass,\n      getCellSize: this.getRowHeight,\n      getDragCoordinate: this.getDragCoordinate,\n      getIndexClass: Classes.rowIndexClass,\n      getMouseCoordinate: this.getMouseCoordinate,\n      ghostCellRenderer: this.renderGhostCell,\n      handleResizeEnd: this.handleResizeEnd,\n      handleSizeChanged: this.handleSizeChanged,\n      headerCellIsReorderablePropName: \"enableRowReordering\",\n      headerCellIsSelectedPropName: \"isRowSelected\",\n      headerCellRenderer: renderHeaderCell,\n      indexEnd: indexEnd,\n      indexStart: indexStart,\n      isCellSelected: this.isCellSelected,\n      isGhostIndex: this.isGhostIndex,\n      maxSize: maxSize,\n      minSize: minSize,\n      resizeOrientation: Orientation.HORIZONTAL,\n      selectedRegions: [],\n      toRegion: this.toRegion,\n      wrapCells: this.wrapCells\n    }, spreadableProps));\n  };\n\n  RowHeader.defaultProps = {\n    rowHeaderCellRenderer: renderDefaultRowHeader\n  };\n  return RowHeader;\n}(React.Component);\n\nexport { RowHeader };\n/**\n * A default implementation of `IRowHeaderRenderer` that displays 1-indexed\n * numbers for each row.\n */\n\nexport function renderDefaultRowHeader(rowIndex) {\n  return React.createElement(RowHeaderCell, {\n    index: rowIndex,\n    name: \"\" + (rowIndex + 1)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}