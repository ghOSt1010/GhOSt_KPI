{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/BluePrintView/components/MainDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Row } from 'reactstrap'; //import TopBar from '../Nav/TopBar/TopBar';\n\nimport QuickView from './QuickView/QuickView';\nimport ChartCard from '../../../components/Card/ChartCard/ChartCard';\nimport UIManager from '../../../Modules/UIManager/UIManager';\n\nvar testData = require('../../../Data_OldStatic/old_data');\n\nvar MainDashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainDashboard, _Component);\n\n  function MainDashboard(props) {\n    var _this;\n\n    _classCallCheck(this, MainDashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainDashboard).call(this, props));\n    _this.testd = testData;\n    _this.data = {\n      labels: _this.labels(),\n      datasets: [{\n        label: 'Data',\n        backgroundColor: '#4099ff',\n        borderColor: '#4099ff',\n        data: _this.productivityData()\n      }]\n    };\n    _this.dataBar = {\n      labels: _this.labels(),\n      datasets: [{\n        label: 'Actual Productivity',\n        backgroundColor: 'rgba(255,165,0,0.8)',\n        data: _this.actualProductivityData()\n      }, {\n        label: 'Productivity',\n        backgroundColor: 'rgba(0, 191, 255, 0.8)',\n        data: _this.productivityData()\n      }]\n    };\n    _this.data_line = {\n      labels: _this.labels(),\n      datasets: [{\n        label: 'Actual Productivity',\n        borderColor: 'rgba(0, 191, 255, 0.8)',\n        backgroundColor: 'rgba(0,0,0,0)',\n        data: _this.actualProductivityData()\n      }, {\n        label: 'Productivity',\n        borderColor: 'rgba(255,165,0,0.8)',\n        backgroundColor: 'rgba(0,0,0,0)',\n        data: _this.productivityData()\n      }]\n    };\n    _this.dataRound = {\n      labels: ['a', 'b'],\n      datasets: [{\n        label: 'Data',\n        backgroundColor: ['#4099ff', '#FFF3201'],\n        borderColor: 'transparent',\n        data: [90, 10]\n      }]\n    };\n\n    _this.switchShowReportFilter = function () {\n      _this.setState(function (state) {\n        return {\n          showReportFilter: !state.showReportFilter\n        };\n      });\n    };\n\n    _this.state = {\n      theme: UIManager.getTheme(),\n      showReportFilter: false,\n      activeTab: '1'\n    };\n    return _this;\n  }\n\n  _createClass(MainDashboard, [{\n    key: \"setBgByTheme\",\n    value: function setBgByTheme(theme) {\n      if (theme === 'dark') {\n        return 'main-data-bg-dark';\n      }\n\n      if (theme === 'light') {\n        return 'main-data-bg-light';\n      } else {\n        return 'main-data-bg-dark';\n      }\n    }\n  }, {\n    key: \"switchTab\",\n    value: function switchTab(tab) {\n      if (this.state.activeTab !== tab) {\n        this.setState({\n          activeTab: tab\n        });\n      }\n    }\n  }, {\n    key: \"labels\",\n    value: function labels() {\n      return this.testd.map(function (P) {\n        return P.Project_Name;\n      });\n    }\n  }, {\n    key: \"productivityData\",\n    value: function productivityData() {\n      return this.testd.map(function (P) {\n        return P.TotalProductivity;\n      });\n    }\n  }, {\n    key: \"actualProductivityData\",\n    value: function actualProductivityData() {\n      return this.testd.map(function (P) {\n        return P.ActualProductivity;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var theme = this.state.theme;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(QuickView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ChartCard, {\n        chartType: \"Bar\",\n        data: this.dataBar,\n        headerText: \"Graf\",\n        height: 300,\n        width: 700,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"Line\",\n        data: this.data_line,\n        headerText: \"Graf\",\n        height: 300,\n        width: 700,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"Line\",\n        data: this.data,\n        headerText: \"Line_test\",\n        height: 300,\n        width: 700,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"Bar\",\n        data: this.data,\n        headerText: \"Bar_test\",\n        height: 300,\n        width: 700,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"Pie\",\n        data: this.dataRound,\n        headerText: \"Pie Test\",\n        size: \"s\",\n        height: 300,\n        width: 700,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"Doughnut\",\n        data: this.dataRound,\n        headerText: \"Doughnut test\",\n        size: \"s\",\n        height: 300,\n        width: 700,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"Radar\",\n        data: this.dataBar,\n        headerText: \"Radar test\",\n        height: 300,\n        width: 700,\n        size: \"s\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(ChartCard, {\n        chartType: \"hBar\",\n        data: this.dataBar,\n        headerText: \"Horizontal Bar\",\n        height: 300,\n        width: 700,\n        size: \"xl\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MainDashboard;\n}(Component);\n\nexport { MainDashboard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/BluePrintView/components/MainDashboard.jsx"],"names":["React","Component","Row","QuickView","ChartCard","UIManager","testData","require","MainDashboard","props","testd","data","labels","datasets","label","backgroundColor","borderColor","productivityData","dataBar","actualProductivityData","data_line","dataRound","switchShowReportFilter","setState","state","showReportFilter","theme","getTheme","activeTab","tab","map","P","Project_Name","TotalProductivity","ActualProductivity"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row } from 'reactstrap';\r\n\r\n//import TopBar from '../Nav/TopBar/TopBar';\r\nimport QuickView from './QuickView/QuickView';\r\nimport ChartCard from '../../../components/Card/ChartCard/ChartCard';\r\n\r\nimport UIManager from '../../../Modules/UIManager/UIManager';\r\n\r\nconst testData = require('../../../Data_OldStatic/old_data');\r\n\r\nexport default class MainDashboard extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         theme: UIManager.getTheme(),\r\n         showReportFilter: false,\r\n         activeTab: '1'\r\n      };\r\n   }\r\n\r\n   setBgByTheme(theme) {\r\n      if (theme === 'dark') {\r\n         return 'main-data-bg-dark';\r\n      }\r\n      if (theme === 'light') {\r\n         return 'main-data-bg-light';\r\n      } else {\r\n         return 'main-data-bg-dark';\r\n      }\r\n   }\r\n\r\n   switchTab(tab) {\r\n      if (this.state.activeTab !== tab) {\r\n         this.setState({\r\n            activeTab: tab\r\n         });\r\n      }\r\n   }\r\n\r\n   testd = testData;\r\n\r\n   labels() {\r\n      return this.testd.map(P => P.Project_Name);\r\n   }\r\n\r\n   productivityData() {\r\n      return this.testd.map(P => P.TotalProductivity);\r\n   }\r\n\r\n   actualProductivityData() {\r\n      return this.testd.map(P => P.ActualProductivity);\r\n   }\r\n\r\n   data = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'Data',\r\n            backgroundColor: '#4099ff',\r\n            borderColor: '#4099ff',\r\n            data: this.productivityData()\r\n         }\r\n      ]\r\n   };\r\n   dataBar = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'Actual Productivity',\r\n            backgroundColor: 'rgba(255,165,0,0.8)',\r\n            data: this.actualProductivityData()\r\n         },\r\n         {\r\n            label: 'Productivity',\r\n            backgroundColor: 'rgba(0, 191, 255, 0.8)',\r\n            data: this.productivityData()\r\n         }\r\n      ]\r\n   };\r\n   data_line = {\r\n      labels: this.labels(),\r\n      datasets: [\r\n         {\r\n            label: 'Actual Productivity',\r\n            borderColor: 'rgba(0, 191, 255, 0.8)',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            data: this.actualProductivityData()\r\n         },\r\n         {\r\n            label: 'Productivity',\r\n            borderColor: 'rgba(255,165,0,0.8)',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            data: this.productivityData()\r\n         }\r\n      ]\r\n   };\r\n   dataRound = {\r\n      labels: ['a', 'b'],\r\n      datasets: [\r\n         {\r\n            label: 'Data',\r\n            backgroundColor: ['#4099ff', '#FFF3201'],\r\n            borderColor: 'transparent',\r\n            data: [90, 10]\r\n         }\r\n      ]\r\n   };\r\n\r\n   switchShowReportFilter = () => {\r\n      this.setState(state => ({ showReportFilter: !state.showReportFilter }));\r\n   };\r\n\r\n   render() {\r\n      const { theme } = this.state;\r\n\r\n      return (\r\n         <div>\r\n            <QuickView />\r\n            <Row>\r\n               <ChartCard\r\n                  chartType='Bar'\r\n                  data={this.dataBar}\r\n                  headerText='Graf'\r\n                  height={300}\r\n                  width={700}\r\n               />\r\n               <ChartCard\r\n                  chartType='Line'\r\n                  data={this.data_line}\r\n                  headerText='Graf'\r\n                  height={300}\r\n                  width={700}\r\n               />\r\n               <ChartCard\r\n                  chartType='Line'\r\n                  data={this.data}\r\n                  headerText='Line_test'\r\n                  height={300}\r\n                  width={700}\r\n               />\r\n               <ChartCard\r\n                  chartType='Bar'\r\n                  data={this.data}\r\n                  headerText='Bar_test'\r\n                  height={300}\r\n                  width={700}\r\n               />\r\n               <ChartCard\r\n                  chartType='Pie'\r\n                  data={this.dataRound}\r\n                  headerText='Pie Test'\r\n                  size='s'\r\n                  height={300}\r\n                  width={700}\r\n               />\r\n               <ChartCard\r\n                  chartType='Doughnut'\r\n                  data={this.dataRound}\r\n                  headerText='Doughnut test'\r\n                  size='s'\r\n                  height={300}\r\n                  width={700}\r\n               />\r\n               <ChartCard\r\n                  chartType='Radar'\r\n                  data={this.dataBar}\r\n                  headerText='Radar test'\r\n                  height={300}\r\n                  width={700}\r\n                  size='s'\r\n               />\r\n               <ChartCard\r\n                  chartType='hBar'\r\n                  data={this.dataBar}\r\n                  headerText='Horizontal Bar'\r\n                  height={300}\r\n                  width={700}\r\n                  size='xl'\r\n               />\r\n            </Row>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}