{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Charts/Chart/Chart.jsx\";\nimport React, { Component } from 'react';\nimport { Line, Bar, Pie, Doughnut, HorizontalBar, Radar, defaults } from 'react-chartjs-2'; //default chart options\n\ndefaults.global.defaultFontColor = 'lightgray';\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.chartOptionStd = {\n      fontColor: 'white',\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: true,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: true,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }]\n      }\n    };\n    _this.chartOptionPie = {\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n        xAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }]\n      }\n    };\n    _this.chartOptionDoughnut = {\n      maintainAspectRatio: false,\n      responsive: true,\n      cutoutPercentage: 75,\n      scales: {\n        xAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }]\n      }\n    };\n    _this.chartOptionRadar = {\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false,\n            drawBorder: false,\n            color: 'rgb(0,0,0,0.1)'\n          }\n        }]\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"getChart\",\n    value: function getChart(chartType, data, height, width) {\n      if (chartType === 'Bar' | chartType === 'bar') {\n        return React.createElement(Bar, {\n          options: this.chartOptionStd,\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'HorizontalBar' | chartType === 'horizontalBar' | chartType === 'hBar') {\n        return React.createElement(HorizontalBar, {\n          options: this.chartOptionStd,\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Line' | chartType === 'line') {\n        return React.createElement(Line, {\n          options: this.chartOptionStd,\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Pie' | chartType === 'pie') {\n        return React.createElement(Pie, {\n          options: this.chartOptionPie,\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Radar' | chartType === 'radar') {\n        return React.createElement(Radar, {\n          options: this.chartOptionStd,\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        });\n      }\n\n      if (chartType === 'Doughnut' | chartType === 'doughnut') {\n        return React.createElement(Doughnut, {\n          options: this.chartOptionDoughnut,\n          data: data,\n          height: height,\n          width: width,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          chartType = _this$props.chartType,\n          data = _this$props.data,\n          height = _this$props.height,\n          width = _this$props.width;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, this.getChart(chartType, data, height, width));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport { Chart as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Charts/Chart/Chart.jsx"],"names":["React","Component","Line","Bar","Pie","Doughnut","HorizontalBar","Radar","defaults","global","defaultFontColor","Chart","chartOptionStd","fontColor","maintainAspectRatio","responsive","scales","xAxes","gridLines","display","drawBorder","color","yAxes","chartOptionPie","ticks","chartOptionDoughnut","cutoutPercentage","chartOptionRadar","chartType","data","height","width","props","getChart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Line, Bar, Pie, Doughnut, HorizontalBar, Radar, defaults } from 'react-chartjs-2'\n\n//default chart options\ndefaults.global.defaultFontColor = 'lightgray';\n\nexport default class Chart extends Component {\n\n   chartOptionStd = {\n      fontColor: 'white',\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n         xAxes: [{\n            gridLines: {\n               display: true,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }],\n         yAxes: [{\n            gridLines: {\n               display: true,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }]\n      }\n   }\n\n   chartOptionPie = {\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n         xAxes: [{\n            ticks:{\n               display: false\n            },\n            gridLines: {\n               display: false,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }],\n         yAxes: [{\n            ticks:{\n               display: false\n            },\n            gridLines: {\n               display: false,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }]\n      }\n   }\n\n   chartOptionDoughnut = {\n      maintainAspectRatio: false,\n      responsive: true,\n      cutoutPercentage: 75,\n      scales: {\n         xAxes: [{\n            ticks:{\n               display: false\n            },\n            gridLines: {\n               display: false,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }],\n         yAxes: [{\n            ticks:{\n               display: false\n            },\n            gridLines: {\n               display: false,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }]\n      }\n   }\n\n   chartOptionRadar = {\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n         xAxes: [{\n            gridLines: {\n               display: false,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }],\n         yAxes: [{\n            gridLines: {\n               display: false,\n               drawBorder: false,\n               color: 'rgb(0,0,0,0.1)'\n            }\n         }]\n      }\n   }\n   \n   getChart(chartType, data, height, width){\n      if (chartType === 'Bar' | chartType === 'bar'){\n         return <Bar options={this.chartOptionStd} data={data} height={height} width={width}/>\n      } \n      if (chartType === 'HorizontalBar' | chartType === 'horizontalBar' | chartType === 'hBar'){\n         return <HorizontalBar options={this.chartOptionStd} data={data} height={height} width={width}/>\n      } \n      if (chartType === 'Line' | chartType === 'line'){\n         return <Line options={this.chartOptionStd} data={data} height={height} width={width}/>\n      }\n      if (chartType === 'Pie' | chartType === 'pie'){\n         return <Pie options={this.chartOptionPie} data={data} height={height} width={width}/>\n      }\n      if (chartType === 'Radar' | chartType === 'radar'){\n         return <Radar options={this.chartOptionStd} data={data} height={height} width={width}/>\n      }\n      if (chartType === 'Doughnut' | chartType === 'doughnut'){\n         return <Doughnut options={this.chartOptionDoughnut} data={data} height={height} width={width}/>\n      }\n   }\n\n   render() {\n\n      const { chartType, data, height, width } = this.props;\n\n      return (\n         <div>\n            {this.getChart(chartType,\n                           data,\n                           height,\n                           width\n            )}\n         </div>\n      )\n   }\n}\n"]},"metadata":{},"sourceType":"module"}