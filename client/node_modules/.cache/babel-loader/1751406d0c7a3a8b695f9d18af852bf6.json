{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport API from '../../API';\nimport Request from '../../Requests/Request';\nimport Sla from './DTO/SLA';\n/**\n * TODO:\n * -- finish all service methods\n */\n\nvar SLAsService =\n/*#__PURE__*/\nfunction () {\n  function SLAsService() {\n    _classCallCheck(this, SLAsService);\n  }\n\n  _createClass(SLAsService, null, [{\n    key: \"createSLADTO\",\n    value: function createSLADTO(projectID, SLATypeID, SLA, description, target, logic) {\n      return new Sla(projectID, SLATypeID, SLA, description, target, logic).getSLADTO();\n    }\n  }, {\n    key: \"getSLAs\",\n    value: function () {\n      var _getSLAs = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Request.get(API.ROUTES.SLA.GET_ALL_SLAS).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getSLAs() {\n        return _getSLAs.apply(this, arguments);\n      }\n\n      return getSLAs;\n    }()\n  }]);\n\n  return SLAsService;\n}();\n\nexport { SLAsService as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/Client/API/Services/SLAsService/SLAsService.js"],"names":["API","Request","Sla","SLAsService","projectID","SLATypeID","SLA","description","target","logic","getSLADTO","get","ROUTES","GET_ALL_SLAS","then","res","catch","err"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA;;;;;IAIqBC,W;;;;;;;;;iCACEC,S,EAAWC,S,EAAWC,G,EAAKC,W,EAAaC,M,EAAQC,K,EAAO;AACxE,aAAO,IAAIP,GAAJ,CACJE,SADI,EAEJC,SAFI,EAGJC,GAHI,EAIJC,WAJI,EAKJC,MALI,EAMJC,KANI,EAOLC,SAPK,EAAP;AAQF;;;;;;;;;;;;uBAEeT,OAAO,CAACU,GAAR,CAAYX,GAAG,CAACY,MAAJ,CAAWN,GAAX,CAAeO,YAA3B,EACTC,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;SAZEd,W","sourcesContent":["import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Sla from './DTO/SLA';\n/**\n * TODO:\n * -- finish all service methods\n */\nexport default class SLAsService {\n   static createSLADTO(projectID, SLATypeID, SLA, description, target, logic) {\n      return new Sla(\n         projectID,\n         SLATypeID,\n         SLA,\n         description,\n         target,\n         logic\n      ).getSLADTO();\n   }\n   static async getSLAs() {\n      return await Request.get(API.ROUTES.SLA.GET_ALL_SLAS)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n"]},"metadata":{},"sourceType":"module"}