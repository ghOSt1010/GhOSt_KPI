{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Button, DISPLAYNAME_PREFIX, InputGroup, Keys, Popover, Position, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar Select =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Select, _super);\n\n  function Select() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isOpen: false\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.input = null;\n    _this.queryList = null;\n    _this.refHandlers = {\n      input: function input(ref) {\n        _this.input = ref;\n        Utils.safeInvokeMember(_this.props.inputProps, \"inputRef\", ref);\n      },\n      queryList: function queryList(ref) {\n        return _this.queryList = ref;\n      }\n    };\n\n    _this.renderQueryList = function (listProps) {\n      // not using defaultProps cuz they're hard to type with generics (can't use <T> on static members)\n      var _a = _this.props,\n          _b = _a.filterable,\n          filterable = _b === void 0 ? true : _b,\n          _c = _a.disabled,\n          disabled = _c === void 0 ? false : _c,\n          _d = _a.inputProps,\n          inputProps = _d === void 0 ? {} : _d,\n          _e = _a.popoverProps,\n          popoverProps = _e === void 0 ? {} : _e;\n      var input = React.createElement(InputGroup, tslib_1.__assign({\n        leftIcon: \"search\",\n        placeholder: \"Filter...\",\n        rightElement: _this.maybeRenderClearButton(listProps.query)\n      }, inputProps, {\n        inputRef: _this.refHandlers.input,\n        onChange: listProps.handleQueryChange,\n        value: listProps.query\n      }));\n      var handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n      return React.createElement(Popover, tslib_1.__assign({\n        autoFocus: false,\n        enforceFocus: false,\n        isOpen: _this.state.isOpen,\n        disabled: disabled,\n        position: Position.BOTTOM_LEFT\n      }, popoverProps, {\n        className: classNames(listProps.className, popoverProps.className),\n        onInteraction: _this.handlePopoverInteraction,\n        popoverClassName: classNames(Classes.SELECT_POPOVER, popoverProps.popoverClassName),\n        onOpening: _this.handlePopoverOpening,\n        onOpened: _this.handlePopoverOpened,\n        onClosing: _this.handlePopoverClosing\n      }), React.createElement(\"div\", {\n        onKeyDown: _this.state.isOpen ? handleKeyDown : _this.handleTargetKeyDown,\n        onKeyUp: _this.state.isOpen ? handleKeyUp : undefined\n      }, _this.props.children), React.createElement(\"div\", {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      }, filterable ? input : undefined, listProps.itemList));\n    };\n\n    _this.handleTargetKeyDown = function (event) {\n      // open popover when arrow key pressed on target while closed\n      if (event.which === Keys.ARROW_UP || event.which === Keys.ARROW_DOWN) {\n        event.preventDefault();\n\n        _this.setState({\n          isOpen: true\n        });\n      }\n    };\n\n    _this.handleItemSelect = function (item, event) {\n      _this.setState({\n        isOpen: false\n      });\n\n      Utils.safeInvoke(_this.props.onItemSelect, item, event);\n    };\n\n    _this.handlePopoverInteraction = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onInteraction\", isOpen);\n    };\n\n    _this.handlePopoverOpening = function (node) {\n      // save currently focused element before popover steals focus, so we can restore it when closing.\n      _this.previousFocusedElement = document.activeElement;\n\n      if (_this.props.resetOnClose) {\n        _this.resetQuery();\n      }\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpening\", node);\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      // scroll active item into view after popover transition completes and all dimensions are stable.\n      if (_this.queryList != null) {\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      requestAnimationFrame(function () {\n        var _a = _this.props.inputProps,\n            inputProps = _a === void 0 ? {} : _a; // autofocus is enabled by default\n\n        if (inputProps.autoFocus !== false && _this.input != null) {\n          _this.input.focus();\n        }\n      });\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpened\", node);\n    };\n\n    _this.handlePopoverClosing = function (node) {\n      // restore focus to saved element.\n      // timeout allows popover to begin closing and remove focus handlers beforehand.\n      requestAnimationFrame(function () {\n        if (_this.previousFocusedElement !== undefined) {\n          _this.previousFocusedElement.focus();\n\n          _this.previousFocusedElement = undefined;\n        }\n      });\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onClosing\", node);\n    };\n\n    _this.resetQuery = function () {\n      return _this.queryList && _this.queryList.setQuery(\"\", true);\n    };\n\n    return _this;\n  }\n\n  Select.ofType = function () {\n    return Select;\n  };\n\n  Select.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        filterable = _a.filterable,\n        inputProps = _a.inputProps,\n        popoverProps = _a.popoverProps,\n        restProps = tslib_1.__rest(_a, [\"filterable\", \"inputProps\", \"popoverProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      onItemSelect: this.handleItemSelect,\n      ref: this.refHandlers.queryList,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  Select.prototype.componentDidUpdate = function (_prevProps, prevState) {\n    if (this.state.isOpen && !prevState.isOpen && this.queryList != null) {\n      this.queryList.scrollActiveItemIntoView();\n    }\n  };\n\n  Select.prototype.maybeRenderClearButton = function (query) {\n    return query.length > 0 ? React.createElement(Button, {\n      icon: \"cross\",\n      minimal: true,\n      onClick: this.resetQuery\n    }) : undefined;\n  };\n\n  Select.displayName = DISPLAYNAME_PREFIX + \".Select\";\n  return Select;\n}(React.PureComponent);\n\nexport { Select };","map":null,"metadata":{},"sourceType":"module"}