{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT = \"bp-table-text-no-measure\";\n/**\n * Since Firefox doesn't provide a computed \"font\" property, we manually\n * construct it using the ordered properties that can be specifed in CSS.\n */\n\nvar CSS_FONT_PROPERTIES = [\"font-style\", \"font-variant\", \"font-weight\", \"font-size\", \"font-family\"]; // table is nearly deprecated, let's not block on code coverage\n\n/* istanbul ignore next */\n\nexport var Utils = {\n  /**\n   * Invokes the callback `n` times, collecting the results in an array, which\n   * is the return value. Similar to _.times\n   */\n  times: function times(n, callback) {\n    if (n < 0) {\n      throw new Error(\"[Blueprint] times() cannot be called with negative numbers.\");\n    }\n\n    var result = Array(n);\n\n    for (var index = 0; index < n; index++) {\n      result[index] = callback(index);\n    }\n\n    return result;\n  },\n\n  /**\n   * Takes an array of numbers, returns an array of numbers of the same length in which each\n   * value is the sum of current and previous values in the input array.\n   *\n   * Example input:  [10, 20, 50]\n   *         output: [10, 30, 80]\n   */\n  accumulate: function accumulate(numbers) {\n    var result = [];\n    var sum = 0;\n\n    for (var _i = 0, numbers_1 = numbers; _i < numbers_1.length; _i++) {\n      var num = numbers_1[_i];\n      sum += num;\n      result.push(sum);\n    }\n\n    return result;\n  },\n\n  /**\n   * Returns traditional spreadsheet-style column names\n   * e.g. (A, B, ..., Z, AA, AB, ..., ZZ, AAA, AAB, ...).\n   *\n   * Note that this isn't technically mathematically equivalent to base 26 since\n   * there is no zero element.\n   */\n  toBase26Alpha: function toBase26Alpha(num) {\n    var str = \"\";\n\n    while (true) {\n      var letter = num % 26;\n      str = String.fromCharCode(65 + letter) + str;\n      num = num - letter;\n\n      if (num <= 0) {\n        return str;\n      }\n\n      num = num / 26 - 1;\n    }\n  },\n\n  /**\n   * Returns traditional spreadsheet-style cell names\n   * e.g. (A1, B2, ..., Z44, AA1) with rows 1-indexed.\n   */\n  toBase26CellName: function toBase26CellName(rowIndex, columnIndex) {\n    return \"\" + Utils.toBase26Alpha(columnIndex) + (rowIndex + 1);\n  },\n\n  /**\n   * Performs the binary search algorithm to find the index of the `value`\n   * parameter in a sorted list of numbers. If `value` is not in the list, the\n   * index where `value` can be inserted to maintain the sort is returned.\n   *\n   * Unlike a typical binary search implementation, we use a `lookup`\n   * callback to access the sorted list of numbers instead of an array. This\n   * avoids additional storage overhead.\n   *\n   * We use this to, for example, find the index of a row/col given its client\n   * coordinate.\n   *\n   * Adapted from lodash https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L3579\n   *\n   * @param value - the query value\n   * @param high - the length of the sorted list of numbers\n   * @param lookup - returns the number from the list at the supplied index\n   */\n  binarySearch: function binarySearch(value, high, lookup) {\n    var low = 0;\n\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2.0);\n      var computed = lookup(mid);\n\n      if (computed < value) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n\n    return high;\n  },\n\n  /**\n   * Returns a copy of the array that will have a length of the supplied parameter.\n   * If the array is too long, it will be truncated. If it is too short, it will be\n   * filled with the suppleid `fillValue` argument.\n   *\n   * @param array - the `Array` to copy and adjust\n   * @param length - the target length of the array\n   * @param fillValue - the value to add to the array if it is too short\n   */\n  arrayOfLength: function arrayOfLength(array, length, fillValue) {\n    if (array.length > length) {\n      return array.slice(0, length);\n    }\n\n    array = array.slice();\n\n    while (array.length < length) {\n      array.push(fillValue);\n    }\n\n    return array;\n  },\n\n  /**\n   * Takes in one full array of values and one sparse array of the same\n   * length and type. Returns a copy of the `defaults` array, where each\n   * value is replaced with the corresponding non-null value at the same\n   * index in `sparseOverrides`.\n   *\n   * @param defaults - the full array of default values\n   * @param sparseOverrides - the sparse array of override values\n   */\n  assignSparseValues: function assignSparseValues(defaults, sparseOverrides) {\n    if (sparseOverrides == null || defaults.length !== sparseOverrides.length) {\n      return defaults;\n    }\n\n    defaults = defaults.slice();\n\n    for (var i = 0; i < defaults.length; i++) {\n      var override = sparseOverrides[i];\n\n      if (override != null) {\n        defaults[i] = override;\n      }\n    }\n\n    return defaults;\n  },\n\n  /**\n   * Measures the bounds of supplied element's textContent.\n   * We use the computed font from the supplied element and a non-DOM canvas\n   * context to measure the text.\n   */\n  measureElementTextContent: function measureElementTextContent(element) {\n    var context = document.createElement(\"canvas\").getContext(\"2d\");\n    var style = getComputedStyle(element, null);\n    context.font = CSS_FONT_PROPERTIES.map(function (prop) {\n      return style.getPropertyValue(prop);\n    }).join(\" \");\n    return measureTextContentWithExclusions(context, element);\n  },\n\n  /**\n   * Given a number, returns a value that is clamped within a\n   * minimum/maximum bounded range. The minimum and maximum are optional. If\n   * either is missing, that extrema limit is not applied.\n   *\n   * Assumes max >= min.\n   */\n  clamp: function clamp(value, min, max) {\n    if (min != null && value < min) {\n      value = min;\n    }\n\n    if (max != null && value > max) {\n      value = max;\n    }\n\n    return value;\n  },\n\n  /**\n   * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n   * at the absolute index in the original ordering but emit the new index in the reordered list.\n   * This function converts an absolute \"guide\" index to a relative \"reordered\" index.\n   *\n   * Example: Say we want to move the first three columns two spots to the right. While we drag, a\n   * vertical guide is shown to preview where we'll be dropping the columns. (In the following\n   * ASCII art, `*` denotes a selected column, `·` denotes a cell border, and `|` denotes a\n   * vertical guide).\n   *\n   *     Before mousedown:\n   *     · 0 · 1 · 2 · 3 · 4 · 5 ·\n   *       *   *   *\n   *\n   *     During mousemove two spots to the right:\n   *     · 0 · 1 · 2 · 3 · 4 | 5 ·\n   *       *   *   *\n   *\n   *     After mouseup:\n   *     · 3 · 4 · 0 · 1 · 2 · 5 ·\n   *               *   *   *\n   *\n   * Note that moving the three columns beyond index 4 effectively moves them two spots rightward.\n   *\n   * In this case, the inputs to this function would be:\n   *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n   *     - newIndex: 5 (the index on whose left boundary the guide appears in the original ordering)\n   *     - length: 3 (the number of columns to move)\n   *\n   * The return value will then be 2, the left-most index of the columns in the new ordering.\n   */\n  guideIndexToReorderedIndex: function guideIndexToReorderedIndex(oldIndex, newIndex, length) {\n    if (newIndex < oldIndex) {\n      return newIndex;\n    } else if (oldIndex <= newIndex && newIndex < oldIndex + length) {\n      return oldIndex;\n    } else {\n      return Math.max(0, newIndex - length);\n    }\n  },\n\n  /**\n   * When reordering a contiguous block of rows or columns to a new index, we show a preview guide\n   * at the absolute index in the original ordering but emit the new index in the reordered list.\n   * This function converts a relative \"reordered\"\" index to an absolute \"guide\" index.\n   *\n   * For the scenario in the example above, the inputs to this function would be:\n   *     - oldIndex: 0 (the left-most index of the selected column range in the original ordering)\n   *     - newIndex: 2 (the left-most index of the selected column range in the new ordering)\n   *     - length: 3 (the number of columns to move)\n   *\n   * The return value will then be 5, the index on whose left boundary the guide should appear in\n   * the original ordering.\n   */\n  reorderedIndexToGuideIndex: function reorderedIndexToGuideIndex(oldIndex, newIndex, length) {\n    return newIndex <= oldIndex ? newIndex : newIndex + length;\n  },\n\n  /**\n   * Returns a copy of the provided array with the `length` contiguous elements starting at the\n   * `from` index reordered to start at the `to` index.\n   *\n   * For example, given the array [A,B,C,D,E,F], reordering the 3 contiguous elements starting at\n   * index 1 (B, C, and D) to start at index 2 would yield [A,E,B,C,D,F].\n   */\n  reorderArray: function reorderArray(array, from, to, length) {\n    if (length === void 0) {\n      length = 1;\n    }\n\n    if (length === 0 || length === array.length || from === to) {\n      // return an unchanged copy\n      return array.slice();\n    }\n\n    if (length < 0 || length > array.length || from + length > array.length) {\n      return undefined;\n    }\n\n    var before = array.slice(0, from);\n    var within = array.slice(from, from + length);\n    var after = array.slice(from + length);\n    var result = [];\n    var i = 0;\n    var b = 0;\n    var w = 0;\n    var a = 0;\n\n    while (i < to) {\n      if (b < before.length) {\n        result.push(before[b]);\n        b += 1;\n      } else {\n        result.push(after[a]);\n        a += 1;\n      }\n\n      i += 1;\n    }\n\n    while (w < length) {\n      result.push(within[w]);\n      w += 1;\n      i += 1;\n    }\n\n    while (i < array.length) {\n      if (b < before.length) {\n        result.push(before[b]);\n        b += 1;\n      } else {\n        result.push(after[a]);\n        a += 1;\n      }\n\n      i += 1;\n    }\n\n    return result;\n  },\n\n  /**\n   * Returns true if the mouse event was triggered by the left mouse button.\n   */\n  isLeftClick: function isLeftClick(event) {\n    return event.button === 0;\n  },\n  getApproxCellHeight: function getApproxCellHeight(cellText, columnWidth, approxCharWidth, approxLineHeight, horizontalPadding, numBufferLines) {\n    var numCharsInCell = cellText == null ? 0 : cellText.length;\n    var actualCellWidth = columnWidth;\n    var availableCellWidth = actualCellWidth - horizontalPadding;\n    var approxCharsPerLine = availableCellWidth / approxCharWidth;\n    var approxNumLinesDesired = Math.ceil(numCharsInCell / approxCharsPerLine) + numBufferLines;\n    var approxCellHeight = approxNumLinesDesired * approxLineHeight;\n    return approxCellHeight;\n  }\n}; // table is nearly deprecated, let's not block on code coverage\n\n/* istanbul ignore next */\n\n/**\n * Wrapper around Canvas measureText which applies some extra logic to optionally\n * exclude an element's text from the computation.\n */\n\nfunction measureTextContentWithExclusions(context, element) {\n  // We only expect one or zero excluded elements in this subtree\n  // We don't have a need for more than one, so we avoid that complexity altogether.\n  var elementToExclude = element.querySelector(\".\" + CLASSNAME_EXCLUDED_FROM_TEXT_MEASUREMENT);\n  var removedElementParent;\n  var removedElementNextSibling;\n\n  if (elementToExclude != null) {\n    removedElementParent = elementToExclude.parentElement;\n    removedElementNextSibling = elementToExclude.nextSibling;\n    removedElementParent.removeChild(elementToExclude);\n  }\n\n  var metrics = context.measureText(element.textContent);\n\n  if (elementToExclude != null) {\n    removedElementParent.insertBefore(elementToExclude, removedElementNextSibling);\n  }\n\n  return metrics;\n}","map":null,"metadata":{},"sourceType":"module"}