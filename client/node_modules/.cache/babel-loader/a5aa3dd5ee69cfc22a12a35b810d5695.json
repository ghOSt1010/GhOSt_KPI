{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar DragEvents =\n/** @class */\nfunction () {\n  function DragEvents() {\n    var _this = this;\n\n    this.handleMouseDown = function (event) {\n      _this.initCoordinateData(event);\n\n      if (_this.handler != null && _this.handler.onActivate != null) {\n        var exitCode = _this.handler.onActivate(event);\n\n        if (exitCode === false) {\n          return;\n        }\n      }\n\n      _this.isActivated = true;\n\n      _this.maybeAlterEventChain(event); // It is possible that the mouseup would not be called after the initial\n      // mousedown (for example if the mouse is moved out of the window). So,\n      // we preemptively detach to avoid duplicate listeners.\n\n\n      _this.detachDocumentEventListeners();\n\n      _this.attachDocumentEventListeners();\n    };\n\n    this.handleMouseMove = function (event) {\n      _this.maybeAlterEventChain(event);\n\n      if (_this.isActivated) {\n        _this.isDragging = true;\n      }\n\n      if (_this.isDragging) {\n        var coords = _this.updateCoordinateData(event);\n\n        if (_this.handler != null && _this.handler.onDragMove != null) {\n          _this.handler.onDragMove(event, coords);\n        }\n      }\n    };\n\n    this.handleMouseUp = function (event) {\n      _this.maybeAlterEventChain(event);\n\n      if (_this.handler != null) {\n        if (_this.isDragging) {\n          var coords = _this.updateCoordinateData(event);\n\n          if (_this.handler.onDragMove != null) {\n            _this.handler.onDragMove(event, coords);\n          }\n\n          if (_this.handler.onDragEnd != null) {\n            _this.handler.onDragEnd(event, coords);\n          }\n        } else if (_this.isActivated) {\n          if (_this.handler.onDoubleClick != null) {\n            if (_this.doubleClickTimeoutToken == null) {\n              // if this the first click of a possible double-click,\n              // we delay the firing of the click event by the\n              // timeout.\n              _this.doubleClickTimeoutToken = window.setTimeout(function () {\n                delete _this.doubleClickTimeoutToken;\n\n                if (_this.handler.onClick != null) {\n                  _this.handler.onClick(event);\n                }\n              }, DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC);\n            } else {\n              // otherwise, this is the second click in the double-\n              // click so we cancel the single-click timeout and\n              // fire the double-click event.\n              window.clearTimeout(_this.doubleClickTimeoutToken);\n              delete _this.doubleClickTimeoutToken;\n\n              _this.handler.onDoubleClick(event);\n            }\n          } else if (_this.handler.onClick != null) {\n            _this.handler.onClick(event);\n          }\n        }\n      }\n\n      _this.isActivated = false;\n      _this.isDragging = false;\n\n      _this.detachDocumentEventListeners();\n    };\n  }\n  /**\n   * Returns true if the event includes a modifier key that often adds the result of the drag\n   * event to any existing state. For example, holding CTRL before dragging may select another\n   * region in addition to an existing one, while the absence of a modifier key may clear the\n   * existing selection first.\n   * @param event the mouse event for the drag interaction\n   */\n\n\n  DragEvents.isAdditive = function (event) {\n    return event.ctrlKey || event.metaKey;\n  };\n\n  DragEvents.prototype.attach = function (element, handler) {\n    this.detach();\n    this.handler = handler;\n    this.element = element;\n\n    if (this.isValidDragHandler(handler)) {\n      this.element.addEventListener(\"mousedown\", this.handleMouseDown);\n    }\n\n    return this;\n  };\n\n  DragEvents.prototype.detach = function () {\n    if (this.element != null) {\n      this.element.removeEventListener(\"mousedown\", this.handleMouseDown);\n      this.detachDocumentEventListeners();\n    }\n  };\n\n  DragEvents.prototype.isValidDragHandler = function (handler) {\n    return handler != null && (handler.onActivate != null || handler.onDragMove != null || handler.onDragEnd != null || handler.onClick != null || handler.onDoubleClick != null);\n  };\n\n  DragEvents.prototype.attachDocumentEventListeners = function () {\n    document.addEventListener(\"mousemove\", this.handleMouseMove);\n    document.addEventListener(\"mouseup\", this.handleMouseUp);\n  };\n\n  DragEvents.prototype.detachDocumentEventListeners = function () {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n  };\n\n  DragEvents.prototype.initCoordinateData = function (event) {\n    this.activationCoordinates = [event.clientX, event.clientY];\n    this.lastCoordinates = this.activationCoordinates;\n  };\n\n  DragEvents.prototype.updateCoordinateData = function (event) {\n    var currentCoordinates = [event.clientX, event.clientY];\n    var deltaCoordinates = [currentCoordinates[0] - this.lastCoordinates[0], currentCoordinates[1] - this.lastCoordinates[1]];\n    var offsetCoordinates = [currentCoordinates[0] - this.activationCoordinates[0], currentCoordinates[1] - this.activationCoordinates[1]];\n    var data = {\n      activation: this.activationCoordinates,\n      current: currentCoordinates,\n      delta: deltaCoordinates,\n      last: this.lastCoordinates,\n      offset: offsetCoordinates\n    };\n    this.lastCoordinates = [event.clientX, event.clientY];\n    return data;\n  };\n\n  DragEvents.prototype.maybeAlterEventChain = function (event) {\n    if (this.handler.preventDefault) {\n      event.preventDefault();\n    }\n\n    if (this.handler.stopPropagation) {\n      event.stopPropagation();\n    }\n  };\n\n  DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC = 500;\n  return DragEvents;\n}();\n\nexport { DragEvents };","map":null,"metadata":{},"sourceType":"module"}