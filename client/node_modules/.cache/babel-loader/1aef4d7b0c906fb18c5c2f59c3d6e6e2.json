{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/components/Panels/AdminPanel.jsx\";\nimport React, { Component } from 'react';\nimport UsersTable from '../../components/Tables/UsersTable';\nimport UserDialog from '../../components/Dialogs/UserDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\n\nvar AdminPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPanel, _Component);\n\n  function AdminPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdminPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdminPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: '',\n      active: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n    };\n\n    _this.getSelected = function (user, isSelected) {\n      _this.setState({\n        selected: user,\n        canEdit: isSelected,\n        canDelete: isSelected\n      });\n\n      _this.getControlls(_this.state.isSelected);\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, usertype, password, active, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, usertype = _this$state.usertype, password = _this$state.password, active = _this$state.active;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, usertype, active);\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleUpdate =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var _this$state2, email, username, usertype, password, active, selected, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                _this$state2 = _this.state, email = _this$state2.email, username = _this$state2.username, usertype = _this$state2.usertype, password = _this$state2.password, active = _this$state2.active, selected = _this$state2.selected;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, usertype, active);\n                usr.user._id = selected._id;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return Client.Services.UsersService.updateUser(usr);\n\n              case 8:\n                result = _context2.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context2.next = 17;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](5);\n\n                if (_context2.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context2.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context2.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 12]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n\n      if (e.target.id === 'active') {\n        var a = state.active;\n\n        _this.setState({\n          active: !a\n        });\n\n        return;\n      }\n\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    return _this;\n  }\n\n  _createClass(AdminPanel, [{\n    key: \"getControlls\",\n    value: function getControlls() {\n      return this.props.getControlls(this.renderControlls());\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsersData();\n      this.getControlls();\n    }\n  }, {\n    key: \"getUsersData\",\n    value: function () {\n      var _getUsersData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setLoading(true);\n                _context3.prev = 1;\n                _context3.next = 4;\n                return Client.Services.UsersService.getUsers();\n\n              case 4:\n                result = _context3.sent;\n                this.setState({\n                  users: result.data\n                });\n                _context3.next = 13;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](1);\n                alert(_context3.t0);\n                this.setState({\n                  errorMsg: _context3.t0.response\n                });\n                Client.Notifications.alert('Error while loading users list');\n\n              case 13:\n                _context3.prev = 13;\n                this.setLoading(false);\n                return _context3.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 8, 13, 16]]);\n      }));\n\n      function getUsersData() {\n        return _getUsersData.apply(this, arguments);\n      }\n\n      return getUsersData;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                this.resetErrorMsg();\n                _context4.next = 4;\n                return Client.Services.UsersService.deleteUser(id);\n\n              case 4:\n                result = _context4.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('User removed successfully');\n                }\n\n                _context4.next = 12;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context4.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete user');\n\n              case 12:\n                _context4.prev = 12;\n                this.getUsersData();\n                this.closeDeleteAlert();\n                return _context4.finish(12);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 8, 12, 16]]);\n      }));\n\n      function deleteUser(_x3) {\n        return _deleteUser.apply(this, arguments);\n      }\n\n      return deleteUser;\n    }()\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"openAlert\",\n    value: function openAlert(msg) {\n      this.setState({\n        isAlertOpen: true,\n        errorMessage: msg\n      });\n    }\n  }, {\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"openUserDialog\",\n    value: function openUserDialog() {\n      this.setState({\n        isUserDialogOpen: true\n      });\n    }\n  }, {\n    key: \"closeUserDialog\",\n    value: function closeUserDialog() {\n      this.setState({\n        isUserDialogOpen: false\n      });\n    }\n  }, {\n    key: \"openUserEditDialog\",\n    value: function openUserEditDialog() {\n      var selected = this.state.selected;\n      this.setState({\n        isUserEditDialogOpen: true,\n        username: selected.username,\n        email: selected.email,\n        password: '',\n        usertype: selected.type\n      });\n    }\n  }, {\n    key: \"closeUserEditDialog\",\n    value: function closeUserEditDialog() {\n      this.setState({\n        isUserEditDialogOpen: false\n      });\n    }\n  }, {\n    key: \"openDeleteAlert\",\n    value: function openDeleteAlert() {\n      this.setState({\n        isDeleteAlertOpen: true\n      });\n    }\n  }, {\n    key: \"closeDeleteAlert\",\n    value: function closeDeleteAlert() {\n      this.setState({\n        isDeleteAlertOpen: false\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        email: '',\n        username: '',\n        usertype: 'standard',\n        password: '',\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return React.createElement(TableControllers, {\n        onEdit: function onEdit() {\n          return _this2.openUserEditDialog();\n        },\n        canEdit: enable,\n        onAdd: function onAdd() {\n          return _this2.openUserDialog();\n        },\n        onDelete: function onDelete() {\n          return _this2.openDeleteAlert();\n        },\n        canDelete: enable,\n        onRefresh: function onRefresh() {\n          return _this2.getUsersData();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state3 = this.state,\n          users = _this$state3.users,\n          isLoading = _this$state3.isLoading,\n          email = _this$state3.email,\n          username = _this$state3.username,\n          usertype = _this$state3.usertype,\n          password = _this$state3.password,\n          active = _this$state3.active,\n          isAlertOpen = _this$state3.isAlertOpen,\n          selected = _this$state3.selected;\n      return React.createElement(\"div\", {\n        id: \"AdminPanel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(UsersTable, {\n        usersData: users,\n        onRefresh: function onRefresh() {\n          return _this3.getUsersData();\n        },\n        isLoading: isLoading,\n        onSelection: this.getSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }), React.createElement(UserDialog, {\n        isOpen: this.state.isUserEditDialogOpen,\n        toOpen: function toOpen() {\n          return _this3.openUserEditDialog();\n        },\n        toClose: function toClose() {\n          return _this3.closeUserEditDialog();\n        },\n        email: email,\n        username: username,\n        password: password,\n        usertype: usertype,\n        active: active,\n        onChange: this.onChange,\n        handleSubmit: this.handleUpdate,\n        buttonCaption: \"Update\",\n        onClear: function onClear() {\n          return _this3.clearForm();\n        },\n        isAlertOpen: isAlertOpen,\n        closeAlert: function closeAlert() {\n          return _this3.closeAlert();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(UserDialog, {\n        isOpen: this.state.isUserDialogOpen,\n        toOpen: function toOpen() {\n          return _this3.openUserDialog();\n        },\n        toClose: function toClose() {\n          return _this3.closeUserDialog();\n        },\n        email: email,\n        username: username,\n        password: password,\n        usertype: usertype,\n        active: active,\n        onChange: this.onChange,\n        handleSubmit: this.handleSubmit,\n        buttonCaption: \"Add\",\n        onClear: function onClear() {\n          return _this3.clearForm();\n        },\n        isAlertOpen: isAlertOpen,\n        closeAlert: function closeAlert() {\n          return _this3.closeAlert();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), React.createElement(BeforeDeleteAlert, {\n        isOpen: this.state.isDeleteAlertOpen,\n        onConfirm: function onConfirm() {\n          return _this3.deleteUser(selected._id);\n        },\n        onCancel: function onCancel() {\n          return _this3.closeDeleteAlert();\n        },\n        portalID: \"AdminPanel\",\n        info: \"User: \".concat(selected.username),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AdminPanel;\n}(Component);\n\nexport { AdminPanel as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/components/Panels/AdminPanel.jsx"],"names":["React","Component","UsersTable","UserDialog","Client","TableControllers","BeforeDeleteAlert","AdminPanel","state","isLoading","users","openAlert","errorMessage","isUserDialogOpen","username","email","password","usertype","active","selected","isUserEditDialogOpen","isDeleteAlertOpen","canEdit","canDelete","getSelected","user","isSelected","setState","getControlls","handleSubmit","e","preventDefault","errorMsg","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","success","getUsersData","response","data","message","alert","error","handleUpdate","_id","updateUser","onChange","target","id","a","value","props","renderControlls","setLoading","getUsers","resetErrorMsg","deleteUser","closeDeleteAlert","msg","isAlertOpen","type","loading","enable","openUserEditDialog","openUserDialog","openDeleteAlert","closeUserEditDialog","clearForm","closeAlert","closeUserDialog"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;;IAEqBC,U;;;;;;;;;;;;;;;;;UAClBC,K,GAAQ;AACLC,MAAAA,SAAS,EAAE,IADN;AAELC,MAAAA,KAAK,EAAE,EAFF;AAGLC,MAAAA,SAAS,EAAE,IAHN;AAILC,MAAAA,YAAY,EAAE,EAJT;AAKLC,MAAAA,gBAAgB,EAAE,KALb;AAMLC,MAAAA,QAAQ,EAAE,EANL;AAOLC,MAAAA,KAAK,EAAE,EAPF;AAQLC,MAAAA,QAAQ,EAAE,EARL;AASLC,MAAAA,QAAQ,EAAE,EATL;AAULC,MAAAA,MAAM,EAAE,EAVH;AAWLC,MAAAA,QAAQ,EAAE,EAXL;AAYLC,MAAAA,oBAAoB,EAAE,KAZjB;AAaLC,MAAAA,iBAAiB,EAAE,KAbd;AAcLC,MAAAA,OAAO,EAAE,CAAC,KAdL;AAeLC,MAAAA,SAAS,EAAE,CAAC;AAfP,K;;UAsBRC,W,GAAc,UAACC,IAAD,EAAOC,UAAP,EAAsB;AACjC,YAAKC,QAAL,CAAc;AACXR,QAAAA,QAAQ,EAAEM,IADC;AAEXH,QAAAA,OAAO,EAAEI,UAFE;AAGXH,QAAAA,SAAS,EAAEG;AAHA,OAAd;;AAKA,YAAKE,YAAL,CAAkB,MAAKpB,KAAL,CAAWkB,UAA7B;AACF,K;;UAyCDG,Y;;;;;+BAAe,iBAAMC,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZA,gBAAAA,CAAC,CAACC,cAAF;AADY,8BAE4C,MAAKvB,KAFjD,EAEJO,KAFI,eAEJA,KAFI,EAEGD,QAFH,eAEGA,QAFH,EAEaG,QAFb,eAEaA,QAFb,EAEuBD,QAFvB,eAEuBA,QAFvB,EAEiCE,MAFjC,eAEiCA,MAFjC;AAGRc,gBAAAA,QAHQ,GAGG,eAHH;AAIRC,gBAAAA,GAJQ,GAIF7B,MAAM,CAAC8B,QAAP,CAAgBC,YAAhB,CAA6BC,aAA7B,CACPtB,QADO,EAEPC,KAFO,EAGPC,QAHO,EAIPC,QAJO,EAKPC,MALO,CAJE;AAAA;AAAA;AAAA,uBAYUd,MAAM,CAAC8B,QAAP,CAAgBC,YAAhB,CAA6BE,WAA7B,CAAyCJ,GAAzC,CAZV;;AAAA;AAYLK,gBAAAA,MAZK;;AAaT,oBAAIA,MAAM,CAACC,MAAP,KAAkB,GAAtB,EAA2B;AACxBnC,kBAAAA,MAAM,CAACoC,aAAP,CAAqBC,OAArB,gBAAqC3B,QAArC;;AACA,wBAAK4B,YAAL;AACF;;AAhBQ;AAAA;;AAAA;AAAA;AAAA;;AAkBT,oBAAI,YAAIC,QAAJ,CAAaJ,MAAb,KAAwB,GAA5B,EAAiC;AAC9BP,kBAAAA,QAAQ,oBAAa,YAAIW,QAAJ,CAAaC,IAAb,CAAkBC,OAA/B,CAAR;AACAzC,kBAAAA,MAAM,CAACoC,aAAP,CAAqBM,KAArB,CAA2Bd,QAA3B;AACF;;AACD,oBAAI,YAAIW,QAAJ,CAAaJ,MAAb,KAAwB,GAA5B,EAAiC;AAC9BP,kBAAAA,QAAQ,mCAA4BlB,QAA5B,UAAR;AACAV,kBAAAA,MAAM,CAACoC,aAAP,CAAqBO,KAArB,CAA2Bf,QAA3B;AACF;;AACD,sBAAKrB,SAAL,CAAeqB,QAAf;;AA1BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UA8BfgB,Y;;;;;+BAAe,kBAAMlB,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZA,gBAAAA,CAAC,CAACC,cAAF;AADY,+BASR,MAAKvB,KATG,EAGTO,KAHS,gBAGTA,KAHS,EAITD,QAJS,gBAITA,QAJS,EAKTG,QALS,gBAKTA,QALS,EAMTD,QANS,gBAMTA,QANS,EAOTE,MAPS,gBAOTA,MAPS,EAQTC,QARS,gBAQTA,QARS;AAURa,gBAAAA,QAVQ,GAUG,eAVH;AAWRC,gBAAAA,GAXQ,GAWF7B,MAAM,CAAC8B,QAAP,CAAgBC,YAAhB,CAA6BC,aAA7B,CACPtB,QADO,EAEPC,KAFO,EAGPC,QAHO,EAIPC,QAJO,EAKPC,MALO,CAXE;AAkBZe,gBAAAA,GAAG,CAACR,IAAJ,CAASwB,GAAT,GAAe9B,QAAQ,CAAC8B,GAAxB;AAlBY;AAAA;AAAA,uBAqBU7C,MAAM,CAAC8B,QAAP,CAAgBC,YAAhB,CAA6Be,UAA7B,CAAwCjB,GAAxC,CArBV;;AAAA;AAqBLK,gBAAAA,MArBK;;AAsBT,oBAAIA,MAAM,CAACC,MAAP,KAAkB,GAAtB,EAA2B;AACxBnC,kBAAAA,MAAM,CAACoC,aAAP,CAAqBC,OAArB,gBAAqC3B,QAArC;;AACA,wBAAK4B,YAAL;AACF;;AAzBQ;AAAA;;AAAA;AAAA;AAAA;;AA2BT,oBAAI,aAAIC,QAAJ,CAAaJ,MAAb,KAAwB,GAA5B,EAAiC;AAC9BP,kBAAAA,QAAQ,oBAAa,aAAIW,QAAJ,CAAaC,IAAb,CAAkBC,OAA/B,CAAR;AACAzC,kBAAAA,MAAM,CAACoC,aAAP,CAAqBM,KAArB,CAA2Bd,QAA3B;AACF;;AACD,oBAAI,aAAIW,QAAJ,CAAaJ,MAAb,KAAwB,GAA5B,EAAiC;AAC9BP,kBAAAA,QAAQ,mCAA4BlB,QAA5B,UAAR;AACAV,kBAAAA,MAAM,CAACoC,aAAP,CAAqBO,KAArB,CAA2Bf,QAA3B;AACF;;AACD,sBAAKrB,SAAL,CAAeqB,QAAf;;AAnCS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UAiDfmB,Q,GAAW,UAAArB,CAAC,EAAI;AACb,UAAMtB,KAAK,GAAG,MAAKA,KAAnB;;AACA,UAAIsB,CAAC,CAACsB,MAAF,CAASC,EAAT,KAAgB,QAApB,EAA8B;AAC3B,YAAIC,CAAC,GAAG9C,KAAK,CAACU,MAAd;;AACA,cAAKS,QAAL,CAAc;AAAET,UAAAA,MAAM,EAAE,CAACoC;AAAX,SAAd;;AACA;AACF;;AACD9C,MAAAA,KAAK,CAACsB,CAAC,CAACsB,MAAF,CAASC,EAAV,CAAL,GAAqBvB,CAAC,CAACsB,MAAF,CAASG,KAA9B;;AACA,YAAK5B,QAAL,CAAcnB,KAAd;AACF,K;;;;;;;mCA5Ic;AACZ,aAAO,KAAKgD,KAAL,CAAW5B,YAAX,CAAwB,KAAK6B,eAAL,EAAxB,CAAP;AACF;;;wCAWmB;AACjB,WAAKf,YAAL;AACA,WAAKd,YAAL;AACF;;;;;;;;;;;;AAGE,qBAAK8B,UAAL,CAAgB,IAAhB;;;uBAGkBtD,MAAM,CAAC8B,QAAP,CAAgBC,YAAhB,CAA6BwB,QAA7B,E;;;AAAfrB,gBAAAA,M;AACA,qBAAKX,QAAL,CAAc;AACXjB,kBAAAA,KAAK,EAAE4B,MAAM,CAACM;AADH,iBAAd;;;;;;;AAIAE,gBAAAA,KAAK,cAAL;AACA,qBAAKnB,QAAL,CAAc;AAAEK,kBAAAA,QAAQ,EAAE,aAAIW;AAAhB,iBAAd;AACAvC,gBAAAA,MAAM,CAACoC,aAAP,CAAqBM,KAArB,CAA2B,gCAA3B;;;;AAEA,qBAAKY,UAAL,CAAgB,KAAhB;;;;;;;;;;;;;;;;;;;;;;iDAIWL,E;;;;;;;AAGX,qBAAKO,aAAL;;uBACexD,MAAM,CAAC8B,QAAP,CAAgBC,YAAhB,CAA6B0B,UAA7B,CAAwCR,EAAxC,C;;;AAAff,gBAAAA,M;;AACA,oBAAIA,MAAM,CAACC,MAAP,KAAkB,GAAtB,EAA2B;AACxBnC,kBAAAA,MAAM,CAACoC,aAAP,CAAqBC,OAArB,CAA6B,2BAA7B;AACF;;;;;;;;AAED,qBAAKd,QAAL,CAAc;AAAEK,kBAAAA,QAAQ,EAAE,aAAIW,QAAJ,CAAaJ;AAAzB,iBAAd;AACAnC,gBAAAA,MAAM,CAACoC,aAAP,CAAqBM,KAArB,CAA2B,2BAA3B;;;;AAEA,qBAAKJ,YAAL;AACA,qBAAKoB,gBAAL;;;;;;;;;;;;;;;;;;;oCAyEU;AACb,WAAKnC,QAAL,CAAc;AAAEf,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACF;;;8BACSmD,G,EAAK;AACZ,WAAKpC,QAAL,CAAc;AAAEqC,QAAAA,WAAW,EAAE,IAAf;AAAqBpD,QAAAA,YAAY,EAAEmD;AAAnC,OAAd;AACF;;;iCACY;AACV,WAAKpC,QAAL,CAAc;AAAEqC,QAAAA,WAAW,EAAE,KAAf;AAAsBpD,QAAAA,YAAY,EAAE;AAApC,OAAd;AACF;;;qCAagB;AACd,WAAKe,QAAL,CAAc;AACXd,QAAAA,gBAAgB,EAAE;AADP,OAAd;AAGF;;;sCACiB;AACf,WAAKc,QAAL,CAAc;AACXd,QAAAA,gBAAgB,EAAE;AADP,OAAd;AAGF;;;yCAEoB;AAClB,UAAIM,QAAQ,GAAG,KAAKX,KAAL,CAAWW,QAA1B;AAEA,WAAKQ,QAAL,CAAc;AACXP,QAAAA,oBAAoB,EAAE,IADX;AAEXN,QAAAA,QAAQ,EAAEK,QAAQ,CAACL,QAFR;AAGXC,QAAAA,KAAK,EAAEI,QAAQ,CAACJ,KAHL;AAIXC,QAAAA,QAAQ,EAAE,EAJC;AAKXC,QAAAA,QAAQ,EAAEE,QAAQ,CAAC8C;AALR,OAAd;AAOF;;;0CACqB;AACnB,WAAKtC,QAAL,CAAc;AACXP,QAAAA,oBAAoB,EAAE;AADX,OAAd;AAGF;;;sCAEiB;AACf,WAAKO,QAAL,CAAc;AACXN,QAAAA,iBAAiB,EAAE;AADR,OAAd;AAGF;;;uCACkB;AAChB,WAAKM,QAAL,CAAc;AACXN,QAAAA,iBAAiB,EAAE;AADR,OAAd;AAGF;;;+BAEU6C,O,EAAS;AACjB,WAAKvC,QAAL,CAAc;AACXlB,QAAAA,SAAS,EAAEyD;AADA,OAAd;AAGF;;;gCAEW;AACT,WAAKvC,QAAL,CAAc;AACXZ,QAAAA,KAAK,EAAE,EADI;AAEXD,QAAAA,QAAQ,EAAE,EAFC;AAGXG,QAAAA,QAAQ,EAAE,UAHC;AAIXD,QAAAA,QAAQ,EAAE,EAJC;AAKXgD,QAAAA,WAAW,EAAE,KALF;AAMXpD,QAAAA,YAAY,EAAE;AANH,OAAd;AAQF;;;sCAE+B;AAAA;;AAAA,UAAhBuD,MAAgB,uEAAP,KAAO;AAC7B,aACG,oBAAC,gBAAD;AACG,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAACC,kBAAL,EAAN;AAAA,SADX;AAEG,QAAA,OAAO,EAAED,MAFZ;AAGG,QAAA,KAAK,EAAE;AAAA,iBAAM,MAAI,CAACE,cAAL,EAAN;AAAA,SAHV;AAIG,QAAA,QAAQ,EAAE;AAAA,iBAAM,MAAI,CAACC,eAAL,EAAN;AAAA,SAJb;AAKG,QAAA,SAAS,EAAEH,MALd;AAMG,QAAA,SAAS,EAAE;AAAA,iBAAM,MAAI,CAACzB,YAAL,EAAN;AAAA,SANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AAUF;;;6BAEQ;AAAA;;AAAA,yBAWF,KAAKlC,KAXH;AAAA,UAEHE,KAFG,gBAEHA,KAFG;AAAA,UAGHD,SAHG,gBAGHA,SAHG;AAAA,UAIHM,KAJG,gBAIHA,KAJG;AAAA,UAKHD,QALG,gBAKHA,QALG;AAAA,UAMHG,QANG,gBAMHA,QANG;AAAA,UAOHD,QAPG,gBAOHA,QAPG;AAAA,UAQHE,MARG,gBAQHA,MARG;AAAA,UASH8C,WATG,gBASHA,WATG;AAAA,UAUH7C,QAVG,gBAUHA,QAVG;AAaN,aACG;AAAK,QAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,UAAD;AACG,QAAA,SAAS,EAAET,KADd;AAEG,QAAA,SAAS,EAAE;AAAA,iBAAM,MAAI,CAACgC,YAAL,EAAN;AAAA,SAFd;AAGG,QAAA,SAAS,EAAEjC,SAHd;AAIG,QAAA,WAAW,EAAE,KAAKe,WAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,EAOG,oBAAC,UAAD;AACG,QAAA,MAAM,EAAE,KAAKhB,KAAL,CAAWY,oBADtB;AAEG,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAACgD,kBAAL,EAAN;AAAA,SAFX;AAGG,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACG,mBAAL,EAAN;AAAA,SAHZ;AAIG,QAAA,KAAK,EAAExD,KAJV;AAKG,QAAA,QAAQ,EAAED,QALb;AAMG,QAAA,QAAQ,EAAEE,QANb;AAOG,QAAA,QAAQ,EAAEC,QAPb;AAQG,QAAA,MAAM,EAAEC,MARX;AASG,QAAA,QAAQ,EAAE,KAAKiC,QATlB;AAUG,QAAA,YAAY,EAAE,KAAKH,YAVtB;AAWG,QAAA,aAAa,EAAC,QAXjB;AAYG,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACwB,SAAL,EAAN;AAAA,SAZZ;AAaG,QAAA,WAAW,EAAER,WAbhB;AAcG,QAAA,UAAU,EAAE;AAAA,iBAAM,MAAI,CAACS,UAAL,EAAN;AAAA,SAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPH,EAuBG,oBAAC,UAAD;AACG,QAAA,MAAM,EAAE,KAAKjE,KAAL,CAAWK,gBADtB;AAEG,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAACwD,cAAL,EAAN;AAAA,SAFX;AAGG,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACK,eAAL,EAAN;AAAA,SAHZ;AAIG,QAAA,KAAK,EAAE3D,KAJV;AAKG,QAAA,QAAQ,EAAED,QALb;AAMG,QAAA,QAAQ,EAAEE,QANb;AAOG,QAAA,QAAQ,EAAEC,QAPb;AAQG,QAAA,MAAM,EAAEC,MARX;AASG,QAAA,QAAQ,EAAE,KAAKiC,QATlB;AAUG,QAAA,YAAY,EAAE,KAAKtB,YAVtB;AAWG,QAAA,aAAa,EAAC,KAXjB;AAYG,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC2C,SAAL,EAAN;AAAA,SAZZ;AAaG,QAAA,WAAW,EAAER,WAbhB;AAcG,QAAA,UAAU,EAAE;AAAA,iBAAM,MAAI,CAACS,UAAL,EAAN;AAAA,SAdf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBH,EAuCG,oBAAC,iBAAD;AACG,QAAA,MAAM,EAAE,KAAKjE,KAAL,CAAWa,iBADtB;AAEG,QAAA,SAAS,EAAE;AAAA,iBAAM,MAAI,CAACwC,UAAL,CAAgB1C,QAAQ,CAAC8B,GAAzB,CAAN;AAAA,SAFd;AAGG,QAAA,QAAQ,EAAE;AAAA,iBAAM,MAAI,CAACa,gBAAL,EAAN;AAAA,SAHb;AAIG,QAAA,QAAQ,EAAC,YAJZ;AAKG,QAAA,IAAI,kBAAW3C,QAAQ,CAACL,QAApB,CALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvCH,CADH;AAiDF;;;;EApSoCb,S;;SAAnBM,U","sourcesContent":["import React, { Component } from 'react';\n\nimport UsersTable from '../../components/Tables/UsersTable';\nimport UserDialog from '../../components/Dialogs/UserDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport BeforeDeleteAlert from '../../components/Alerts/BeforeDeleteAlert';\n\nexport default class AdminPanel extends Component {\n   state = {\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: '',\n      active: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n   };\n\n   getControlls() {\n      return this.props.getControlls(this.renderControlls());\n   }\n\n   getSelected = (user, isSelected) => {\n      this.setState({\n         selected: user,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n      this.getControlls(this.state.isSelected);\n   };\n\n   componentDidMount() {\n      this.getUsersData();\n      this.getControlls();\n   }\n\n   async getUsersData() {\n      this.setLoading(true);\n      var result;\n      try {\n         result = await Client.Services.UsersService.getUsers();\n         this.setState({\n            users: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading users list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteUser(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.UsersService.deleteUser(id);\n         if (result.status === 200) {\n            Client.Notifications.success('User removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete user');\n      } finally {\n         this.getUsersData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, username, usertype, password, active } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype,\n         active\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   handleUpdate = async e => {\n      e.preventDefault();\n      const {\n         email,\n         username,\n         usertype,\n         password,\n         active,\n         selected\n      } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype,\n         active\n      );\n      usr.user._id = selected._id;\n\n      try {\n         let result = await Client.Services.UsersService.updateUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      if (e.target.id === 'active') {\n         let a = state.active;\n         this.setState({ active: !a });\n         return;\n      }\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openUserDialog() {\n      this.setState({\n         isUserDialogOpen: true\n      });\n   }\n   closeUserDialog() {\n      this.setState({\n         isUserDialogOpen: false\n      });\n   }\n\n   openUserEditDialog() {\n      let selected = this.state.selected;\n\n      this.setState({\n         isUserEditDialogOpen: true,\n         username: selected.username,\n         email: selected.email,\n         password: '',\n         usertype: selected.type\n      });\n   }\n   closeUserEditDialog() {\n      this.setState({\n         isUserEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         usertype: 'standard',\n         password: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls(enable = false) {\n      return (\n         <TableControllers\n            onEdit={() => this.openUserEditDialog()}\n            canEdit={enable}\n            onAdd={() => this.openUserDialog()}\n            onDelete={() => this.openDeleteAlert()}\n            canDelete={enable}\n            onRefresh={() => this.getUsersData()}\n         />\n      );\n   }\n\n   render() {\n      const {\n         users,\n         isLoading,\n         email,\n         username,\n         usertype,\n         password,\n         active,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='AdminPanel'>\n            <UsersTable\n               usersData={users}\n               onRefresh={() => this.getUsersData()}\n               isLoading={isLoading}\n               onSelection={this.getSelected}\n            />\n            <UserDialog\n               isOpen={this.state.isUserEditDialogOpen}\n               toOpen={() => this.openUserEditDialog()}\n               toClose={() => this.closeUserEditDialog()}\n               email={email}\n               username={username}\n               password={password}\n               usertype={usertype}\n               active={active}\n               onChange={this.onChange}\n               handleSubmit={this.handleUpdate}\n               buttonCaption='Update'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <UserDialog\n               isOpen={this.state.isUserDialogOpen}\n               toOpen={() => this.openUserDialog()}\n               toClose={() => this.closeUserDialog()}\n               email={email}\n               username={username}\n               password={password}\n               usertype={usertype}\n               active={active}\n               onChange={this.onChange}\n               handleSubmit={this.handleSubmit}\n               buttonCaption='Add'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <BeforeDeleteAlert\n               isOpen={this.state.isDeleteAlertOpen}\n               onConfirm={() => this.deleteUser(selected._id)}\n               onCancel={() => this.closeDeleteAlert()}\n               portalID='AdminPanel'\n               info={`User: ${selected.username}`}\n            />\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}