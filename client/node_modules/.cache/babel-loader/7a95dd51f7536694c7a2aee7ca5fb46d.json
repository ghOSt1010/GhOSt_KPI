{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx\";\nimport React, { Component } from 'react';\nimport { Tabs, Tab, H2, Alert, Portal, H5, Classes, Icon } from '@blueprintjs/core';\nimport UsersTable from '../../components/Tables/UsersTable';\nimport UserDialog from '../../components/Dialogs/UserDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\n\nvar AdminPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPanel, _Component);\n\n  function AdminPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdminPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdminPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: '',\n      active: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n    };\n\n    _this.getSelected = function (user, isSelected) {\n      _this.setState({\n        selected: user,\n        canEdit: isSelected,\n        canDelete: isSelected\n      });\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, usertype, password, active, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, usertype = _this$state.usertype, password = _this$state.password, active = _this$state.active;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, usertype, active);\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                  console.log(Client.Notifications.custom(errorMsg, '', React.createElement(Icon, {\n                    icon: \"issue\",\n                    intent: \"danger\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 115\n                    },\n                    __self: this\n                  })));\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleUpdate =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var _this$state2, email, username, usertype, password, active, selected, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                _this$state2 = _this.state, email = _this$state2.email, username = _this$state2.username, usertype = _this$state2.usertype, password = _this$state2.password, active = _this$state2.active, selected = _this$state2.selected;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, usertype, active);\n                usr.user._id = selected._id;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return Client.Services.UsersService.updateUser(usr);\n\n              case 8:\n                result = _context2.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context2.next = 17;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](5);\n\n                if (_context2.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context2.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context2.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 12]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n\n      if (e.target.id === 'active') {\n        var a = state.active;\n\n        _this.setState({\n          active: !a\n        });\n\n        return;\n      }\n\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AdminPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsersData();\n    }\n  }, {\n    key: \"getUsersData\",\n    value: function () {\n      var _getUsersData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setLoading(true);\n                _context3.prev = 1;\n                _context3.next = 4;\n                return Client.Services.UsersService.getUsers();\n\n              case 4:\n                result = _context3.sent;\n                this.setState({\n                  users: result.data\n                });\n                console.log(result.data);\n                _context3.next = 14;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](1);\n                alert(_context3.t0);\n                this.setState({\n                  errorMsg: _context3.t0.response\n                });\n                Client.Notifications.alert('Error while loading users list');\n\n              case 14:\n                _context3.prev = 14;\n                this.setLoading(false);\n                return _context3.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 9, 14, 17]]);\n      }));\n\n      function getUsersData() {\n        return _getUsersData.apply(this, arguments);\n      }\n\n      return getUsersData;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                this.resetErrorMsg();\n                _context4.next = 4;\n                return Client.Services.UsersService.deleteUser(id);\n\n              case 4:\n                result = _context4.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('User removed successfully');\n                }\n\n                _context4.next = 12;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context4.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete user');\n\n              case 12:\n                _context4.prev = 12;\n                this.getUsersData();\n                this.closeDeleteAlert();\n                return _context4.finish(12);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 8, 12, 16]]);\n      }));\n\n      function deleteUser(_x3) {\n        return _deleteUser.apply(this, arguments);\n      }\n\n      return deleteUser;\n    }()\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"openAlert\",\n    value: function openAlert(msg) {\n      this.setState({\n        isAlertOpen: true,\n        errorMessage: msg\n      });\n    }\n  }, {\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"openUserDialog\",\n    value: function openUserDialog() {\n      this.setState({\n        isUserDialogOpen: true\n      });\n    }\n  }, {\n    key: \"closeUserDialog\",\n    value: function closeUserDialog() {\n      this.setState({\n        isUserDialogOpen: false\n      });\n    }\n  }, {\n    key: \"openUserEditDialog\",\n    value: function openUserEditDialog() {\n      var selected = this.state.selected;\n      this.setState({\n        isUserEditDialogOpen: true,\n        username: selected.username,\n        email: selected.email,\n        password: '',\n        usertype: selected.type\n      });\n    }\n  }, {\n    key: \"closeUserEditDialog\",\n    value: function closeUserEditDialog() {\n      this.setState({\n        isUserEditDialogOpen: false\n      });\n    }\n  }, {\n    key: \"openDeleteAlert\",\n    value: function openDeleteAlert() {\n      this.setState({\n        isDeleteAlertOpen: true\n      });\n    }\n  }, {\n    key: \"closeDeleteAlert\",\n    value: function closeDeleteAlert() {\n      this.setState({\n        isDeleteAlertOpen: false\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        email: '',\n        username: '',\n        usertype: 'standard',\n        password: '',\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Users') {\n        return React.createElement(TableControllers, {\n          onEdit: function onEdit() {\n            return _this2.openUserEditDialog();\n          },\n          canEdit: this.state.canEdit,\n          onAdd: function onAdd() {\n            return _this2.openUserDialog();\n          },\n          onDelete: function onDelete() {\n            return _this2.openDeleteAlert();\n          },\n          canDelete: this.state.canDelete,\n          onRefresh: function onRefresh() {\n            return _this2.getUsersData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state3 = this.state,\n          users = _this$state3.users,\n          isLoading = _this$state3.isLoading,\n          email = _this$state3.email,\n          username = _this$state3.username,\n          usertype = _this$state3.usertype,\n          password = _this$state3.password,\n          active = _this$state3.active,\n          isAlertOpen = _this$state3.isAlertOpen,\n          selected = _this$state3.selected;\n      return React.createElement(\"div\", {\n        id: \"AdminPanel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Admin Panel\")), React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Users\",\n        title: \"Users\",\n        panel: React.createElement(UsersTable, {\n          usersData: users,\n          onRefresh: function onRefresh() {\n            return _this3.getUsersData();\n          },\n          isLoading: isLoading,\n          onSelection: this.getSelected,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }), this.renderControlls()), React.createElement(UserDialog, {\n        isOpen: this.state.isUserEditDialogOpen,\n        toOpen: function toOpen() {\n          return _this3.openUserEditDialog();\n        },\n        toClose: function toClose() {\n          return _this3.closeUserEditDialog();\n        },\n        email: email,\n        username: username,\n        password: password,\n        usertype: usertype,\n        active: active,\n        onChange: this.onChange,\n        handleSubmit: this.handleUpdate,\n        buttonCaption: \"Update\",\n        onClear: function onClear() {\n          return _this3.clearForm();\n        },\n        isAlertOpen: isAlertOpen,\n        closeAlert: function closeAlert() {\n          return _this3.closeAlert();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }), React.createElement(UserDialog, {\n        isOpen: this.state.isUserDialogOpen,\n        toOpen: function toOpen() {\n          return _this3.openUserDialog();\n        },\n        toClose: function toClose() {\n          return _this3.closeUserDialog();\n        },\n        email: email,\n        username: username,\n        password: password,\n        usertype: usertype,\n        active: active,\n        onChange: this.onChange,\n        handleSubmit: this.handleSubmit,\n        buttonCaption: \"Add\",\n        onClear: function onClear() {\n          return _this3.clearForm();\n        },\n        isAlertOpen: isAlertOpen,\n        closeAlert: function closeAlert() {\n          return _this3.closeAlert();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(Alert, {\n        isOpen: this.state.isDeleteAlertOpen,\n        confirmButtonText: \"Delete\",\n        onConfirm: function onConfirm() {\n          return _this3.deleteUser(selected._id);\n        },\n        cancelButtonText: \"Cancel\",\n        onCancel: function onCancel() {\n          return _this3.closeDeleteAlert();\n        },\n        intent: \"danger\",\n        icon: \"issue\",\n        ussePortal: React.createElement(Portal, {\n          container: document.getElementById('AdminPanel'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(H5, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, \"Are you sure that you want to delete this user?\"), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"User: \".concat(selected.username)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        className: Classes.TEXT_MUTED,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, \"Will be permanentyly deleted...\")));\n    }\n  }]);\n\n  return AdminPanel;\n}(Component);\n\nexport { AdminPanel as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx"],"names":["React","Component","Tabs","Tab","H2","Alert","Portal","H5","Classes","Icon","UsersTable","UserDialog","Client","TableControllers","AdminPanel","state","activeTabID","selectedTabId","isLoading","users","openAlert","errorMessage","isUserDialogOpen","username","email","password","usertype","active","selected","isUserEditDialogOpen","isDeleteAlertOpen","canEdit","canDelete","getSelected","user","isSelected","setState","handleSubmit","e","preventDefault","errorMsg","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","success","getUsersData","response","data","message","alert","error","console","log","custom","handleUpdate","_id","updateUser","onChange","target","id","a","value","handleTabChange","setLoading","getUsers","resetErrorMsg","deleteUser","closeDeleteAlert","msg","isAlertOpen","type","loading","openUserEditDialog","openUserDialog","openDeleteAlert","renderControlls","closeUserEditDialog","clearForm","closeAlert","closeUserDialog","document","getElementById","TEXT_MUTED"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n   Tabs,\n   Tab,\n   H2,\n   Alert,\n   Portal,\n   H5,\n   Classes,\n   Icon\n} from '@blueprintjs/core';\nimport UsersTable from '../../components/Tables/UsersTable';\nimport UserDialog from '../../components/Dialogs/UserDialog';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\n\nexport default class AdminPanel extends Component {\n   state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: [],\n      openAlert: true,\n      errorMessage: '',\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: '',\n      active: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n   };\n\n   getSelected = (user, isSelected) => {\n      this.setState({\n         selected: user,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getUsersData();\n   }\n\n   async getUsersData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.UsersService.getUsers();\n         this.setState({\n            users: result.data\n         });\n         console.log(result.data);\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading users list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteUser(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.UsersService.deleteUser(id);\n         if (result.status === 200) {\n            Client.Notifications.success('User removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete user');\n      } finally {\n         this.getUsersData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, username, usertype, password, active } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype,\n         active\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n            console.log(\n               Client.Notifications.custom(\n                  errorMsg,\n                  '',\n                  <Icon icon='issue' intent='danger' />\n               )\n            );\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   handleUpdate = async e => {\n      e.preventDefault();\n      const {\n         email,\n         username,\n         usertype,\n         password,\n         active,\n         selected\n      } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         usertype,\n         active\n      );\n      usr.user._id = selected._id;\n      try {\n         let result = await Client.Services.UsersService.updateUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n            this.getUsersData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      if (e.target.id === 'active') {\n         let a = state.active;\n         this.setState({ active: !a });\n         return;\n      }\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openUserDialog() {\n      this.setState({\n         isUserDialogOpen: true\n      });\n   }\n   closeUserDialog() {\n      this.setState({\n         isUserDialogOpen: false\n      });\n   }\n\n   openUserEditDialog() {\n      let selected = this.state.selected;\n\n      this.setState({\n         isUserEditDialogOpen: true,\n         username: selected.username,\n         email: selected.email,\n         password: '',\n         usertype: selected.type\n      });\n   }\n   closeUserEditDialog() {\n      this.setState({\n         isUserEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         usertype: 'standard',\n         password: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Users') {\n         return (\n            <TableControllers\n               onEdit={() => this.openUserEditDialog()}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openUserDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getUsersData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         users,\n         isLoading,\n         email,\n         username,\n         usertype,\n         password,\n         active,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='AdminPanel'>\n            <div className='mt-2'>\n               <H2>Admin Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Users'\n                  title='Users'\n                  panel={\n                     <UsersTable\n                        usersData={users}\n                        onRefresh={() => this.getUsersData()}\n                        isLoading={isLoading}\n                        onSelection={this.getSelected}\n                     />\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n            <UserDialog\n               isOpen={this.state.isUserEditDialogOpen}\n               toOpen={() => this.openUserEditDialog()}\n               toClose={() => this.closeUserEditDialog()}\n               email={email}\n               username={username}\n               password={password}\n               usertype={usertype}\n               active={active}\n               onChange={this.onChange}\n               handleSubmit={this.handleUpdate}\n               buttonCaption='Update'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <UserDialog\n               isOpen={this.state.isUserDialogOpen}\n               toOpen={() => this.openUserDialog()}\n               toClose={() => this.closeUserDialog()}\n               email={email}\n               username={username}\n               password={password}\n               usertype={usertype}\n               active={active}\n               onChange={this.onChange}\n               handleSubmit={this.handleSubmit}\n               buttonCaption='Add'\n               onClear={() => this.clearForm()}\n               isAlertOpen={isAlertOpen}\n               closeAlert={() => this.closeAlert()}\n            />\n            <Alert\n               isOpen={this.state.isDeleteAlertOpen}\n               confirmButtonText='Delete'\n               onConfirm={() => this.deleteUser(selected._id)}\n               cancelButtonText='Cancel'\n               onCancel={() => this.closeDeleteAlert()}\n               intent='danger'\n               icon='issue'\n               ussePortal={\n                  <Portal container={document.getElementById('AdminPanel')} />\n               }\n            >\n               <H5>Are you sure that you want to delete this user?</H5>\n               <strong>{`User: ${selected.username}`}</strong>\n               <p></p>\n               <strong\n                  className={Classes.TEXT_MUTED}\n               >{`Will be permanentyly deleted...`}</strong>\n            </Alert>\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}