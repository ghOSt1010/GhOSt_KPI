{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Employees/Employees.jsx\";\nimport React, { Component } from 'react';\nimport { Tabs, Tab, H2 } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport EmployeePanel from '../../components/Panels/EmployeePanel';\n\nvar Employees =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Employees, _Component);\n\n  function Employees() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Employees);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Employees)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Employees',\n      selectedTabId: 'Employees',\n      isLoading: true,\n      data: [],\n      openAlert: true,\n      errorMessage: '',\n      isEmployeesDialogOpen: false,\n      name: '',\n      email: '',\n      user: '',\n      type: '',\n      project: '',\n      team: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n    };\n\n    _this.getSelected = function (emp, isSelected) {\n      _this.setState({\n        selected: emp,\n        canEdit: isSelected,\n        canDelete: isSelected\n      });\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, name, team, project, user, type, errorMsg, emp, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, name = _this$state.name, team = _this$state.team, project = _this$state.project, user = _this$state.user, type = _this$state.type;\n                errorMsg = 'Unknown Error';\n                _context.next = 5;\n                return Client.Services.EmployeesService.createEmployeeDTO(name, email, user, type, project, team);\n\n              case 5:\n                emp = _context.sent;\n                _context.prev = 6;\n                _context.next = 9;\n                return Client.Services.EmployeesService.saveEmployee(emp);\n\n              case 9:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"Employee \".concat(name, \" successfully saved\"));\n\n                  _this.getEmployeesData();\n                }\n\n                _context.next = 18;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](6);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(name, \" Employee\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[6, 13]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleUpdate =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var _this$state2, name, email, user, type, project, team, selected, errorMsg, emp, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                _this$state2 = _this.state, name = _this$state2.name, email = _this$state2.email, user = _this$state2.user, type = _this$state2.type, project = _this$state2.project, team = _this$state2.team, selected = _this$state2.selected;\n                errorMsg = 'Unknown Error';\n                _context2.prev = 3;\n                _context2.next = 6;\n                return Client.Services.EmployeesService.getEmployeeUpdateDTO(selected._id, name, email, user, type, project, team);\n\n              case 6:\n                emp = _context2.sent;\n                _context2.next = 9;\n                return Client.Services.EmployeesService.updateEmployee(emp);\n\n              case 9:\n                result = _context2.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"Employee \".concat(name, \" successfully saved\"));\n\n                  _this.getEmployeesData();\n                }\n\n                _context2.next = 18;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                if (_context2.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context2.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context2.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(name, \" Employee\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 13]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.openUserEditDialog =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(e) {\n        var selected, errorMsg, result, emp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                e.preventDefault();\n                selected = _this.state.selected;\n                errorMsg = 'Unknown Error';\n                _context3.prev = 3;\n                _context3.next = 6;\n                return Client.Services.EmployeesService.getEmployeeById(selected._id);\n\n              case 6:\n                result = _context3.sent;\n\n                if (result.status === 200) {\n                  emp = result.data;\n\n                  _this.setState({\n                    isUserEditDialogOpen: true,\n                    name: emp.name,\n                    email: emp.email,\n                    user: emp.user._id,\n                    type: emp.type._id,\n                    project: emp.project._id,\n                    team: emp.team._id\n                  });\n                }\n\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](3);\n                console.log(_context3.t0);\n\n                _this.setState({\n                  isUserEditDialogOpen: true,\n                  name: selected.name,\n                  email: selected.email,\n                  user: selected.user._id,\n                  type: selected.type._id,\n                  project: selected.project === null ? '' : selected.project._id,\n                  team: selected.team._id\n                });\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 10]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Employees, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getEmployeesData();\n    }\n  }, {\n    key: \"getEmployeesData\",\n    value: function () {\n      var _getEmployeesData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.setLoading(true);\n                _context4.prev = 1;\n                _context4.next = 4;\n                return Client.Services.EmployeesService.getEmployees();\n\n              case 4:\n                result = _context4.sent;\n                this.setState({\n                  data: result.data\n                });\n                _context4.next = 13;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](1);\n                alert(_context4.t0);\n                this.setState({\n                  errorMsg: _context4.t0.response\n                });\n                Client.Notifications.alert('Error while loading Employees list');\n\n              case 13:\n                _context4.prev = 13;\n                this.setLoading(false);\n                return _context4.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 8, 13, 16]]);\n      }));\n\n      function getEmployeesData() {\n        return _getEmployeesData.apply(this, arguments);\n      }\n\n      return getEmployeesData;\n    }()\n  }, {\n    key: \"deleteEmployee\",\n    value: function () {\n      var _deleteEmployee = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                this.resetErrorMsg();\n                _context5.next = 4;\n                return Client.Services.EmployeesService.deleteEmployeeById(id);\n\n              case 4:\n                result = _context5.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('Employee removed successfully');\n                }\n\n                _context5.next = 12;\n                break;\n\n              case 8:\n                _context5.prev = 8;\n                _context5.t0 = _context5[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context5.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete uEmployeeser');\n\n              case 12:\n                _context5.prev = 12;\n                this.getEmployeesData();\n                this.closeDeleteAlert();\n                return _context5.finish(12);\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 8, 12, 16]]);\n      }));\n\n      function deleteEmployee(_x4) {\n        return _deleteEmployee.apply(this, arguments);\n      }\n\n      return deleteEmployee;\n    }()\n  }, {\n    key: \"openAlert\",\n    value: function openAlert(msg) {\n      this.setState({\n        isAlertOpen: true,\n        errorMessage: msg\n      });\n    }\n  }, {\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"openEmployeesDialog\",\n    value: function openEmployeesDialog() {\n      this.setState({\n        isEmployeesDialogOpen: true\n      });\n    }\n  }, {\n    key: \"closeEmployeesDialog\",\n    value: function closeEmployeesDialog() {\n      this.setState({\n        isEmployeesDialogOpen: false\n      });\n    }\n  }, {\n    key: \"closeUserEditDialog\",\n    value: function closeUserEditDialog() {\n      this.setState({\n        isUserEditDialogOpen: false\n      });\n    }\n  }, {\n    key: \"openDeleteAlert\",\n    value: function openDeleteAlert() {\n      this.setState({\n        isDeleteAlertOpen: true\n      });\n    }\n  }, {\n    key: \"closeDeleteAlert\",\n    value: function closeDeleteAlert() {\n      this.setState({\n        isDeleteAlertOpen: false\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        name: '',\n        email: '',\n        user: '',\n        type: '',\n        project: '',\n        team: '',\n        isAlertOpen: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Employees') {\n        return React.createElement(TableControllers, {\n          onEdit: this.openUserEditDialog,\n          canEdit: this.state.canEdit,\n          onAdd: function onAdd() {\n            return _this2.openEmployeesDialog();\n          },\n          onDelete: function onDelete() {\n            return _this2.openDeleteAlert();\n          },\n          canDelete: this.state.canDelete,\n          onRefresh: function onRefresh() {\n            return _this2.getEmployeesData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state3 = this.state,\n          data = _this$state3.data,\n          isLoading = _this$state3.isLoading,\n          email = _this$state3.email,\n          name = _this$state3.name,\n          team = _this$state3.team,\n          project = _this$state3.project,\n          user = _this$state3.user,\n          type = _this$state3.type,\n          isAlertOpen = _this$state3.isAlertOpen,\n          selected = _this$state3.selected;\n      return React.createElement(\"div\", {\n        id: \"EmployeePanel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Employees Panel\")), React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Employees\",\n        title: \"Employees\",\n        panel: React.createElement(EmployeePanel, {\n          data: data,\n          onRefresh: function onRefresh() {\n            return _this3.getEmployeesData();\n          },\n          isLoading: isLoading,\n          isAlertOpen: isAlertOpen,\n          isDeleteAlertOpen: this.state.isDeleteAlertOpen,\n          getSelected: this.getSelected,\n          isUserEditDialogOpen: this.state.isUserEditDialogOpen,\n          toOpenUserEditDialog: function toOpenUserEditDialog() {\n            return _this3.openUserEditDialog();\n          },\n          toCloseUserEditDialog: function toCloseUserEditDialog() {\n            return _this3.closeUserEditDialog();\n          },\n          isEmployeesDialogOpen: this.state.isEmployeesDialogOpen,\n          toOpenEmployeesDialog: function toOpenEmployeesDialog() {\n            return _this3.openEmployeesDialog();\n          },\n          toCloseEmployeesDialog: function toCloseEmployeesDialog() {\n            return _this3.closeEmployeesDialog();\n          },\n          name: name,\n          email: email,\n          user: user,\n          selectedUser: user,\n          type: type,\n          selectedType: type,\n          project: project,\n          selectedProject: project,\n          team: team,\n          selectedTeam: team,\n          onChange: this.onChange,\n          handleSubmit: this.handleSubmit,\n          handleUpdate: this.handleUpdate,\n          onClear: function onClear() {\n            return _this3.clearForm();\n          },\n          onAlertClose: function onAlertClose() {\n            return _this3.closeAlert();\n          },\n          onDeleteConfirm: function onDeleteConfirm() {\n            return _this3.deleteEmployee(selected._id);\n          },\n          onDeleteCancel: function onDeleteCancel() {\n            return _this3.closeDeleteAlert();\n          },\n          beforeDeleteInfo: \"Employee: \".concat(selected.name),\n          portalID: \"EmployeePanel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }), this.renderControlls()));\n    }\n  }]);\n\n  return Employees;\n}(Component);\n\nexport { Employees as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Employees/Employees.jsx"],"names":["React","Component","Tabs","Tab","H2","Client","TableControllers","EmployeePanel","Employees","state","activeTabID","selectedTabId","isLoading","data","openAlert","errorMessage","isEmployeesDialogOpen","name","email","user","type","project","team","selected","isUserEditDialogOpen","isDeleteAlertOpen","canEdit","canDelete","getSelected","emp","isSelected","setState","handleSubmit","e","preventDefault","errorMsg","Services","EmployeesService","createEmployeeDTO","saveEmployee","result","status","Notifications","success","getEmployeesData","response","message","alert","error","handleUpdate","getEmployeeUpdateDTO","_id","updateEmployee","onChange","target","id","value","openUserEditDialog","getEmployeeById","console","log","handleTabChange","setLoading","getEmployees","resetErrorMsg","deleteEmployeeById","closeDeleteAlert","msg","isAlertOpen","loading","openEmployeesDialog","openDeleteAlert","closeUserEditDialog","closeEmployeesDialog","clearForm","closeAlert","deleteEmployee","renderControlls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tabs, Tab, H2 } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport TableControllers from '../../components/Tables/TableControllers';\nimport EmployeePanel from '../../components/Panels/EmployeePanel';\n\nexport default class Employees extends Component {\n   state = {\n      activeTabID: 'Employees',\n      selectedTabId: 'Employees',\n      isLoading: true,\n      data: [],\n      openAlert: true,\n      errorMessage: '',\n      isEmployeesDialogOpen: false,\n      name: '',\n      email: '',\n      user: '',\n      type: '',\n      project: '',\n      team: '',\n      selected: {},\n      isUserEditDialogOpen: false,\n      isDeleteAlertOpen: false,\n      canEdit: !false,\n      canDelete: !false\n   };\n\n   getSelected = (emp, isSelected) => {\n      this.setState({\n         selected: emp,\n         canEdit: isSelected,\n         canDelete: isSelected\n      });\n   };\n\n   componentDidMount() {\n      this.getEmployeesData();\n   }\n\n   async getEmployeesData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.EmployeesService.getEmployees();\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading Employees list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteEmployee(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.EmployeesService.deleteEmployeeById(id);\n         if (result.status === 200) {\n            Client.Notifications.success('Employee removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete uEmployeeser');\n      } finally {\n         this.getEmployeesData();\n         this.closeDeleteAlert();\n      }\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { email, name, team, project, user, type } = this.state;\n      var errorMsg = 'Unknown Error';\n      let emp = await Client.Services.EmployeesService.createEmployeeDTO(\n         name,\n         email,\n         user,\n         type,\n         project,\n         team\n      );\n      try {\n         let result = await Client.Services.EmployeesService.saveEmployee(emp);\n         if (result.status === 200) {\n            Client.Notifications.success(`Employee ${name} successfully saved`);\n            this.getEmployeesData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} Employee`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   handleUpdate = async e => {\n      e.preventDefault();\n      const { name, email, user, type, project, team, selected } = this.state;\n\n      var errorMsg = 'Unknown Error';\n      try {\n         let emp = await Client.Services.EmployeesService.getEmployeeUpdateDTO(\n            selected._id,\n            name,\n            email,\n            user,\n            type,\n            project,\n            team\n         );\n         let result = await Client.Services.EmployeesService.updateEmployee(\n            emp\n         );\n         if (result.status === 200) {\n            Client.Notifications.success(`Employee ${name} successfully saved`);\n            this.getEmployeesData();\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${name} Employee`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n   openAlert(msg) {\n      this.setState({ isAlertOpen: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ isAlertOpen: false, errorMessage: '' });\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openEmployeesDialog() {\n      this.setState({\n         isEmployeesDialogOpen: true\n      });\n   }\n   closeEmployeesDialog() {\n      this.setState({\n         isEmployeesDialogOpen: false\n      });\n   }\n\n   openUserEditDialog = async e => {\n      e.preventDefault();\n      const { selected } = this.state;\n      var errorMsg = 'Unknown Error';\n      try {\n         let result = await Client.Services.EmployeesService.getEmployeeById(\n            selected._id\n         );\n         if (result.status === 200) {\n            let emp = result.data;\n            this.setState({\n               isUserEditDialogOpen: true,\n               name: emp.name,\n               email: emp.email,\n               user: emp.user._id,\n               type: emp.type._id,\n               project: emp.project._id,\n               team: emp.team._id\n            });\n         }\n      } catch (err) {\n         console.log(err);\n         this.setState({\n            isUserEditDialogOpen: true,\n            name: selected.name,\n            email: selected.email,\n            user: selected.user._id,\n            type: selected.type._id,\n            project: selected.project === null ? '' : selected.project._id,\n            team: selected.team._id\n         });\n      }\n   };\n   closeUserEditDialog() {\n      this.setState({\n         isUserEditDialogOpen: false\n      });\n   }\n\n   openDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: true\n      });\n   }\n   closeDeleteAlert() {\n      this.setState({\n         isDeleteAlertOpen: false\n      });\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n   clearForm() {\n      this.setState({\n         name: '',\n         email: '',\n         user: '',\n         type: '',\n         project: '',\n         team: '',\n         isAlertOpen: false,\n         errorMessage: ''\n      });\n   }\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Employees') {\n         return (\n            <TableControllers\n               onEdit={this.openUserEditDialog}\n               canEdit={this.state.canEdit}\n               onAdd={() => this.openEmployeesDialog()}\n               onDelete={() => this.openDeleteAlert()}\n               canDelete={this.state.canDelete}\n               onRefresh={() => this.getEmployeesData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         data,\n         isLoading,\n         email,\n         name,\n         team,\n         project,\n         user,\n         type,\n         isAlertOpen,\n         selected\n      } = this.state;\n\n      return (\n         <div id='EmployeePanel'>\n            <div className='mt-2'>\n               <H2>Employees Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Employees'\n                  title='Employees'\n                  panel={\n                     <EmployeePanel\n                        data={data}\n                        onRefresh={() => this.getEmployeesData()}\n                        isLoading={isLoading}\n                        isAlertOpen={isAlertOpen}\n                        isDeleteAlertOpen={this.state.isDeleteAlertOpen}\n                        getSelected={this.getSelected}\n                        isUserEditDialogOpen={this.state.isUserEditDialogOpen}\n                        toOpenUserEditDialog={() => this.openUserEditDialog()}\n                        toCloseUserEditDialog={() => this.closeUserEditDialog()}\n                        isEmployeesDialogOpen={this.state.isEmployeesDialogOpen}\n                        toOpenEmployeesDialog={() => this.openEmployeesDialog()}\n                        toCloseEmployeesDialog={() =>\n                           this.closeEmployeesDialog()\n                        }\n                        name={name}\n                        email={email}\n                        user={user}\n                        selectedUser={user}\n                        type={type}\n                        selectedType={type}\n                        project={project}\n                        selectedProject={project}\n                        team={team}\n                        selectedTeam={team}\n                        onChange={this.onChange}\n                        handleSubmit={this.handleSubmit}\n                        handleUpdate={this.handleUpdate}\n                        onClear={() => this.clearForm()}\n                        onAlertClose={() => this.closeAlert()}\n                        onDeleteConfirm={() =>\n                           this.deleteEmployee(selected._id)\n                        }\n                        onDeleteCancel={() => this.closeDeleteAlert()}\n                        beforeDeleteInfo={`Employee: ${selected.name}`}\n                        portalID='EmployeePanel'\n                     />\n                  }\n               />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}