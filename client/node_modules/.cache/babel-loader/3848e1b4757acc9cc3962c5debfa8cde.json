{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport User from '../User/User';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n  }\n\n  _createClass(Auth, null, [{\n    key: \"authenticateUser\",\n\n    /**\r\n     * Authenticate a user. Save a token string in Local Storage\r\n     *\r\n     * @param {object} user\r\n     */\n    value: function authenticateUser(user) {\n      localStorage.setItem('user', JSON.stringify(user));\n      return this.isUserAuthenticated();\n    }\n    /**\r\n     * Check if a user is authenticated - check if a token is saved in Local Storage\r\n     * @async\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isUserAuthenticated\",\n    value: function isUserAuthenticated() {\n      return localStorage.getItem('user') !== null;\n    }\n    /**\r\n     * Deauthenticate a user. Remove a token from Local Storage.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"deauthenticateUser\",\n    value: function deauthenticateUser() {\n      localStorage.removeItem('user');\n      return true;\n    }\n    /**\r\n     * Get a token value.\r\n     *\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var user = localStorage.getItem('user') || null;\n\n      if (!user) {\n        return null;\n      }\n\n      user = JSON.parse(user);\n      return user.token; //var user = JSON.parse(localStorage.getItem('user'));\n      //console.log(user.token);\n      //if (!user) {\n      //   return null;\n      //}\n      //return user.token;\n      //return User.getUserJWTToken();\n    }\n    /**\r\n     *  @returns {Boolean} Authorized : ['root','admin','ops manager', 'general manager']\r\n     */\n\n  }, {\n    key: \"isAuthorizedToRemove\",\n    value: function isAuthorizedToRemove() {\n      var userType = User.getUserType();\n\n      if (userType === 'root' || userType === 'admin' || userType === 'operations manager' || userType === 'general manager') {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * @returns {Boolean} Admin or Root : ['root','admin']\r\n     */\n\n  }, {\n    key: \"isAdminOrRoot\",\n    value: function isAdminOrRoot() {\n      var userType = User.getUserType();\n\n      if (userType === 'root' || userType === 'admin') {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport default Auth;","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/Client/API/Auth/Auth.js"],"names":["User","Auth","user","localStorage","setItem","JSON","stringify","isUserAuthenticated","getItem","removeItem","parse","token","userType","getUserType"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,cAAjB;;IAEMC,I;;;;;;;;;;AACH;;;;;qCAKwBC,I,EAAM;AAC3BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACA,aAAO,KAAKK,mBAAL,EAAP;AACF;AAED;;;;;;;;0CAK6B;AAC1B,aAAOJ,YAAY,CAACK,OAAb,CAAqB,MAArB,MAAiC,IAAxC;AACF;AAED;;;;;;;yCAI4B;AACzBL,MAAAA,YAAY,CAACM,UAAb,CAAwB,MAAxB;AACA,aAAO,IAAP;AACF;AAED;;;;;;;;+BAKkB;AACf,UAAIP,IAAI,GAAGC,YAAY,CAACK,OAAb,CAAqB,MAArB,KAAgC,IAA3C;;AACA,UAAI,CAACN,IAAL,EAAW;AACR,eAAO,IAAP;AACF;;AACDA,MAAAA,IAAI,GAAGG,IAAI,CAACK,KAAL,CAAWR,IAAX,CAAP;AACA,aAAOA,IAAI,CAACS,KAAZ,CANe,CAOf;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAED;;;;;;2CAG8B;AAC3B,UAAIC,QAAQ,GAAGZ,IAAI,CAACa,WAAL,EAAf;;AAEA,UACGD,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,OADb,IAEAA,QAAQ,KAAK,oBAFb,IAGAA,QAAQ,KAAK,iBAJhB,EAKE;AACC,eAAO,IAAP;AACF;;AACD,aAAO,KAAP;AACF;AAED;;;;;;oCAGuB;AACpB,UAAIA,QAAQ,GAAGZ,IAAI,CAACa,WAAL,EAAf;;AAEA,UAAID,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC9C,eAAO,IAAP;AACF;;AACD,aAAO,KAAP;AACF;;;;;;AAEJ,eAAeX,IAAf","sourcesContent":["import User from '../User/User';\r\n\r\nclass Auth {\r\n   /**\r\n    * Authenticate a user. Save a token string in Local Storage\r\n    *\r\n    * @param {object} user\r\n    */\r\n   static authenticateUser(user) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      return this.isUserAuthenticated();\r\n   }\r\n\r\n   /**\r\n    * Check if a user is authenticated - check if a token is saved in Local Storage\r\n    * @async\r\n    * @returns {boolean}\r\n    */\r\n   static isUserAuthenticated() {\r\n      return localStorage.getItem('user') !== null;\r\n   }\r\n\r\n   /**\r\n    * Deauthenticate a user. Remove a token from Local Storage.\r\n    * @return {boolean}\r\n    */\r\n   static deauthenticateUser() {\r\n      localStorage.removeItem('user');\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * Get a token value.\r\n    *\r\n    * @returns {string}\r\n    */\r\n   static getToken() {\r\n      var user = localStorage.getItem('user') || null;\r\n      if (!user) {\r\n         return null;\r\n      }\r\n      user = JSON.parse(user);\r\n      return user.token;\r\n      //var user = JSON.parse(localStorage.getItem('user'));\r\n      //console.log(user.token);\r\n      //if (!user) {\r\n      //   return null;\r\n      //}\r\n      //return user.token;\r\n      //return User.getUserJWTToken();\r\n   }\r\n\r\n   /**\r\n    *  @returns {Boolean} Authorized : ['root','admin','ops manager', 'general manager']\r\n    */\r\n   static isAuthorizedToRemove() {\r\n      var userType = User.getUserType();\r\n\r\n      if (\r\n         userType === 'root' ||\r\n         userType === 'admin' ||\r\n         userType === 'operations manager' ||\r\n         userType === 'general manager'\r\n      ) {\r\n         return true;\r\n      }\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * @returns {Boolean} Admin or Root : ['root','admin']\r\n    */\r\n   static isAdminOrRoot() {\r\n      var userType = User.getUserType();\r\n\r\n      if (userType === 'root' || userType === 'admin') {\r\n         return true;\r\n      }\r\n      return false;\r\n   }\r\n}\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}