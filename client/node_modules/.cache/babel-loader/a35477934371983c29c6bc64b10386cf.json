{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractComponent2, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"./common/classes\";\nimport { ContextMenuTargetWrapper } from \"./common/contextMenuTargetWrapper\";\nimport { RenderMode } from \"./common/renderMode\";\nimport { MenuContext } from \"./interactions/menus\";\nimport { DragSelectable } from \"./interactions/selectable\";\nimport { Regions } from \"./regions\";\nimport { cellClassNames, TableBodyCells } from \"./tableBodyCells\";\nvar DEEP_COMPARE_KEYS = [\"selectedRegions\"];\n\nvar TableBody =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TableBody, _super);\n\n  function TableBody() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderContextMenu = function (e) {\n      var _a = _this.props,\n          grid = _a.grid,\n          onFocusedCell = _a.onFocusedCell,\n          onSelection = _a.onSelection,\n          bodyContextMenuRenderer = _a.bodyContextMenuRenderer,\n          selectedRegions = _a.selectedRegions;\n      var numRows = grid.numRows,\n          numCols = grid.numCols;\n\n      if (bodyContextMenuRenderer == null) {\n        return undefined;\n      }\n\n      var targetRegion = _this.locateClick(e.nativeEvent);\n\n      var nextSelectedRegions = selectedRegions; // if the event did not happen within a selected region, clear all\n      // selections and select the right-clicked cell.\n\n      var foundIndex = Regions.findContainingRegion(selectedRegions, targetRegion);\n\n      if (foundIndex < 0) {\n        nextSelectedRegions = [targetRegion];\n        onSelection(nextSelectedRegions); // move the focused cell to the new region.\n\n        var nextFocusedCell = tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(targetRegion), {\n          focusSelectionIndex: 0\n        });\n\n        onFocusedCell(nextFocusedCell);\n      }\n\n      var menuContext = new MenuContext(targetRegion, nextSelectedRegions, numRows, numCols);\n      var contextMenu = bodyContextMenuRenderer(menuContext);\n      return contextMenu == null ? undefined : contextMenu;\n    }; // Callbacks\n    // =========\n\n\n    _this.handleSelectionEnd = function () {\n      _this.activationCell = null; // not strictly required, but good practice\n    };\n\n    _this.locateClick = function (event) {\n      _this.activationCell = _this.props.locator.convertPointToCell(event.clientX, event.clientY);\n      return Regions.cell(_this.activationCell.row, _this.activationCell.col);\n    };\n\n    _this.locateDrag = function (_event, coords, returnEndOnly) {\n      if (returnEndOnly === void 0) {\n        returnEndOnly = false;\n      }\n\n      var start = _this.activationCell;\n\n      var end = _this.props.locator.convertPointToCell(coords.current[0], coords.current[1]);\n\n      return returnEndOnly ? Regions.cell(end.row, end.col) : Regions.cell(start.row, start.col, end.row, end.col);\n    };\n\n    return _this;\n  } // TODO: Does this method need to be public?\n  // (see: https://github.com/palantir/blueprint/issues/1617)\n\n\n  TableBody.cellClassNames = function (rowIndex, columnIndex) {\n    return cellClassNames(rowIndex, columnIndex);\n  };\n\n  TableBody.prototype.shouldComponentUpdate = function (nextProps) {\n    return !CoreUtils.shallowCompareKeys(this.props, nextProps, {\n      exclude: DEEP_COMPARE_KEYS\n    }) || !CoreUtils.deepCompareKeys(this.props, nextProps, DEEP_COMPARE_KEYS);\n  };\n\n  TableBody.prototype.render = function () {\n    var _a = this.props,\n        grid = _a.grid,\n        numFrozenColumns = _a.numFrozenColumns,\n        numFrozenRows = _a.numFrozenRows;\n    var defaultStyle = grid.getRect().sizeStyle();\n    var style = {\n      height: numFrozenRows != null ? grid.getCumulativeHeightAt(numFrozenRows - 1) : defaultStyle.height,\n      width: numFrozenColumns != null ? grid.getCumulativeWidthAt(numFrozenColumns - 1) : defaultStyle.width\n    };\n    return React.createElement(DragSelectable, {\n      enableMultipleSelection: this.props.enableMultipleSelection,\n      focusedCell: this.props.focusedCell,\n      locateClick: this.locateClick,\n      locateDrag: this.locateDrag,\n      onFocusedCell: this.props.onFocusedCell,\n      onSelection: this.props.onSelection,\n      onSelectionEnd: this.handleSelectionEnd,\n      selectedRegions: this.props.selectedRegions,\n      selectedRegionTransform: this.props.selectedRegionTransform\n    }, React.createElement(ContextMenuTargetWrapper, {\n      className: classNames(Classes.TABLE_BODY_VIRTUAL_CLIENT, Classes.TABLE_CELL_CLIENT),\n      renderContextMenu: this.renderContextMenu,\n      style: style\n    }, React.createElement(TableBodyCells, {\n      cellRenderer: this.props.cellRenderer,\n      focusedCell: this.props.focusedCell,\n      grid: grid,\n      loading: this.props.loading,\n      onCompleteRender: this.props.onCompleteRender,\n      renderMode: this.props.renderMode,\n      columnIndexStart: this.props.columnIndexStart,\n      columnIndexEnd: this.props.columnIndexEnd,\n      rowIndexStart: this.props.rowIndexStart,\n      rowIndexEnd: this.props.rowIndexEnd,\n      viewportRect: this.props.viewportRect\n    })));\n  };\n\n  TableBody.defaultProps = {\n    loading: false,\n    renderMode: RenderMode.BATCH\n  };\n  return TableBody;\n}(AbstractComponent2);\n\nexport { TableBody };","map":null,"metadata":{},"sourceType":"module"}