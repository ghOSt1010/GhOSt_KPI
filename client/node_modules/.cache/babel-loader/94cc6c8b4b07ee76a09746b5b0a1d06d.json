{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Projects/components/ProjectsTable.jsx\";\nimport React, { Component } from 'react';\nimport { HTMLTable, Button, NonIdealState, H5, Spinner, ContextMenu, Dialog, Icon, Card } from '@blueprintjs/core';\nimport Client from '../../../Modules/Client/Client';\nimport ProjectForm from './ProjectForm';\nimport CardHeader from '../../../../components/Card/CardHeader';\nimport CardBody from '../../../components/Card/CardBody';\nimport TableContextMenu from './TableContextMenu';\n\nvar ProjectsTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProjectsTable, _Component);\n\n  function ProjectsTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProjectsTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProjectsTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      errorMsg: '',\n      showEditCard: false,\n      ProjectForEdit: {}\n    };\n    return _this;\n  }\n\n  _createClass(ProjectsTable, [{\n    key: \"isEligable\",\n    value: function isEligable() {\n      var role = Client.Project.getRole();\n      if (role === 'root') return false;\n      if (role === 'admin') return false;\n      return true;\n    }\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMsg: ''\n      });\n    }\n  }, {\n    key: \"deleteProject\",\n    value: function () {\n      var _deleteProject = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                this.resetErrorMsg();\n                _context.next = 4;\n                return Client.Services.ProjectsService.deleteProject(id);\n\n              case 4:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('Project removed successfully');\n                }\n\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete Project');\n\n              case 12:\n                _context.prev = 12;\n                this.props.onRefresh();\n                return _context.finish(12);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8, 12, 15]]);\n      }));\n\n      function deleteProject(_x) {\n        return _deleteProject.apply(this, arguments);\n      }\n\n      return deleteProject;\n    }()\n  }, {\n    key: \"editProject\",\n    value: function editProject(Project) {\n      this.setState({\n        showEditCard: true,\n        ProjectForEdit: Project\n      });\n    }\n  }, {\n    key: \"closeEditProject\",\n    value: function closeEditProject() {\n      this.setState({\n        showEditCard: false\n      });\n    }\n  }, {\n    key: \"renderTableHeader\",\n    value: function renderTableHeader() {\n      return React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Project Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Role\")));\n    }\n  }, {\n    key: \"renderTableBody\",\n    value: function renderTableBody() {\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.renderTableRows());\n    }\n  }, {\n    key: \"renderTableRows\",\n    value: function renderTableRows() {\n      var _this2 = this;\n\n      var ProjectsData = this.props.ProjectsData;\n      return ProjectsData.map(function (Project) {\n        return React.createElement(\"tr\", {\n          key: Project._id,\n          onContextMenu: function onContextMenu(e) {\n            return _this2.handeClick(e, Project);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, Project.Projectname), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, Project.email), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, Project.Projecttype));\n      });\n    }\n  }, {\n    key: \"handeClick\",\n    value: function handeClick(e, Project) {\n      e.preventDefault();\n      ContextMenu.show(this.renderContextMenu(e, Project), {\n        left: e.clientX,\n        top: e.clientY\n      });\n    }\n  }, {\n    key: \"renderContextMenu\",\n    value: function renderContextMenu(e, Project) {\n      var _this3 = this;\n\n      return React.createElement(TableContextMenu, {\n        Project: Project,\n        isEligable: this.isEligable(),\n        onEdit: function onEdit() {\n          return _this3.editProject(Project);\n        },\n        onRemove: function onRemove() {\n          return _this3.deleteProject(Project._id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this4 = this;\n\n      if (this.state.errorMsg) {\n        return React.createElement(NonIdealState, {\n          icon: \"issue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(H5, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \"Something went wrong\")), React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"Cannot load Projects table\"), React.createElement(Button, {\n          icon: \"refresh\",\n          minimal: true,\n          onClick: function onClick() {\n            _this4.props.onRefresh();\n\n            _this4.setState({\n              errorMsg: ''\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"overflow-x-scroll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(HTMLTable, {\n        fill: \"true\",\n        condensed: true,\n        striped: true,\n        interactive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.renderTableHeader(), this.renderTableBody()));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var ProjectForEdit = this.state.ProjectForEdit;\n      var isLoading = this.props.isLoading;\n\n      if (isLoading) {\n        return React.createElement(Spinner, {\n          intent: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, this.renderContent(), React.createElement(Dialog, {\n        isOpen: this.state.showEditCard,\n        onClose: function onClose() {\n          return _this5.closeEditProject();\n        },\n        canEscapeKeyClose: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"Project\",\n        className: \"header-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), \"Edit Project\", React.createElement(\"div\", {\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"cross\",\n        onClick: function onClick() {\n          return _this5.closeEditProject();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }))), React.createElement(CardBody, {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(ProjectForm, {\n        Projectname: ProjectForEdit.Projectname,\n        email: ProjectForEdit.email,\n        role: ProjectForEdit.role,\n        buttonCaption: \"Update\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return ProjectsTable;\n}(Component);\n\nexport { ProjectsTable as default };\nProjectsTable.defaultProps = {\n  ProjectsData: [],\n  onRefresh: function onRefresh() {\n    return;\n  }\n};","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Projects/components/ProjectsTable.jsx"],"names":["React","Component","HTMLTable","Button","NonIdealState","H5","Spinner","ContextMenu","Dialog","Icon","Card","Client","ProjectForm","CardHeader","CardBody","TableContextMenu","ProjectsTable","state","errorMsg","showEditCard","ProjectForEdit","role","Project","getRole","setState","id","resetErrorMsg","Services","ProjectsService","deleteProject","result","status","Notifications","success","response","alert","props","onRefresh","renderTableRows","ProjectsData","map","_id","e","handeClick","Projectname","email","Projecttype","preventDefault","show","renderContextMenu","left","clientX","top","clientY","isEligable","editProject","renderTableHeader","renderTableBody","isLoading","renderContent","closeEditProject","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n   HTMLTable,\n   Button,\n   NonIdealState,\n   H5,\n   Spinner,\n   ContextMenu,\n   Dialog,\n   Icon,\n   Card\n} from '@blueprintjs/core';\nimport Client from '../../../Modules/Client/Client';\nimport ProjectForm from './ProjectForm';\nimport CardHeader from '../../../../components/Card/CardHeader';\nimport CardBody from '../../../components/Card/CardBody';\nimport TableContextMenu from './TableContextMenu';\n\nexport default class ProjectsTable extends Component {\n   state = {\n      errorMsg: '',\n      showEditCard: false,\n      ProjectForEdit: {}\n   };\n   isEligable() {\n      let role = Client.Project.getRole();\n      if (role === 'root') return false;\n      if (role === 'admin') return false;\n      return true;\n   }\n   resetErrorMsg() {\n      this.setState({\n         errorMsg: ''\n      });\n   }\n   async deleteProject(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.ProjectsService.deleteProject(id);\n         if (result.status === 200) {\n            Client.Notifications.success('Project removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete Project');\n      } finally {\n         this.props.onRefresh();\n      }\n   }\n   editProject(Project) {\n      this.setState({ showEditCard: true, ProjectForEdit: Project });\n   }\n   closeEditProject() {\n      this.setState({ showEditCard: false });\n   }\n   renderTableHeader() {\n      return (\n         <thead>\n            <tr>\n               <th>Project Name</th>\n               <th>Email</th>\n               <th>Role</th>\n            </tr>\n         </thead>\n      );\n   }\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { ProjectsData } = this.props;\n      return ProjectsData.map(Project => {\n         return (\n            <tr\n               key={Project._id}\n               onContextMenu={e => this.handeClick(e, Project)}\n            >\n               <td>{Project.Projectname}</td>\n               <td>{Project.email}</td>\n               <td>{Project.Projecttype}</td>\n            </tr>\n         );\n      });\n   }\n   handeClick(e, Project) {\n      e.preventDefault();\n      ContextMenu.show(this.renderContextMenu(e, Project), {\n         left: e.clientX,\n         top: e.clientY\n      });\n   }\n   renderContextMenu(e, Project) {\n      return (\n         <TableContextMenu\n            Project={Project}\n            isEligable={this.isEligable()}\n            onEdit={() => this.editProject(Project)}\n            onRemove={() => this.deleteProject(Project._id)}\n         />\n      );\n   }\n   renderContent() {\n      if (this.state.errorMsg) {\n         return (\n            <NonIdealState icon='issue'>\n               <H5>\n                  <strong>Something went wrong</strong>\n               </H5>\n               <i>Cannot load Projects table</i>\n               <Button\n                  icon='refresh'\n                  minimal\n                  onClick={() => {\n                     this.props.onRefresh();\n                     this.setState({\n                        errorMsg: ''\n                     });\n                  }}\n               ></Button>\n            </NonIdealState>\n         );\n      }\n      return (\n         <div className='overflow-x-scroll'>\n            <HTMLTable fill='true' condensed striped interactive>\n               {this.renderTableHeader()}\n               {this.renderTableBody()}\n            </HTMLTable>\n         </div>\n      );\n   }\n   render() {\n      const { ProjectForEdit } = this.state;\n      const { isLoading } = this.props;\n\n      if (isLoading) {\n         return <Spinner intent='primary'></Spinner>;\n      }\n      return (\n         <div>\n            {this.renderContent()}\n            <Dialog\n               isOpen={this.state.showEditCard}\n               onClose={() => this.closeEditProject()}\n               canEscapeKeyClose={true}\n            >\n               <Card>\n                  <CardHeader>\n                     <Icon icon='Project' className='header-icon' />\n                     Edit Project\n                     <div className='float-right'>\n                        <Icon\n                           icon='cross'\n                           onClick={() => this.closeEditProject()}\n                        />\n                     </div>\n                  </CardHeader>\n                  <CardBody className='card-body'>\n                     <ProjectForm\n                        Projectname={ProjectForEdit.Projectname}\n                        email={ProjectForEdit.email}\n                        role={ProjectForEdit.role}\n                        buttonCaption='Update'\n                     />\n                  </CardBody>\n               </Card>\n            </Dialog>\n         </div>\n      );\n   }\n}\nProjectsTable.defaultProps = {\n   ProjectsData: [],\n   onRefresh: function() {\n      return;\n   }\n};\n"]},"metadata":{},"sourceType":"module"}