{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n *    UIManager controls the user specific preferences in local storage\n *    ver:  0.0.1\n *    info: init release\n */\nvar UIManager =\n/*#__PURE__*/\nfunction () {\n  function UIManager() {\n    _classCallCheck(this, UIManager);\n  }\n\n  _createClass(UIManager, null, [{\n    key: \"setTheme\",\n\n    /**\n     * Save user theme in local storage\n     *\n     * @param {String} theme\n     */\n    value: function setTheme(theme) {\n      var t = theme.toLowerCase();\n\n      if (t === 'dark' || t === 'light') {\n        localStorage.setItem(\"theme\", t);\n      }\n    }\n    /**\n     * Get user theme from local storage and set default theme if no theme selected\n     *    -- set light theme if no theme is set\n     *    -- return theme as {String}\n     * @returns {String} light || dark\n     * \n     */\n\n  }, {\n    key: \"getTheme\",\n    value: function getTheme() {\n      if (!this.isThemeSet()) this.setTheme(\"light\");\n      return localStorage.getItem(\"theme\");\n    }\n    /**\n     * Check if theme is saved in local storage\n     * @returns {boolean} if light or dark theme is set\n     */\n\n  }, {\n    key: \"isThemeSet\",\n    value: function isThemeSet() {\n      return localStorage.getItem(\"theme\") !== null;\n    }\n    /**\n     *    Apply Selected theme\n     *       -- keeps selection in localstorage\n     *       -- theme can be selected by setTheme(theme) method\n     *       -- apply CSS class to 'bp3-dark' || 'bp3-body' to <body></body> tag\n     *       -- idea of BLUEPRINTJS UI framework \n     * @returns {void}\n     */\n\n  }, {\n    key: \"applySelectedTheme\",\n    value: function applySelectedTheme() {\n      document.body.className = UIManager.getTheme() === 'dark' ? 'bp3-dark' : 'bp3-body';\n    }\n    /**\n     * Switch doc theme based on selection :\n     *    -- dark\n     *    -- light\n     * \n     * @returns {void}\n     */\n\n  }, {\n    key: \"swtichTheme\",\n    value: function swtichTheme() {\n      if (this.isDarkThemeEnabled()) {\n        this.setTheme('light');\n      } else {\n        this.setTheme('dark');\n      }\n\n      this.applySelectedTheme();\n    }\n    /**\n     *    @returns {Boolean} if dark theme is set\n     */\n\n  }, {\n    key: \"isDarkThemeEnabled\",\n    value: function isDarkThemeEnabled() {\n      var th = this.getTheme();\n\n      if (th === 'dark') {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {Boolean} if light theme is set\n     */\n\n  }, {\n    key: \"isLightThemeEnabled\",\n    value: function isLightThemeEnabled() {\n      return !this.isDarkThemeEnabled();\n    }\n  }]);\n\n  return UIManager;\n}();\n\nexport default UIManager;","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/UIManager/UIManager.js"],"names":["UIManager","theme","t","toLowerCase","localStorage","setItem","isThemeSet","setTheme","getItem","document","body","className","getTheme","isDarkThemeEnabled","applySelectedTheme","th"],"mappings":";;;AAAA;;;;;IAMMA,S;;;;;;;;;;AACH;;;;;6BAKgBC,K,EAAO;AACpB,UAAIC,CAAC,GAAGD,KAAK,CAACE,WAAN,EAAR;;AACA,UAAID,CAAC,KAAK,MAAN,IAAgBA,CAAC,KAAK,OAA1B,EAAmC;AAChCE,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,CAA9B;AACF;AACH;AAED;;;;;;;;;;+BAOkB;AACf,UAAI,CAAC,KAAKI,UAAL,EAAL,EAAwB,KAAKC,QAAL,CAAc,OAAd;AACxB,aAAOH,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAP;AACF;AAED;;;;;;;iCAIoB;AACjB,aAAOJ,YAAY,CAACI,OAAb,CAAqB,OAArB,MAAkC,IAAzC;AACF;AAED;;;;;;;;;;;yCAQ4B;AACzBC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,GACGX,SAAS,CAACY,QAAV,OAAyB,MAAzB,GAAkC,UAAlC,GAA+C,UADlD;AAEF;AAED;;;;;;;;;;kCAOqB;AAClB,UAAI,KAAKC,kBAAL,EAAJ,EAA+B;AAC5B,aAAKN,QAAL,CAAc,OAAd;AACF,OAFD,MAEO;AACJ,aAAKA,QAAL,CAAc,MAAd;AACF;;AACD,WAAKO,kBAAL;AACF;AAED;;;;;;yCAG4B;AACzB,UAAIC,EAAE,GAAG,KAAKH,QAAL,EAAT;;AACA,UAAIG,EAAE,KAAK,MAAX,EAAmB;AAChB,eAAO,IAAP;AACF;;AACD,aAAO,KAAP;AACF;AAED;;;;;;0CAG6B;AAC1B,aAAO,CAAC,KAAKF,kBAAL,EAAR;AACF;;;;;;AAGJ,eAAeb,SAAf","sourcesContent":["/**\n *    UIManager controls the user specific preferences in local storage\n *    ver:  0.0.1\n *    info: init release\n */\n\nclass UIManager {\n   /**\n    * Save user theme in local storage\n    *\n    * @param {String} theme\n    */\n   static setTheme(theme) {\n      var t = theme.toLowerCase()\n      if (t === 'dark' || t === 'light') {\n         localStorage.setItem(\"theme\", t);\n      }\n   }\n\n   /**\n    * Get user theme from local storage and set default theme if no theme selected\n    *    -- set light theme if no theme is set\n    *    -- return theme as {String}\n    * @returns {String} light || dark\n    * \n    */\n   static getTheme() {\n      if (!this.isThemeSet()) this.setTheme(\"light\");\n      return localStorage.getItem(\"theme\");\n   }\n\n   /**\n    * Check if theme is saved in local storage\n    * @returns {boolean} if light or dark theme is set\n    */\n   static isThemeSet() {\n      return localStorage.getItem(\"theme\") !== null;\n   }\n\n   /**\n    *    Apply Selected theme\n    *       -- keeps selection in localstorage\n    *       -- theme can be selected by setTheme(theme) method\n    *       -- apply CSS class to 'bp3-dark' || 'bp3-body' to <body></body> tag\n    *       -- idea of BLUEPRINTJS UI framework \n    * @returns {void}\n    */\n   static applySelectedTheme() {\n      document.body.className =\n         UIManager.getTheme() === 'dark' ? 'bp3-dark' : 'bp3-body';\n   }\n\n   /**\n    * Switch doc theme based on selection :\n    *    -- dark\n    *    -- light\n    * \n    * @returns {void}\n    */\n   static swtichTheme() {\n      if (this.isDarkThemeEnabled()) {\n         this.setTheme('light')\n      } else {\n         this.setTheme('dark')\n      }\n      this.applySelectedTheme()\n   }\n\n   /**\n    *    @returns {Boolean} if dark theme is set\n    */\n   static isDarkThemeEnabled() {\n      var th = this.getTheme()\n      if (th === 'dark') {\n         return true\n      }\n      return false\n   }\n\n   /**\n    * @returns {Boolean} if light theme is set\n    */\n   static isLightThemeEnabled() {\n      return !this.isDarkThemeEnabled()\n   }\n}\n\nexport default UIManager;\n"]},"metadata":{},"sourceType":"module"}