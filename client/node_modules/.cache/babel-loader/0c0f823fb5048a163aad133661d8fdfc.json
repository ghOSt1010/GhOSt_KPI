{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { Utils } from \"../common/utils\";\nimport { RegionCardinality, Regions } from \"../regions\";\nimport { Draggable } from \"./draggable\";\n\nvar DragReorderable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DragReorderable, _super);\n\n  function DragReorderable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleActivate = function (event) {\n      if (_this.shouldIgnoreMouseDown(event)) {\n        return false;\n      }\n\n      var region = _this.props.locateClick(event);\n\n      if (!Regions.isValid(region)) {\n        return false;\n      }\n\n      var cardinality = Regions.getRegionCardinality(region);\n      var isColumnHeader = cardinality === RegionCardinality.FULL_COLUMNS;\n      var isRowHeader = cardinality === RegionCardinality.FULL_ROWS;\n\n      if (!isColumnHeader && !isRowHeader) {\n        return false;\n      }\n\n      var selectedRegions = _this.props.selectedRegions;\n      var selectedRegionIndex = Regions.findContainingRegion(selectedRegions, region);\n\n      if (selectedRegionIndex >= 0) {\n        var selectedRegion = selectedRegions[selectedRegionIndex];\n\n        if (Regions.getRegionCardinality(selectedRegion) !== cardinality) {\n          // ignore FULL_TABLE selections\n          return false;\n        } // cache for easy access later in the lifecycle\n\n\n        var selectedInterval = isRowHeader ? selectedRegion.rows : selectedRegion.cols;\n        _this.selectedRegionStartIndex = selectedInterval[0]; // add 1 because the selected interval is inclusive, which simple subtraction doesn't\n        // account for (e.g. in a FULL_COLUMNS range from 3 to 6, 6 - 3 = 3, but the selection\n        // actually includes four columns: 3, 4, 5, and 6)\n\n        _this.selectedRegionLength = selectedInterval[1] - selectedInterval[0] + 1;\n      } else {\n        // select the new region to avoid complex and unintuitive UX w/r/t the existing selection\n        _this.maybeSelectRegion(region);\n\n        var regionRange = isRowHeader ? region.rows : region.cols;\n        _this.selectedRegionStartIndex = regionRange[0];\n        _this.selectedRegionLength = regionRange[1] - regionRange[0] + 1;\n      }\n\n      return true;\n    };\n\n    _this.handleDragMove = function (event, coords) {\n      var oldIndex = _this.selectedRegionStartIndex;\n\n      var guideIndex = _this.props.locateDrag(event, coords);\n\n      var length = _this.selectedRegionLength;\n      var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n\n      _this.props.onReordering(oldIndex, reorderedIndex, length);\n    };\n\n    _this.handleDragEnd = function (event, coords) {\n      var oldIndex = _this.selectedRegionStartIndex;\n\n      var guideIndex = _this.props.locateDrag(event, coords);\n\n      var length = _this.selectedRegionLength;\n      var reorderedIndex = Utils.guideIndexToReorderedIndex(oldIndex, guideIndex, length);\n\n      _this.props.onReordered(oldIndex, reorderedIndex, length); // the newly reordered region becomes the only selection\n\n\n      var newRegion = _this.props.toRegion(reorderedIndex, reorderedIndex + length - 1);\n\n      _this.maybeSelectRegion(newRegion); // resetting is not strictly required, but it's cleaner\n\n\n      _this.selectedRegionStartIndex = undefined;\n      _this.selectedRegionLength = undefined;\n    };\n\n    return _this;\n  }\n\n  DragReorderable.prototype.render = function () {\n    var draggableProps = this.getDraggableProps();\n    return React.createElement(Draggable, tslib_1.__assign({}, draggableProps, {\n      preventDefault: false\n    }), this.props.children);\n  };\n\n  DragReorderable.prototype.getDraggableProps = function () {\n    return this.props.onReordered == null ? {} : {\n      onActivate: this.handleActivate,\n      onDragEnd: this.handleDragEnd,\n      onDragMove: this.handleDragMove\n    };\n  };\n\n  DragReorderable.prototype.shouldIgnoreMouseDown = function (event) {\n    var disabled = this.props.disabled;\n    var isDisabled = CoreUtils.isFunction(disabled) ? CoreUtils.safeInvoke(disabled, event) : disabled;\n    return !Utils.isLeftClick(event) || isDisabled;\n  };\n\n  DragReorderable.prototype.maybeSelectRegion = function (region) {\n    var nextSelectedRegions = [region];\n\n    if (!CoreUtils.deepCompareKeys(nextSelectedRegions, this.props.selectedRegions)) {\n      this.props.onSelection(nextSelectedRegions); // move the focused cell into the newly selected region\n\n      this.props.onFocusedCell(tslib_1.__assign({}, Regions.getFocusCellCoordinatesFromRegion(region), {\n        focusSelectionIndex: 0\n      }));\n    }\n  };\n\n  DragReorderable.defaultProps = {\n    selectedRegions: []\n  };\n  return DragReorderable;\n}(React.PureComponent);\n\nexport { DragReorderable };","map":null,"metadata":{},"sourceType":"module"}