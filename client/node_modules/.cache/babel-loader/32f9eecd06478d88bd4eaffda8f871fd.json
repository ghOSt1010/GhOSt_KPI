{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx\";\nimport React, { Component } from 'react';\nimport UsersCard from './components/Users/UsersCard';\nimport { Tabs, Tab, Button, H2, ButtonGroup, Divider } from '@blueprintjs/core';\nimport UsersTable from './components/Users/UsersTable';\nimport Client from '../../Modules/Client/Client';\n\nvar AdminPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPanel, _Component);\n\n  function AdminPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdminPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdminPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: []\n    };\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AdminPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsersData();\n    }\n  }, {\n    key: \"getUsersData\",\n    value: function () {\n      var _getUsersData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setLoading(true);\n                _context.prev = 1;\n                _context.next = 4;\n                return Client.Services.UsersService.getUsers();\n\n              case 4:\n                result = _context.sent;\n                this.setState({\n                  users: result.data\n                });\n                _context.next = 13;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                alert(_context.t0);\n                this.setState({\n                  errorMsg: _context.t0.response\n                });\n                Client.Notifications.alert('Error while loading users list');\n\n              case 13:\n                _context.prev = 13;\n                this.setLoading(false);\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8, 13, 16]]);\n      }));\n\n      function getUsersData() {\n        return _getUsersData.apply(this, arguments);\n      }\n\n      return getUsersData;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.resetErrorMsg();\n                _context2.next = 4;\n                return Client.Services.UsersService.deleteUser(id);\n\n              case 4:\n                result = _context2.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('User removed successfully');\n                }\n\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context2.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete user');\n\n              case 12:\n                _context2.prev = 12;\n                this.props.onRefresh();\n                return _context2.finish(12);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8, 12, 15]]);\n      }));\n\n      function deleteUser(_x) {\n        return _deleteUser.apply(this, arguments);\n      }\n\n      return deleteUser;\n    }()\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Employees') {\n        return React.createElement(ButtonGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(Button, {\n          icon: \"edit\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"add\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"trash\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"refresh\",\n          small: true,\n          minimal: true,\n          onClick: function onClick() {\n            return _this2.getUsersData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          users = _this$state.users,\n          isLoading = _this$state.isLoading;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Admin Panel\")), React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Users\",\n        title: \"Users\",\n        panel: React.createElement(UsersCard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        id: \"Employees\",\n        title: \"Employees\",\n        panel: React.createElement(UsersTable, {\n          usersData: users,\n          onRefresh: function onRefresh() {\n            return _this3.getUsersData();\n          },\n          isLoading: isLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        id: \"KPIs\",\n        title: \"KPIs\",\n        panel: React.createElement(KPIs, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), this.renderControlls()));\n    }\n  }]);\n\n  return AdminPanel;\n}(Component);\n\nexport { AdminPanel as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx"],"names":["React","Component","UsersCard","Tabs","Tab","Button","H2","ButtonGroup","Divider","UsersTable","Client","AdminPanel","state","activeTabID","selectedTabId","isLoading","users","handleTabChange","setState","getUsersData","setLoading","Services","UsersService","getUsers","result","data","alert","errorMsg","response","Notifications","id","resetErrorMsg","deleteUser","status","success","props","onRefresh","loading","renderControlls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport UsersCard from './components/Users/UsersCard';\n\nimport { Tabs, Tab, Button, H2, ButtonGroup, Divider } from '@blueprintjs/core';\nimport UsersTable from './components/Users/UsersTable';\nimport Client from '../../Modules/Client/Client';\n\nexport default class AdminPanel extends Component {\n   state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: []\n   };\n\n   componentDidMount() {\n      this.getUsersData();\n   }\n\n   async getUsersData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.UsersService.getUsers();\n         this.setState({\n            users: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading users list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   async deleteUser(id) {\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.UsersService.deleteUser(id);\n         if (result.status === 200) {\n            Client.Notifications.success('User removed successfully');\n         }\n      } catch (err) {\n         this.setState({ errorMsg: err.response.status });\n         Client.Notifications.alert('Error, cannot delete user');\n      } finally {\n         this.props.onRefresh();\n      }\n   }\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Employees') {\n         return (\n            <ButtonGroup>\n               <Button icon='edit' small minimal />\n               <Button icon='add' small minimal />\n               <Button icon='trash' small minimal />\n               <Divider />\n               <Button\n                  icon='refresh'\n                  small\n                  minimal\n                  onClick={() => this.getUsersData()}\n               />\n            </ButtonGroup>\n         );\n      }\n   }\n\n   render() {\n      const { users, isLoading } = this.state;\n\n      return (\n         <div>\n            <div className='mt-2'>\n               <H2>Admin Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab id='Users' title='Users' panel={<UsersCard />} />\n               <Tab\n                  id='Employees'\n                  title='Employees'\n                  panel={\n                     <UsersTable\n                        usersData={users}\n                        onRefresh={() => this.getUsersData()}\n                        isLoading={isLoading}\n                     />\n                  }\n               />\n               <Tab id='KPIs' title='KPIs' panel={<KPIs />} />\n               <Tabs.Expander />\n\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}