{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/CreateUserCard.jsx\";\nimport React, { Component } from 'react';\nimport StdCard from '../../../components/Card/StdCard';\nimport CreateuserForm from './CreateUserForm';\nimport Client from '../../../Modules/Client/Client';\nimport { Alert } from '@blueprintjs/core';\nimport DataManagerCard from '../../../components/Card/DataManagerCard';\nimport UsersTable from './UsersTable.js/UsersTable';\n\nvar CreateUserCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateUserCard, _Component);\n\n  function CreateUserCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CreateUserCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CreateUserCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      email: '',\n      username: '',\n      role: 'USER',\n      password: '',\n      openAlert: false,\n      errorMessage: ''\n    };\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, role, password, usr, result, msg;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, role = _this$state.role, password = _this$state.password;\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, role, '5dfffe289fe19f21c85f3287', //<- temporaryfix\n                '5dfffe289fe19f21c85f3287' //<- temporaryfix\n                );\n                _context.prev = 3;\n                _context.next = 6;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 6:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.showSuccessNotification(\"User \".concat(username, \" successfully saved\"));\n                }\n\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n\n                if (_context.t0.response.status === 409) {\n                  msg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.success(msg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  msg = \"Error while saving \".concat(username, \" user\");\n                  Client.Notifications.alert(msg);\n                }\n\n                _this.setState({\n                  openAlert: true,\n                  errorMessage: msg\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(CreateUserCard, [{\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        openAlert: false\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        email: '',\n        username: '',\n        role: 'USER',\n        password: '',\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          username = _this$state2.username,\n          role = _this$state2.role,\n          password = _this$state2.password,\n          openAlert = _this$state2.openAlert;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        isOpen: openAlert,\n        confirmButtonText: \"Clear\",\n        onConfirm: function onConfirm() {\n          return _this2.clearForm();\n        },\n        cancelButtonText: \"Cancel\",\n        onCancel: function onCancel() {\n          return _this2.closeAlert();\n        },\n        intent: \"primary\",\n        portalContainer: document.getElementById('ceateUserContainer'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(DataManagerCard, {\n        icon: \"th\",\n        headerText: \"Users\",\n        cardCaption: \"All app users\",\n        addButtonText: \"Add new user\",\n        id: \"allUsers\",\n        modalHeaderText: \"Add new user\",\n        table: React.createElement(UsersTable, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }),\n        addForm: React.createElement(CreateuserForm, {\n          email: email,\n          username: username,\n          password: password,\n          role: role,\n          onChange: this.onChange,\n          onClick: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CreateUserCard;\n}(Component);\n/*<StdCard\n               headerText='Create new user'\n               icon='add'\n               size='m'\n               isBodyOpen={false}\n            >\n               <Alert\n                  isOpen={openAlert}\n                  confirmButtonText='Clear'\n                  onConfirm={() => this.clearForm()}\n                  cancelButtonText='Cancel'\n                  onCancel={() => this.closeAlert()}\n                  intent='primary'\n                  portalContainer={document.getElementById(\n                     'ceateUserContainer'\n                  )}\n               >\n                  <strong>Something went wrong</strong>\n                  <p>Do you want to clear the form?</p>\n               </Alert>\n               <CreateuserForm\n                  email={email}\n                  username={username}\n                  password={password}\n                  role={role}\n                  onChange={this.onChange}\n                  onClick={this.handleSubmit}\n               />\n            </StdCard>\n            */\n\n\nexport { CreateUserCard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/CreateUserCard.jsx"],"names":["React","Component","StdCard","CreateuserForm","Client","Alert","DataManagerCard","UsersTable","CreateUserCard","state","email","username","role","password","openAlert","errorMessage","onChange","e","target","id","value","setState","handleSubmit","preventDefault","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","showSuccessNotification","response","msg","data","message","success","alert","clearForm","closeAlert","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport StdCard from '../../../components/Card/StdCard';\nimport CreateuserForm from './CreateUserForm';\nimport Client from '../../../Modules/Client/Client';\nimport { Alert } from '@blueprintjs/core';\nimport DataManagerCard from '../../../components/Card/DataManagerCard';\nimport UsersTable from './UsersTable.js/UsersTable';\n\nexport default class CreateUserCard extends Component {\n   state = {\n      email: '',\n      username: '',\n      role: 'USER',\n      password: '',\n      openAlert: false,\n      errorMessage: ''\n   };\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   closeAlert() {\n      this.setState({ openAlert: false });\n   }\n\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         role: 'USER',\n         password: '',\n         openAlert: false,\n         errorMessage: ''\n      });\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n\n      const { email, username, role, password } = this.state;\n\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         role,\n         '5dfffe289fe19f21c85f3287', //<- temporaryfix\n         '5dfffe289fe19f21c85f3287' //<- temporaryfix\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.showSuccessNotification(\n               `User ${username} successfully saved`\n            );\n         }\n      } catch (err) {\n         let msg;\n         if (err.response.status === 409) {\n            msg = `Error: ${err.response.data.message}`;\n            Client.Notifications.success(msg);\n         }\n         if (err.response.status !== 409) {\n            msg = `Error while saving ${username} user`;\n            Client.Notifications.alert(msg);\n         }\n         this.setState({ openAlert: true, errorMessage: msg });\n      }\n   };\n   render() {\n      const { email, username, role, password, openAlert } = this.state;\n      return (\n         <div>\n            <Alert\n               isOpen={openAlert}\n               confirmButtonText='Clear'\n               onConfirm={() => this.clearForm()}\n               cancelButtonText='Cancel'\n               onCancel={() => this.closeAlert()}\n               intent='primary'\n               portalContainer={document.getElementById('ceateUserContainer')}\n            ></Alert>\n            <DataManagerCard\n               icon='th'\n               headerText='Users'\n               cardCaption='All app users'\n               addButtonText='Add new user'\n               id='allUsers'\n               modalHeaderText='Add new user'\n               table={<UsersTable></UsersTable>}\n               addForm={\n                  <CreateuserForm\n                     email={email}\n                     username={username}\n                     password={password}\n                     role={role}\n                     onChange={this.onChange}\n                     onClick={this.handleSubmit}\n                  />\n               }\n            />\n         </div>\n      );\n   }\n}\n/*<StdCard\n               headerText='Create new user'\n               icon='add'\n               size='m'\n               isBodyOpen={false}\n            >\n               <Alert\n                  isOpen={openAlert}\n                  confirmButtonText='Clear'\n                  onConfirm={() => this.clearForm()}\n                  cancelButtonText='Cancel'\n                  onCancel={() => this.closeAlert()}\n                  intent='primary'\n                  portalContainer={document.getElementById(\n                     'ceateUserContainer'\n                  )}\n               >\n                  <strong>Something went wrong</strong>\n                  <p>Do you want to clear the form?</p>\n               </Alert>\n               <CreateuserForm\n                  email={email}\n                  username={username}\n                  password={password}\n                  role={role}\n                  onChange={this.onChange}\n                  onClick={this.handleSubmit}\n               />\n            </StdCard>\n            */\n"]},"metadata":{},"sourceType":"module"}