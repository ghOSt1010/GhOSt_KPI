{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Utils as CoreUtils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { DragEvents } from \"./dragEvents\";\nvar REATTACH_PROPS_KEYS = [\"stopPropagation\", \"preventDefault\"];\n/**\n * This component provides a simple interface for combined drag and/or click\n * events.\n *\n * Since the mouse interactions for drag and click are overloaded, here are\n * the events that will fire in these cases:\n *\n * A Click Interaction\n * 1. The user presses down on the render element, triggering the onActivate\n *    callback.\n * 2. The user releases the mouse button without moving it, triggering the\n *    onClick callback.\n *\n * A Drag Interaction\n * 1. The user presses down on the render element, triggering the onActivate\n *    callback.\n * 2. The user moves the mouse, triggering the onDragMove callback.\n * 3. The user moves the mouse, triggering the onDragMove callback.\n * 4. The user moves the mouse, triggering the onDragMove callback.\n * 5. The user releases the mouse button, triggering a final onDragMove\n *    callback as well as an onDragEnd callback.\n *\n * If `false` is returned from the onActivate callback, no further events\n * will be fired until the next activation.\n */\n\nvar Draggable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Draggable, _super);\n\n  function Draggable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Draggable.prototype.render = function () {\n    return React.Children.only(this.props.children);\n  };\n\n  Draggable.prototype.componentDidUpdate = function (prevProps) {\n    var propsWhitelist = {\n      include: REATTACH_PROPS_KEYS\n    };\n\n    if (this.events && !CoreUtils.shallowCompareKeys(prevProps, this.props, propsWhitelist)) {\n      this.events.attach(ReactDOM.findDOMNode(this), this.props);\n    }\n  };\n\n  Draggable.prototype.componentDidMount = function () {\n    this.events = new DragEvents();\n    this.events.attach(ReactDOM.findDOMNode(this), this.props);\n  };\n\n  Draggable.prototype.componentWillUnmount = function () {\n    this.events.detach();\n    delete this.events;\n  };\n\n  Draggable.defaultProps = {\n    preventDefault: true,\n    stopPropagation: false\n  };\n  return Draggable;\n}(React.PureComponent);\n\nexport { Draggable };","map":null,"metadata":{},"sourceType":"module"}