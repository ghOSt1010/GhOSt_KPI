{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Dashboards/Dashboards.jsx\";\nimport React, { Component } from 'react';\nimport { Tabs, Tab, H2 } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport MainDashboard from './components/MainDashboard';\nimport DashboardControllers from './components/DashboardControllers';\nimport TestView2 from './components/TestComponent2';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Dashboards',\n      selectedTabId: 'Dashboards',\n      isLoading: true,\n      data: [],\n      errorMessage: '',\n      selected: ''\n    };\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setLoading(true);\n                _context.prev = 1;\n                _context.next = 4;\n                return Client.Services.ReportingService.getReports();\n\n              case 4:\n                result = _context.sent;\n                this.setState({\n                  data: result.data\n                });\n                _context.next = 13;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                alert(_context.t0);\n                this.setState({\n                  errorMsg: _context.t0.response\n                });\n                Client.Notifications.alert('Error while loading reports');\n\n              case 13:\n                _context.prev = 13;\n                this.setLoading(false);\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8, 13, 16]]);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Dashboards') {\n        return React.createElement(DashboardControllers, {\n          id: \"project\",\n          ref: \"project\",\n          onChange: this.onChange,\n          disabled: false,\n          fill: true,\n          value: this.state.project,\n          placeholder: 'Select Project...',\n          onRefresh: function onRefresh() {\n            return _this2.getData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          isLoading = _this$state.isLoading,\n          selected = _this$state.selected;\n      return React.createElement(\"div\", {\n        id: \"Dashboards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Dashboard Panel\")), React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Dashboards\",\n        title: \"Main Dashboard\",\n        panel: React.createElement(MainDashboard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        id: \"2\",\n        title: \"Beta\",\n        panel: React.createElement(TestView2, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), this.renderControlls()));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport { Dashboard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/Dashboards/Dashboards.jsx"],"names":["React","Component","Tabs","Tab","H2","Client","MainDashboard","DashboardControllers","TestView2","Dashboard","state","activeTabID","selectedTabId","isLoading","data","errorMessage","selected","onChange","e","target","id","value","setState","handleTabChange","getData","setLoading","Services","ReportingService","getReports","result","alert","errorMsg","response","Notifications","loading","project","renderControlls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tabs, Tab, H2 } from '@blueprintjs/core';\nimport Client from '../../Modules/Client/Client';\nimport MainDashboard from './components/MainDashboard';\nimport DashboardControllers from './components/DashboardControllers';\nimport TestView2 from './components/TestComponent2';\n\nexport default class Dashboard extends Component {\n   state = {\n      activeTabID: 'Dashboards',\n      selectedTabId: 'Dashboards',\n      isLoading: true,\n      data: [],\n      errorMessage: '',\n      selected: ''\n   };\n\n   componentDidMount() {\n      this.getData();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      var result;\n      try {\n         //this.resetErrorMsg();\n         result = await Client.Services.ReportingService.getReports();\n         this.setState({\n            data: result.data\n         });\n      } catch (err) {\n         alert(err);\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading reports');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n\n   resetErrorMsg() {\n      this.setState({ errorMessage: '' });\n   }\n\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n\n   handleTabChange = activeTabID => {\n      this.setState({\n         activeTabID: activeTabID,\n         selectedTabId: activeTabID\n      });\n   };\n\n   renderControlls() {\n      if (this.state.selectedTabId === 'Dashboards') {\n         return (\n            <DashboardControllers\n               id='project'\n               ref='project'\n               onChange={this.onChange}\n               disabled={false}\n               fill={true}\n               value={this.state.project}\n               placeholder={'Select Project...'}\n               onRefresh={() => this.getData()}\n            />\n         );\n      }\n   }\n\n   render() {\n      const {\n         data,\n         isLoading,\n\n         selected\n      } = this.state;\n\n      return (\n         <div id='Dashboards'>\n            <div className='mt-2'>\n               <H2>Dashboard Panel</H2>\n            </div>\n            <Tabs\n               onChange={this.handleTabChange}\n               selectedTabId={this.state.selectedTabId}\n               large\n            >\n               <Tab\n                  id='Dashboards'\n                  title='Main Dashboard'\n                  panel={<MainDashboard></MainDashboard>}\n               />\n               <Tab id='2' title='Beta' panel={<TestView2 />} />\n               <Tabs.Expander />\n               {this.renderControlls()}\n            </Tabs>\n         </div>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}