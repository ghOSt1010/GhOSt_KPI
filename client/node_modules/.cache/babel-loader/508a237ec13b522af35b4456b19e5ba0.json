{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX, Keys, Popover, Position, TagInput, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar MultiSelect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MultiSelect, _super);\n\n  function MultiSelect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isOpen: _this.props.popoverProps && _this.props.popoverProps.isOpen || false\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.input = null;\n    _this.queryList = null;\n    _this.refHandlers = {\n      input: function input(ref) {\n        _this.input = ref;\n        Utils.safeInvokeMember(_this.props.tagInputProps, \"inputRef\", ref);\n      },\n      queryList: function queryList(ref) {\n        return _this.queryList = ref;\n      }\n    };\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          fill = _a.fill,\n          _b = _a.tagInputProps,\n          tagInputProps = _b === void 0 ? {} : _b,\n          _c = _a.popoverProps,\n          popoverProps = _c === void 0 ? {} : _c,\n          _d = _a.selectedItems,\n          selectedItems = _d === void 0 ? [] : _d,\n          placeholder = _a.placeholder;\n      var handlePaste = listProps.handlePaste,\n          handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n\n      if (fill) {\n        popoverProps.fill = true;\n        tagInputProps.fill = true;\n      } // add our own inputProps.className so that we can reference it in event handlers\n\n\n      var _e = tagInputProps.inputProps,\n          inputProps = _e === void 0 ? {} : _e;\n      inputProps.className = classNames(inputProps.className, Classes.MULTISELECT_TAG_INPUT_INPUT);\n\n      var handleTagInputAdd = function handleTagInputAdd(values, method) {\n        if (method === \"paste\") {\n          handlePaste(values);\n        }\n      };\n\n      return React.createElement(Popover, tslib_1.__assign({\n        autoFocus: false,\n        canEscapeKeyClose: true,\n        enforceFocus: false,\n        isOpen: _this.state.isOpen,\n        position: Position.BOTTOM_LEFT\n      }, popoverProps, {\n        className: classNames(listProps.className, popoverProps.className),\n        onInteraction: _this.handlePopoverInteraction,\n        popoverClassName: classNames(Classes.MULTISELECT_POPOVER, popoverProps.popoverClassName),\n        onOpened: _this.handlePopoverOpened\n      }), React.createElement(\"div\", {\n        onKeyDown: _this.getTagInputKeyDownHandler(handleKeyDown),\n        onKeyUp: _this.getTagInputKeyUpHandler(handleKeyUp)\n      }, React.createElement(TagInput, tslib_1.__assign({\n        placeholder: placeholder\n      }, tagInputProps, {\n        className: classNames(Classes.MULTISELECT, tagInputProps.className),\n        inputRef: _this.refHandlers.input,\n        inputProps: inputProps,\n        inputValue: listProps.query,\n        onAdd: handleTagInputAdd,\n        onInputChange: listProps.handleQueryChange,\n        values: selectedItems.map(_this.props.tagRenderer)\n      }))), React.createElement(\"div\", {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      }, listProps.itemList));\n    };\n\n    _this.handleItemSelect = function (item, evt) {\n      if (_this.input != null) {\n        _this.input.focus();\n      }\n\n      Utils.safeInvoke(_this.props.onItemSelect, item, evt);\n    };\n\n    _this.handleQueryChange = function (query, evt) {\n      _this.setState({\n        isOpen: query.length > 0 || !_this.props.openOnKeyDown\n      });\n\n      Utils.safeInvoke(_this.props.onQueryChange, query, evt);\n    };\n\n    _this.handlePopoverInteraction = function (nextOpenState) {\n      // deferring to rAF to get properly updated document.activeElement\n      return requestAnimationFrame(function () {\n        if (_this.input != null && _this.input !== document.activeElement) {\n          // the input is no longer focused so we can close the popover\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!_this.props.openOnKeyDown) {\n          // open the popover when focusing the tag input\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        Utils.safeInvokeMember(_this.props.popoverProps, \"onInteraction\", nextOpenState);\n      });\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      if (_this.queryList != null) {\n        // scroll active item into view after popover transition completes and all dimensions are stable.\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpened\", node);\n    };\n\n    _this.getTagInputKeyDownHandler = function (handleQueryListKeyDown) {\n      return function (e) {\n        var which = e.which;\n\n        if (which === Keys.ESCAPE || which === Keys.TAB) {\n          // By default the escape key will not trigger a blur on the\n          // input element. It must be done explicitly.\n          if (_this.input != null) {\n            _this.input.blur();\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!(which === Keys.BACKSPACE || which === Keys.ARROW_LEFT || which === Keys.ARROW_RIGHT)) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        var isTargetingTagRemoveButton = e.target.closest(\".\" + CoreClasses.TAG_REMOVE) != null;\n\n        if (_this.state.isOpen && !isTargetingTagRemoveButton) {\n          Utils.safeInvoke(handleQueryListKeyDown, e);\n        }\n      };\n    };\n\n    _this.getTagInputKeyUpHandler = function (handleQueryListKeyUp) {\n      return function (e) {\n        var isTargetingInput = e.target.classList.contains(Classes.MULTISELECT_TAG_INPUT_INPUT); // only handle events when the focus is on the actual <input> inside the TagInput, as that's\n        // what QueryList is designed to do\n\n        if (_this.state.isOpen && isTargetingInput) {\n          Utils.safeInvoke(handleQueryListKeyUp, e);\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  MultiSelect.ofType = function () {\n    return MultiSelect;\n  };\n\n  MultiSelect.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        openOnKeyDown = _a.openOnKeyDown,\n        popoverProps = _a.popoverProps,\n        tagInputProps = _a.tagInputProps,\n        restProps = tslib_1.__rest(_a, [\"openOnKeyDown\", \"popoverProps\", \"tagInputProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      onItemSelect: this.handleItemSelect,\n      onQueryChange: this.handleQueryChange,\n      ref: this.refHandlers.queryList,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  MultiSelect.displayName = DISPLAYNAME_PREFIX + \".MultiSelect\";\n  MultiSelect.defaultProps = {\n    fill: false,\n    placeholder: \"Search...\"\n  };\n  return MultiSelect;\n}(React.PureComponent);\n\nexport { MultiSelect };","map":null,"metadata":{},"sourceType":"module"}