{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/CreateUserCard.jsx\";\nimport React, { Component } from 'react';\nimport StdCard from '../../../components/Card/StdCard';\nimport CreateuserForm from './CreateUserForm';\nimport Client from '../../../Modules/Client/Client';\nimport { Alert, H5, Icon } from '@blueprintjs/core';\nimport DataManagerCard from '../../../components/Card/DataManagerCard';\nimport UsersTable from './UsersTable.js/UsersTable';\n\nvar CreateUserCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateUserCard, _Component);\n\n  function CreateUserCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CreateUserCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CreateUserCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      email: '',\n      username: '',\n      role: 'USER',\n      password: '',\n      openAlert: false,\n      errorMessage: ''\n    };\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, role, password, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, role = _this$state.role, password = _this$state.password;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, role, '5dfffe289fe19f21c85f3287', //<- temporaryfix\n                '5dfffe289fe19f21c85f3287' //<- temporaryfix\n                );\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n                }\n\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                _this.setState({\n                  errorMessage: errorMsg,\n                  openAlert: true\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(CreateUserCard, [{\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        email: '',\n        username: '',\n        role: 'USER',\n        password: '',\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          username = _this$state2.username,\n          role = _this$state2.role,\n          password = _this$state2.password,\n          errorMessage = _this$state2.errorMessage,\n          openAlert = _this$state2.openAlert;\n      return React.createElement(DataManagerCard, {\n        icon: \"th\",\n        headerText: \"Users\",\n        cardCaption: \"All app users\",\n        addButtonText: \"Add new user\",\n        id: \"allUsers\",\n        modalHeaderText: \"Add new user\",\n        table: React.createElement(UsersTable, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }),\n        addForm: React.createElement(CreateuserForm, {\n          email: email,\n          username: username,\n          password: password,\n          role: role,\n          onChange: this.onChange,\n          onClick: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        isOpen: openAlert,\n        confirmButtonText: \"Clear form\",\n        onConfirm: function onConfirm() {\n          return _this2.clearForm();\n        },\n        cancelButtonText: \"Cancel\",\n        onCancel: function onCancel() {\n          return _this2.closeAlert();\n        },\n        intent: \"danger\",\n        icon: \"issue\",\n        portalContainer: document.getElementById('allUsers'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(H5, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Error\"), React.createElement(H5, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, errorMessage), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Do you want to clear the data?\")));\n    }\n  }]);\n\n  return CreateUserCard;\n}(Component);\n/*<StdCard\n               headerText='Create new user'\n               icon='add'\n               size='m'\n               isBodyOpen={false}\n            >\n               <Alert\n                  isOpen={openAlert}\n                  confirmButtonText='Clear'\n                  onConfirm={() => this.clearForm()}\n                  cancelButtonText='Cancel'\n                  onCancel={() => this.closeAlert()}\n                  intent='primary'\n                  portalContainer={document.getElementById(\n                     'ceateUserContainer'\n                  )}\n               >\n                  <strong>Something went wrong</strong>\n                  <p>Do you want to clear the form?</p>\n               </Alert>\n               <CreateuserForm\n                  email={email}\n                  username={username}\n                  password={password}\n                  role={role}\n                  onChange={this.onChange}\n                  onClick={this.handleSubmit}\n               />\n            </StdCard>\n            */\n\n\nexport { CreateUserCard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/CreateUserCard.jsx"],"names":["React","Component","StdCard","CreateuserForm","Client","Alert","H5","Icon","DataManagerCard","UsersTable","CreateUserCard","state","email","username","role","password","openAlert","errorMessage","onChange","e","target","id","value","setState","handleSubmit","preventDefault","errorMsg","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","success","response","data","message","alert","clearForm","closeAlert","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport StdCard from '../../../components/Card/StdCard';\nimport CreateuserForm from './CreateUserForm';\nimport Client from '../../../Modules/Client/Client';\nimport { Alert, H5, Icon } from '@blueprintjs/core';\nimport DataManagerCard from '../../../components/Card/DataManagerCard';\nimport UsersTable from './UsersTable.js/UsersTable';\n\nexport default class CreateUserCard extends Component {\n   state = {\n      email: '',\n      username: '',\n      role: 'USER',\n      password: '',\n      openAlert: false,\n      errorMessage: ''\n   };\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   closeAlert() {\n      this.setState({ openAlert: false, errorMessage: '' });\n   }\n\n   clearForm() {\n      this.setState({\n         email: '',\n         username: '',\n         role: 'USER',\n         password: '',\n         openAlert: false,\n         errorMessage: ''\n      });\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n\n      const { email, username, role, password } = this.state;\n      var errorMsg = 'Unknown Error';\n      let usr = Client.Services.UsersService.createUserDTO(\n         username,\n         email,\n         password,\n         role,\n         '5dfffe289fe19f21c85f3287', //<- temporaryfix\n         '5dfffe289fe19f21c85f3287' //<- temporaryfix\n      );\n      try {\n         let result = await Client.Services.UsersService.saveNewUser(usr);\n         if (result.status === 200) {\n            Client.Notifications.success(`User ${username} successfully saved`);\n         }\n      } catch (err) {\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${username} user`;\n            Client.Notifications.alert(errorMsg);\n         }\n         this.setState({ errorMessage: errorMsg, openAlert: true });\n      }\n   };\n   render() {\n      const {\n         email,\n         username,\n         role,\n         password,\n         errorMessage,\n         openAlert\n      } = this.state;\n      return (\n         <DataManagerCard\n            icon='th'\n            headerText='Users'\n            cardCaption='All app users'\n            addButtonText='Add new user'\n            id='allUsers'\n            modalHeaderText='Add new user'\n            table={<UsersTable></UsersTable>}\n            addForm={\n               <CreateuserForm\n                  email={email}\n                  username={username}\n                  password={password}\n                  role={role}\n                  onChange={this.onChange}\n                  onClick={this.handleSubmit}\n               />\n            }\n         >\n            <Alert\n               isOpen={openAlert}\n               confirmButtonText='Clear form'\n               onConfirm={() => this.clearForm()}\n               cancelButtonText='Cancel'\n               onCancel={() => this.closeAlert()}\n               intent='danger'\n               icon='issue'\n               portalContainer={document.getElementById('allUsers')}\n            >\n               <H5>Error</H5>\n               <H5>{errorMessage}</H5>\n               <p>Do you want to clear the data?</p>\n            </Alert>\n         </DataManagerCard>\n      );\n   }\n}\n/*<StdCard\n               headerText='Create new user'\n               icon='add'\n               size='m'\n               isBodyOpen={false}\n            >\n               <Alert\n                  isOpen={openAlert}\n                  confirmButtonText='Clear'\n                  onConfirm={() => this.clearForm()}\n                  cancelButtonText='Cancel'\n                  onCancel={() => this.closeAlert()}\n                  intent='primary'\n                  portalContainer={document.getElementById(\n                     'ceateUserContainer'\n                  )}\n               >\n                  <strong>Something went wrong</strong>\n                  <p>Do you want to clear the form?</p>\n               </Alert>\n               <CreateuserForm\n                  email={email}\n                  username={username}\n                  password={password}\n                  role={role}\n                  onChange={this.onChange}\n                  onClick={this.handleSubmit}\n               />\n            </StdCard>\n            */\n"]},"metadata":{},"sourceType":"module"}