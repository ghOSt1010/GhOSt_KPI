{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/components/Tables/ReportsTable.jsx\";\nimport React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nvar ReportsTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReportsTable, _Component);\n\n  function ReportsTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReportsTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReportsTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selected: '',\n      headers: [{\n        text: '#',\n        center: true\n      }, {\n        text: 'Project'\n      }, {\n        text: 'KPI'\n      }, {\n        text: 'Reported By'\n      }, {\n        text: 'Result',\n        center: true\n      }, {\n        text: 'Completed',\n        center: true\n      }, {\n        text: 'Status',\n        center: true\n      }, {\n        text: 'Reported At'\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ReportsTable, [{\n    key: \"renderTableBody\",\n    value: function renderTableBody() {\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, this.renderTableRows());\n    }\n  }, {\n    key: \"renderTableRows\",\n    value: function renderTableRows() {\n      var _this2 = this;\n\n      var data = this.props.data;\n      return data.map(function (report, key) {\n        return React.createElement(\"tr\", {\n          key: report._id,\n          onClick: function onClick(e) {\n            return _this2.handleSelection(e, report);\n          },\n          className: \" \".concat(_this2.state.selected._id === report._id ? 'bg-selected' : ''),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          center: true,\n          key: key,\n          value: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: report.kpi.project.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: report.kpi.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: report.reportedBy.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: report.result,\n          center: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: _this2.getCompletedValue(report.completed),\n          center: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: report.status,\n          center: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }), React.createElement(TableCell, {\n          value: new Date(report.reportedAt).toDateString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"getCompletedValue\",\n    value: function getCompletedValue(val) {\n      if (val === null) {\n        return 0;\n      }\n\n      var v = val.toFixed(2) * 100;\n      return v.toFixed(0) + '%';\n    }\n  }, {\n    key: \"handleSelection\",\n    value: function handleSelection(e, report) {\n      e.preventDefault();\n      var selected = this.state.selected;\n\n      if (selected._id !== report._id) {\n        this.props.onSelection(report, false);\n        this.setState({\n          selected: report\n        });\n        return;\n      }\n\n      this.props.onSelection({}, true);\n      this.setState({\n        selected: {}\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Table, {\n        headers: this.state.headers,\n        rows: this.renderTableRows(),\n        errorMsg: this.props.errorMsg,\n        isLoading: this.props.isLoading,\n        onRefresh: this.props.onRefresh,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ReportsTable;\n}(Component);\n\nexport { ReportsTable as default };\nReportsTable.defaultProps = {\n  data: [],\n  onRefresh: function onRefresh() {\n    return;\n  }\n};","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/components/Tables/ReportsTable.jsx"],"names":["React","Component","Table","TableCell","ReportsTable","state","selected","headers","text","center","renderTableRows","data","props","map","report","key","_id","e","handleSelection","kpi","project","name","reportedBy","result","getCompletedValue","completed","status","Date","reportedAt","toDateString","val","v","toFixed","preventDefault","onSelection","setState","errorMsg","isLoading","onRefresh","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Table from './Table';\nimport TableCell from './TableCell';\n\nexport default class ReportsTable extends Component {\n   state = {\n      selected: '',\n      headers: [\n         { text: '#', center: true },\n         { text: 'Project' },\n         { text: 'KPI' },\n         { text: 'Reported By' },\n         { text: 'Result', center: true },\n         { text: 'Completed', center: true },\n         { text: 'Status', center: true },\n         { text: 'Reported At' }\n      ]\n   };\n\n   renderTableBody() {\n      return <tbody>{this.renderTableRows()}</tbody>;\n   }\n   renderTableRows() {\n      const { data } = this.props;\n      return data.map((report, key) => {\n         return (\n            <tr\n               key={report._id}\n               onClick={e => this.handleSelection(e, report)}\n               className={` ${\n                  this.state.selected._id === report._id ? 'bg-selected' : ''\n               }`}\n            >\n               <TableCell center key={key} value={key} />\n               <TableCell value={report.kpi.project.name} />\n               <TableCell value={report.kpi.name} />\n               <TableCell value={report.reportedBy.name} />\n               <TableCell value={report.result} center />\n               <TableCell\n                  value={this.getCompletedValue(report.completed)}\n                  center\n               />\n               <TableCell value={report.status} center />\n               <TableCell value={new Date(report.reportedAt).toDateString()} />\n            </tr>\n         );\n      });\n   }\n\n   getCompletedValue(val) {\n      if (val === null) {\n         return 0;\n      }\n      let v = val.toFixed(2) * 100;\n      return v.toFixed(0) + '%';\n   }\n\n   handleSelection(e, report) {\n      e.preventDefault();\n      const { selected } = this.state;\n      if (selected._id !== report._id) {\n         this.props.onSelection(report, false);\n         this.setState({\n            selected: report\n         });\n         return;\n      }\n      this.props.onSelection({}, true);\n      this.setState({ selected: {} });\n   }\n\n   render() {\n      return (\n         <Table\n            headers={this.state.headers}\n            rows={this.renderTableRows()}\n            errorMsg={this.props.errorMsg}\n            isLoading={this.props.isLoading}\n            onRefresh={this.props.onRefresh}\n         />\n      );\n   }\n}\nReportsTable.defaultProps = {\n   data: [],\n   onRefresh: function() {\n      return;\n   }\n};\n"]},"metadata":{},"sourceType":"module"}