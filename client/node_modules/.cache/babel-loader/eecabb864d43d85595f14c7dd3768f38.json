{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/Roles/RolesCard.jsx\";\nimport React, { Component } from 'react';\nimport { Row } from 'reactstrap';\nimport { Alert, H5, Portal } from '@blueprintjs/core';\nimport EmployeeRoleForm from '../../../../components/Forms/EmployeeForms/EmployeeRoleForm';\nimport Client from '../../../../Modules/Client/Client';\nimport DataManagerCard from '../../../../components/Card/DataManagerCard';\nimport RolesTable from './RolesTable';\n\nvar RolesCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RolesCard, _Component);\n\n  function RolesCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RolesCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RolesCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      role: '',\n      roles: [],\n      isLoading: 'false',\n      openAlert: false,\n      errorMessage: '',\n      errorMsg: ''\n    };\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var role, errorMsg, roleDTO, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                role = _this.state.role;\n                errorMsg = 'Unknown Error';\n                roleDTO = Client.Services.EmployeeRolesService.createEmployeeRoleDTO(role);\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.EmployeeRolesService.createEmployeeRole(roleDTO);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"Role \".concat(role, \" successfully saved\"));\n\n                  _this.getData();\n                }\n\n                _context.next = 17;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n                console.log(_context.t0);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(role, \" role\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(RolesCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setLoading(true);\n                _context2.prev = 1;\n                this.resetErrorMsg();\n                _context2.next = 5;\n                return Client.Services.EmployeeRolesService.getEmployeeRoles();\n\n              case 5:\n                result = _context2.sent;\n                this.setState({\n                  roles: result.data\n                });\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](1);\n                this.setState({\n                  errorMsg: _context2.t0.response\n                });\n                Client.Notifications.alert('Error while loading roles list');\n\n              case 13:\n                _context2.prev = 13;\n                this.setLoading(false);\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 9, 13, 16]]);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"resetErrorMsg\",\n    value: function resetErrorMsg() {\n      this.setState({\n        errorMsg: ''\n      });\n    }\n  }, {\n    key: \"openAlert\",\n    value: function openAlert(msg) {\n      this.setState({\n        openAlert: true,\n        errorMessage: msg\n      });\n    }\n  }, {\n    key: \"closeAlert\",\n    value: function closeAlert() {\n      this.setState({\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        role: '',\n        openAlert: false,\n        errorMessage: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          role = _this$state.role,\n          errorMessage = _this$state.errorMessage,\n          openAlert = _this$state.openAlert,\n          roles = _this$state.roles;\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(DataManagerCard, {\n        icon: \"form\",\n        cardSize: \"xl\",\n        headerText: \"Employee Roles\",\n        cardCaption: \"All Roles\",\n        addButtonText: \"Add new Role\",\n        id: \"allRoles\",\n        modalHeaderText: \"Add new employee role\",\n        onRefresh: function onRefresh() {\n          return _this2.getData();\n        },\n        table: React.createElement(RolesTable, {\n          roles: roles,\n          onRefresh: function onRefresh() {\n            return _this2.getData();\n          },\n          isLoading: isLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }),\n        addForm: React.createElement(EmployeeRoleForm, {\n          onChange: this.onChange,\n          onSubmit: this.handleSubmit,\n          role: role,\n          buttonCaption: \"Save\",\n          onClear: function onClear() {\n            return _this2.clearForm();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        isOpen: openAlert,\n        confirmButtonText: \"Clear form\",\n        onConfirm: function onConfirm() {\n          return _this2.clearForm();\n        },\n        cancelButtonText: \"Cancel\",\n        onCancel: function onCancel() {\n          return _this2.closeAlert();\n        },\n        intent: \"danger\",\n        icon: \"issue\",\n        ussePortal: React.createElement(Portal, {\n          container: document.getElementById('allRoles'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(H5, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, errorMessage), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Do you want to clear the data?\"))));\n    }\n  }]);\n\n  return RolesCard;\n}(Component);\n\nexport { RolesCard as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/views/AdminPanel/components/Roles/RolesCard.jsx"],"names":["React","Component","Row","Alert","H5","Portal","EmployeeRoleForm","Client","DataManagerCard","RolesTable","RolesCard","state","role","roles","isLoading","openAlert","errorMessage","errorMsg","onChange","e","target","id","value","setState","handleSubmit","preventDefault","roleDTO","Services","EmployeeRolesService","createEmployeeRoleDTO","createEmployeeRole","result","status","Notifications","success","getData","console","log","response","data","message","alert","error","setLoading","resetErrorMsg","getEmployeeRoles","loading","msg","clearForm","closeAlert","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row } from 'reactstrap';\nimport { Alert, H5, Portal } from '@blueprintjs/core';\nimport EmployeeRoleForm from '../../../../components/Forms/EmployeeForms/EmployeeRoleForm';\nimport Client from '../../../../Modules/Client/Client';\nimport DataManagerCard from '../../../../components/Card/DataManagerCard';\nimport RolesTable from './RolesTable';\n\nexport default class RolesCard extends Component {\n   state = {\n      role: '',\n      roles: [],\n      isLoading: 'false',\n      openAlert: false,\n      errorMessage: '',\n      errorMsg: ''\n   };\n\n   componentDidMount() {\n      this.getData();\n   }\n\n   async getData() {\n      this.setLoading(true);\n      var result;\n      try {\n         this.resetErrorMsg();\n         result = await Client.Services.EmployeeRolesService.getEmployeeRoles();\n         this.setState({\n            roles: result.data\n         });\n      } catch (err) {\n         this.setState({ errorMsg: err.response });\n         Client.Notifications.alert('Error while loading roles list');\n      } finally {\n         this.setLoading(false);\n      }\n   }\n   setLoading(loading) {\n      this.setState({\n         isLoading: loading\n      });\n   }\n   resetErrorMsg() {\n      this.setState({\n         errorMsg: ''\n      });\n   }\n   onChange = e => {\n      const state = this.state;\n      state[e.target.id] = e.target.value;\n      this.setState(state);\n   };\n\n   openAlert(msg) {\n      this.setState({ openAlert: true, errorMessage: msg });\n   }\n   closeAlert() {\n      this.setState({ openAlert: false, errorMessage: '' });\n   }\n\n   clearForm() {\n      this.setState({\n         role: '',\n         openAlert: false,\n         errorMessage: ''\n      });\n   }\n\n   handleSubmit = async e => {\n      e.preventDefault();\n      const { role } = this.state;\n      var errorMsg = 'Unknown Error';\n      let roleDTO = Client.Services.EmployeeRolesService.createEmployeeRoleDTO(\n         role\n      );\n      var result;\n      try {\n         result = await Client.Services.EmployeeRolesService.createEmployeeRole(\n            roleDTO\n         );\n         if (result.status === 200) {\n            Client.Notifications.success(`Role ${role} successfully saved`);\n            this.getData();\n         }\n      } catch (err) {\n         console.log(err);\n         if (err.response.status === 409) {\n            errorMsg = `Error: ${err.response.data.message}`;\n            Client.Notifications.alert(errorMsg);\n         }\n         if (err.response.status !== 409) {\n            errorMsg = `Error:  while saving: ${role} role`;\n            Client.Notifications.error(errorMsg);\n         }\n         this.openAlert(errorMsg);\n      }\n   };\n\n   render() {\n      const { isLoading, role, errorMessage, openAlert, roles } = this.state;\n      return (\n         <Row>\n            <DataManagerCard\n               icon='form'\n               cardSize='xl'\n               headerText='Employee Roles'\n               cardCaption='All Roles'\n               addButtonText='Add new Role'\n               id='allRoles'\n               modalHeaderText='Add new employee role'\n               onRefresh={() => this.getData()}\n               table={\n                  <RolesTable\n                     roles={roles}\n                     onRefresh={() => this.getData()}\n                     isLoading={isLoading}\n                  />\n               }\n               addForm={\n                  <EmployeeRoleForm\n                     onChange={this.onChange}\n                     onSubmit={this.handleSubmit}\n                     role={role}\n                     buttonCaption='Save'\n                     onClear={() => this.clearForm()}\n                  />\n               }\n            >\n               <Alert\n                  isOpen={openAlert}\n                  confirmButtonText='Clear form'\n                  onConfirm={() => this.clearForm()}\n                  cancelButtonText='Cancel'\n                  onCancel={() => this.closeAlert()}\n                  intent='danger'\n                  icon='issue'\n                  ussePortal={\n                     <Portal container={document.getElementById('allRoles')} />\n                  }\n               >\n                  <H5>{errorMessage}</H5>\n                  <strong>Do you want to clear the data?</strong>\n               </Alert>\n            </DataManagerCard>\n         </Row>\n      );\n   }\n}\n"]},"metadata":{},"sourceType":"module"}