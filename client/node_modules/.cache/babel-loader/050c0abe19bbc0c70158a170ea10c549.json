{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport API from '../../API';\nimport Request from '../../Requests/Request';\n\nvar EmployeesService =\n/*#__PURE__*/\nfunction () {\n  function EmployeesService() {\n    _classCallCheck(this, EmployeesService);\n  }\n\n  _createClass(EmployeesService, null, [{\n    key: \"getEmployees\",\n    value: function () {\n      var _getEmployees = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Request.get(this.EMPLOYEES_ROUTES.GET_EMPLOYEES).then(function (result) {\n                  return result.data;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getEmployees() {\n        return _getEmployees.apply(this, arguments);\n      }\n\n      return getEmployees;\n    }()\n  }, {\n    key: \"getEmployeeById\",\n    value: function () {\n      var _getEmployeeById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Request.get(this.EMPLOYEES_ROUTES.GET_EMPLOYEE_BY_ID + id).then(function (result) {\n                  return result.data;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getEmployeeById(_x) {\n        return _getEmployeeById.apply(this, arguments);\n      }\n\n      return getEmployeeById;\n    }()\n    /*\n    static async getEmployeeByName(name) {\n       return await Request.get(\n          this.EMPLOYEES_ROUTES.GET_EMPLOYEE_BY_NAME + name\n       )\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async createEmployee(employee) {\n       return await Request.post(this.EMPLOYEES_ROUTES.CREATE_EMPLOYEE, employee)\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async updateEmployee(employee) {\n       return await Request.put(this.EMPLOYEES_ROUTES.UPDATE_EMPLOYEE, employee)\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async deleteEmployeeById(id) {\n       return await Request.delete(\n          this.EMPLOYEES_ROUTES.DELETE_EMPLOYEE_BY_ID + id\n       )\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async getEmployeesRoles() {\n       return await Request.get(this.EMPLOYEES_ROLES_ROUTES.GET_EMPLOYEES_ROLES)\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async getEmployeesRoleById(id) {\n       return await Request.get(\n          this.EMPLOYEES_ROLES_ROUTES.GET_EMPLOYEES_ROLE_BY_ID + id\n       )\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async createEmployeeRole(role) {\n       return await Request.post(\n          this.EMPLOYEES_ROLES_ROUTES.CREATE_EMPLOYEES_ROLE,\n          role\n       )\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n     static async deleteEmployeeRoleById(id) {\n       return await Request.delete(\n          this.EMPLOYEES_ROLES_ROUTES.DELETE_EMPLOYEES_ROLE_BY_ID + id\n       )\n          .then(result => {\n             return result.data;\n          })\n          .catch(err => {\n             return err;\n          });\n    }\n    */\n\n  }]);\n\n  return EmployeesService;\n}();\n\nEmployeesService.EMPLOYEES_ROUTES = API.ROUTES.EMPLOYEES;\nEmployeesService.EMPLOYEES_ROLES_ROUTES = API.ROUTES.EMPLOYEES_ROLES;\nexport { EmployeesService as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/Client/API/Services/EmployeesService/EmployeesService.js"],"names":["API","Request","EmployeesService","get","EMPLOYEES_ROUTES","GET_EMPLOYEES","then","result","data","catch","err","id","GET_EMPLOYEE_BY_ID","ROUTES","EMPLOYEES","EMPLOYEES_ROLES_ROUTES","EMPLOYEES_ROLES"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;IAEqBC,gB;;;;;;;;;;;;;;;;;;uBAKFD,OAAO,CAACE,GAAR,CAAY,KAAKC,gBAAL,CAAsBC,aAAlC,EACTC,IADS,CACJ,UAAAC,MAAM,EAAI;AACb,yBAAOA,MAAM,CAACC,IAAd;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;iDASaC,E;;;;;;uBACbV,OAAO,CAACE,GAAR,CAAY,KAAKC,gBAAL,CAAsBQ,kBAAtB,GAA2CD,EAAvD,EACTL,IADS,CACJ,UAAAC,MAAM,EAAI;AACb,yBAAOA,MAAM,CAACC,IAAd;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAQhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvBkBR,gB,CACXE,gB,GAAmBJ,GAAG,CAACa,MAAJ,CAAWC,S;AADnBZ,gB,CAEXa,sB,GAAyBf,GAAG,CAACa,MAAJ,CAAWG,e;SAFzBd,gB","sourcesContent":["import API from '../../API';\nimport Request from '../../Requests/Request';\n\nexport default class EmployeesService {\n   static EMPLOYEES_ROUTES = API.ROUTES.EMPLOYEES;\n   static EMPLOYEES_ROLES_ROUTES = API.ROUTES.EMPLOYEES_ROLES;\n\n   static async getEmployees() {\n      return await Request.get(this.EMPLOYEES_ROUTES.GET_EMPLOYEES)\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async getEmployeeById(id) {\n      return await Request.get(this.EMPLOYEES_ROUTES.GET_EMPLOYEE_BY_ID + id)\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n   /*\n   static async getEmployeeByName(name) {\n      return await Request.get(\n         this.EMPLOYEES_ROUTES.GET_EMPLOYEE_BY_NAME + name\n      )\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async createEmployee(employee) {\n      return await Request.post(this.EMPLOYEES_ROUTES.CREATE_EMPLOYEE, employee)\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async updateEmployee(employee) {\n      return await Request.put(this.EMPLOYEES_ROUTES.UPDATE_EMPLOYEE, employee)\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async deleteEmployeeById(id) {\n      return await Request.delete(\n         this.EMPLOYEES_ROUTES.DELETE_EMPLOYEE_BY_ID + id\n      )\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async getEmployeesRoles() {\n      return await Request.get(this.EMPLOYEES_ROLES_ROUTES.GET_EMPLOYEES_ROLES)\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async getEmployeesRoleById(id) {\n      return await Request.get(\n         this.EMPLOYEES_ROLES_ROUTES.GET_EMPLOYEES_ROLE_BY_ID + id\n      )\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async createEmployeeRole(role) {\n      return await Request.post(\n         this.EMPLOYEES_ROLES_ROUTES.CREATE_EMPLOYEES_ROLE,\n         role\n      )\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   static async deleteEmployeeRoleById(id) {\n      return await Request.delete(\n         this.EMPLOYEES_ROLES_ROUTES.DELETE_EMPLOYEES_ROLE_BY_ID + id\n      )\n         .then(result => {\n            return result.data;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n   */\n}\n"]},"metadata":{},"sourceType":"module"}