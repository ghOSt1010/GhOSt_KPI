{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx\";\nimport React, { Component } from 'react';\nimport UsersCard from './components/Users/UsersCard';\nimport { Tabs, Tab, Button, H2, ButtonGroup, Divider } from '@blueprintjs/core';\nimport UsersTable from './components/Users/UsersTable';\nimport Client from '../../Modules/Client/Client';\nimport UserDialog from './components/Users/UserDialog';\n\nvar AdminPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminPanel, _Component);\n\n  function AdminPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdminPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdminPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTabID: 'Users',\n      selectedTabId: 'Users',\n      isLoading: true,\n      users: [],\n      isUserDialogOpen: false,\n      username: '',\n      email: '',\n      password: '',\n      usertype: ''\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, email, username, usertype, password, errorMsg, usr, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _this$state = _this.state, email = _this$state.email, username = _this$state.username, usertype = _this$state.usertype, password = _this$state.password;\n                errorMsg = 'Unknown Error';\n                usr = Client.Services.UsersService.createUserDTO(username, email, password, usertype);\n                _context.prev = 4;\n                _context.next = 7;\n                return Client.Services.UsersService.saveNewUser(usr);\n\n              case 7:\n                result = _context.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success(\"User \".concat(username, \" successfully saved\"));\n\n                  _this.getUsersData();\n                }\n\n                _context.next = 16;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (_context.t0.response.status === 409) {\n                  errorMsg = \"Error: \".concat(_context.t0.response.data.message);\n                  Client.Notifications.alert(errorMsg);\n                }\n\n                if (_context.t0.response.status !== 409) {\n                  errorMsg = \"Error:  while saving: \".concat(username, \" user\");\n                  Client.Notifications.error(errorMsg);\n                }\n\n                _this.openAlert(errorMsg);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onChange = function (e) {\n      var state = _this.state;\n      state[e.target.id] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.handleTabChange = function (activeTabID) {\n      _this.setState({\n        activeTabID: activeTabID,\n        selectedTabId: activeTabID\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AdminPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsersData();\n    }\n  }, {\n    key: \"getUsersData\",\n    value: function () {\n      var _getUsersData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setLoading(true);\n                _context2.prev = 1;\n                _context2.next = 4;\n                return Client.Services.UsersService.getUsers();\n\n              case 4:\n                result = _context2.sent;\n                this.setState({\n                  users: result.data\n                });\n                _context2.next = 13;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                alert(_context2.t0);\n                this.setState({\n                  errorMsg: _context2.t0.response\n                });\n                Client.Notifications.alert('Error while loading users list');\n\n              case 13:\n                _context2.prev = 13;\n                this.setLoading(false);\n                return _context2.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8, 13, 16]]);\n      }));\n\n      function getUsersData() {\n        return _getUsersData.apply(this, arguments);\n      }\n\n      return getUsersData;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                this.resetErrorMsg();\n                _context3.next = 4;\n                return Client.Services.UsersService.deleteUser(id);\n\n              case 4:\n                result = _context3.sent;\n\n                if (result.status === 200) {\n                  Client.Notifications.success('User removed successfully');\n                }\n\n                _context3.next = 12;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                this.setState({\n                  errorMsg: _context3.t0.response.status\n                });\n                Client.Notifications.alert('Error, cannot delete user');\n\n              case 12:\n                _context3.prev = 12;\n                this.props.onRefresh();\n                return _context3.finish(12);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 8, 12, 15]]);\n      }));\n\n      function deleteUser(_x2) {\n        return _deleteUser.apply(this, arguments);\n      }\n\n      return deleteUser;\n    }()\n  }, {\n    key: \"openUserDialog\",\n    value: function openUserDialog() {\n      this.setState({\n        isUserDialogOpen: true\n      });\n    }\n  }, {\n    key: \"closeUserDialog\",\n    value: function closeUserDialog() {\n      this.setState({\n        isUserDialogOpen: false\n      });\n    }\n  }, {\n    key: \"setLoading\",\n    value: function setLoading(loading) {\n      this.setState({\n        isLoading: loading\n      });\n    }\n  }, {\n    key: \"renderControlls\",\n    value: function renderControlls() {\n      var _this2 = this;\n\n      if (this.state.selectedTabId === 'Employees') {\n        return React.createElement(ButtonGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(Button, {\n          icon: \"edit\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"add\",\n          small: true,\n          minimal: true,\n          onClick: function onClick() {\n            return _this2.openUserDialog();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"trash\",\n          small: true,\n          minimal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }), React.createElement(Button, {\n          icon: \"refresh\",\n          small: true,\n          minimal: true,\n          onClick: function onClick() {\n            return _this2.getUsersData();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          users = _this$state2.users,\n          isLoading = _this$state2.isLoading;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(H2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Admin Panel\")), React.createElement(Tabs, {\n        onChange: this.handleTabChange,\n        selectedTabId: this.state.selectedTabId,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        id: \"Users\",\n        title: \"Users\",\n        panel: React.createElement(UsersCard, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        id: \"Employees\",\n        title: \"Employees\",\n        panel: React.createElement(UsersTable, {\n          usersData: users,\n          onRefresh: function onRefresh() {\n            return _this3.getUsersData();\n          },\n          isLoading: isLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Tabs.Expander, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), this.renderControlls()), React.createElement(UserDialog, {\n        isOpen: this.state.isUserDialogOpen,\n        toOpen: function toOpen() {\n          return _this3.openUserDialog();\n        },\n        toClose: function toClose() {\n          return _this3.closeUserDialog();\n        },\n        onChange: this.onChange,\n        onClick: this.handleSubmit,\n        buttonCaption: \"Create\",\n        onClear: function onClear() {\n          return _this3.clearForm();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"working\"));\n    }\n  }]);\n\n  return AdminPanel;\n}(Component);\n\nexport { AdminPanel as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/views/AdminPanel/AdminPanel.jsx"],"names":["React","Component","UsersCard","Tabs","Tab","Button","H2","ButtonGroup","Divider","UsersTable","Client","UserDialog","AdminPanel","state","activeTabID","selectedTabId","isLoading","users","isUserDialogOpen","username","email","password","usertype","handleSubmit","e","preventDefault","errorMsg","usr","Services","UsersService","createUserDTO","saveNewUser","result","status","Notifications","success","getUsersData","response","data","message","alert","error","openAlert","onChange","target","id","value","setState","handleTabChange","setLoading","getUsers","resetErrorMsg","deleteUser","props","onRefresh","loading","openUserDialog","renderControlls","closeUserDialog","clearForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport UsersCard from './components/Users/UsersCard';\n\nimport { Tabs, Tab, Button, H2, ButtonGroup, Divider } from '@blueprintjs/core';\nimport UsersTable from './components/Users/UsersTable';\nimport Client from '../../Modules/Client/Client';\nimport UserDialog from './components/Users/UserDialog';\n\nexport default class AdminPanel extends Component {\n                  state = {\n                     activeTabID: 'Users',\n                     selectedTabId: 'Users',\n                     isLoading: true,\n                     users: [],\n                     isUserDialogOpen: false,\n                     username: '',\n                     email: '',\n                     password: '',\n                     usertype: ''\n                  };\n\n                  componentDidMount() {\n                     this.getUsersData();\n                  }\n\n                  async getUsersData() {\n                     this.setLoading(true);\n                     var result;\n                     try {\n                        //this.resetErrorMsg();\n                        result = await Client.Services.UsersService.getUsers();\n                        this.setState({\n                           users: result.data\n                        });\n                     } catch (err) {\n                        alert(err);\n                        this.setState({ errorMsg: err.response });\n                        Client.Notifications.alert(\n                           'Error while loading users list'\n                        );\n                     } finally {\n                        this.setLoading(false);\n                     }\n                  }\n\n                  async deleteUser(id) {\n                     var result;\n                     try {\n                        this.resetErrorMsg();\n                        result = await Client.Services.UsersService.deleteUser(\n                           id\n                        );\n                        if (result.status === 200) {\n                           Client.Notifications.success(\n                              'User removed successfully'\n                           );\n                        }\n                     } catch (err) {\n                        this.setState({ errorMsg: err.response.status });\n                        Client.Notifications.alert('Error, cannot delete user');\n                     } finally {\n                        this.props.onRefresh();\n                     }\n                  }\n\n                  handleSubmit = async e => {\n                     e.preventDefault();\n                     const { email, username, usertype, password } = this.state;\n                     var errorMsg = 'Unknown Error';\n                     let usr = Client.Services.UsersService.createUserDTO(\n                        username,\n                        email,\n                        password,\n                        usertype\n                     );\n                     try {\n                        let result = await Client.Services.UsersService.saveNewUser(\n                           usr\n                        );\n                        if (result.status === 200) {\n                           Client.Notifications.success(\n                              `User ${username} successfully saved`\n                           );\n                           this.getUsersData();\n                        }\n                     } catch (err) {\n                        if (err.response.status === 409) {\n                           errorMsg = `Error: ${err.response.data.message}`;\n                           Client.Notifications.alert(errorMsg);\n                        }\n                        if (err.response.status !== 409) {\n                           errorMsg = `Error:  while saving: ${username} user`;\n                           Client.Notifications.error(errorMsg);\n                        }\n                        this.openAlert(errorMsg);\n                     }\n                  };\n\n                  onChange = e => {\n                     const state = this.state;\n                     state[e.target.id] = e.target.value;\n                     this.setState(state);\n                  };\n\n                  openUserDialog() {\n                     this.setState({\n                        isUserDialogOpen: true\n                     });\n                  }\n                  closeUserDialog() {\n                     this.setState({\n                        isUserDialogOpen: false\n                     });\n                  }\n\n                  setLoading(loading) {\n                     this.setState({\n                        isLoading: loading\n                     });\n                  }\n\n                  handleTabChange = activeTabID => {\n                     this.setState({\n                        activeTabID: activeTabID,\n                        selectedTabId: activeTabID\n                     });\n                  };\n\n                  renderControlls() {\n                     if (this.state.selectedTabId === 'Employees') {\n                        return (\n                           <ButtonGroup>\n                              <Button icon='edit' small minimal />\n                              <Button\n                                 icon='add'\n                                 small\n                                 minimal\n                                 onClick={() => this.openUserDialog()}\n                              />\n                              <Button icon='trash' small minimal />\n                              <Divider />\n                              <Button\n                                 icon='refresh'\n                                 small\n                                 minimal\n                                 onClick={() => this.getUsersData()}\n                              />\n                           </ButtonGroup>\n                        );\n                     }\n                  }\n\n                  render() {\n                     const { users, isLoading } = this.state;\n\n                     return (\n                        <div>\n                           <div className='mt-2'>\n                              <H2>Admin Panel</H2>\n                           </div>\n                           <Tabs\n                              onChange={this.handleTabChange}\n                              selectedTabId={this.state.selectedTabId}\n                              large\n                           >\n                              <Tab\n                                 id='Users'\n                                 title='Users'\n                                 panel={<UsersCard />}\n                              />\n                              <Tab\n                                 id='Employees'\n                                 title='Employees'\n                                 panel={\n                                    <UsersTable\n                                       usersData={users}\n                                       onRefresh={() => this.getUsersData()}\n                                       isLoading={isLoading}\n                                    />\n                                 }\n                              />\n                              <Tabs.Expander />\n                              {this.renderControlls()}\n                           </Tabs>\n                           <UserDialog\n                              isOpen={this.state.isUserDialogOpen}\n                              toOpen={() => this.openUserDialog()}\n                              toClose={() => this.closeUserDialog()}\n                              onChange={this.onChange}\n                              onClick={this.handleSubmit}\n                              buttonCaption='Create'\n                              onClear={() => this.clearForm()}\n                           >\n                              working\n                           </UserDialog>\n                        </div>\n                     );\n                  }\n               }\n"]},"metadata":{},"sourceType":"module"}