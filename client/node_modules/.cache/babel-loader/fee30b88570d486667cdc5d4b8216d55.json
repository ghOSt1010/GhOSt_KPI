{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { EditableText, Utils as CoreUtils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../common/classes\";\n\nvar EditableName =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(EditableName, _super);\n\n  function EditableName(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.handleEdit = function () {\n      _this.setState({\n        isEditing: true,\n        dirtyName: _this.state.savedName\n      });\n    };\n\n    _this.handleCancel = function (value) {\n      // don't strictly need to clear the dirtyName, but it's better hygiene\n      _this.setState({\n        isEditing: false,\n        dirtyName: undefined\n      });\n\n      _this.invokeCallback(_this.props.onCancel, value);\n    };\n\n    _this.handleChange = function (value) {\n      _this.setState({\n        dirtyName: value\n      });\n\n      _this.invokeCallback(_this.props.onChange, value);\n    };\n\n    _this.handleConfirm = function (value) {\n      _this.setState({\n        isEditing: false,\n        savedName: value,\n        dirtyName: undefined\n      });\n\n      _this.invokeCallback(_this.props.onConfirm, value);\n    };\n\n    _this.state = {\n      dirtyName: props.name,\n      isEditing: false,\n      savedName: props.name\n    };\n    return _this;\n  }\n\n  EditableName.prototype.componentDidUpdate = function (prevProps) {\n    var name = this.props.name;\n\n    if (name !== prevProps.name) {\n      this.setState({\n        savedName: name,\n        dirtyName: name\n      });\n    }\n  };\n\n  EditableName.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        intent = _a.intent,\n        name = _a.name;\n    var _b = this.state,\n        isEditing = _b.isEditing,\n        dirtyName = _b.dirtyName,\n        savedName = _b.savedName;\n    return React.createElement(EditableText, {\n      className: classNames(className, Classes.TABLE_EDITABLE_NAME),\n      defaultValue: name,\n      intent: intent,\n      minWidth: null,\n      onCancel: this.handleCancel,\n      onChange: this.handleChange,\n      onConfirm: this.handleConfirm,\n      onEdit: this.handleEdit,\n      placeholder: \"\",\n      selectAllOnFocus: true,\n      value: isEditing ? dirtyName : savedName\n    });\n  };\n\n  EditableName.prototype.invokeCallback = function (callback, value) {\n    var index = this.props.index;\n    CoreUtils.safeInvoke(callback, value, index);\n  };\n\n  return EditableName;\n}(React.PureComponent);\n\nexport { EditableName };","map":null,"metadata":{},"sourceType":"module"}