{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport API from '../../API';\nimport Request from '../../Requests/Request';\nimport Report from './DTO/Report';\n/**\n * @author Rafal Cymbalsita\n * @class ReportsService\n * @description ReportsService : HTTP communication layer\n * @static\n */\n\nvar ReportsService =\n/*#__PURE__*/\nfunction () {\n  function ReportsService() {\n    _classCallCheck(this, ReportsService);\n  }\n\n  _createClass(ReportsService, null, [{\n    key: \"createReportDTO\",\n\n    /**\n     * @public\n     * @param {String} Name\n     * @param {ObjectID} Manager\n     *\n     */\n    value: function createReportDTO(kpi, reportedBy, result, completed, status, reportedAt) {\n      return new Report(kpi, reportedBy, result, completed, status, reportedAt).getReportDTO();\n    }\n    /**\n     * @public\n     * @param {Report} Report\n     * @returns - HTTP Response\n     */\n\n  }, {\n    key: \"saveReport\",\n    value: function () {\n      var _saveReport = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(Report) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Request.post(API.ROUTES.REPORTS.CREATE_REPORT, Report).then(function (result) {\n                  return result;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function saveReport(_x) {\n        return _saveReport.apply(this, arguments);\n      }\n\n      return saveReport;\n    }()\n    /**\n     * @public\n     * @param {Report} Report\n     * @returns - HTTP Response\n     */\n\n  }, {\n    key: \"updateReport\",\n    value: function () {\n      var _updateReport = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(Report) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Request.put(API.ROUTES.REPORTS.UPDATE_REPORT, Report).then(function (result) {\n                  return result;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateReport(_x2) {\n        return _updateReport.apply(this, arguments);\n      }\n\n      return updateReport;\n    }()\n    /**\n     * @public\n     * @param {id} Report._id\n     * @returns - HTTP Response\n     */\n\n  }, {\n    key: \"deleteReportByID\",\n    value: function () {\n      var _deleteReportByID = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Request.delete(API.ROUTES.REPORTS.DELETE_REPORT_BY_ID + id).then(function (result) {\n                  return result;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function deleteReportByID(_x3) {\n        return _deleteReportByID.apply(this, arguments);\n      }\n\n      return deleteReportByID;\n    }()\n    /**\n     * @public\n     * @returns - HTTP Response\n     * @throws - HTTP Axios Error\n     */\n\n  }, {\n    key: \"getReports\",\n    value: function () {\n      var _getReports = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Request.get(API.ROUTES.REPORTS.GET_REPORTS).then(function (result) {\n                  return result;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getReports() {\n        return _getReports.apply(this, arguments);\n      }\n\n      return getReports;\n    }()\n    /**\n     * @public\n     * @param {id} Report._id\n     * @returns - HTTP Response\n     */\n\n  }, {\n    key: \"getReportById\",\n    value: function () {\n      var _getReportById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_ID + id).then(function (result) {\n                  return result;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getReportById(_x4) {\n        return _getReportById.apply(this, arguments);\n      }\n\n      return getReportById;\n    }()\n  }, {\n    key: \"getReportByKPIID\",\n    value: function () {\n      var _getReportByKPIID = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(kpiID) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_KPI_ID + kpiID).then(function (result) {\n                  return result;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getReportByKPIID(_x5) {\n        return _getReportByKPIID.apply(this, arguments);\n      }\n\n      return getReportByKPIID;\n    }()\n  }]);\n\n  return ReportsService;\n}();\n\nexport { ReportsService as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/Modules/Client/API/Services/ReportingService/ReportingService.js"],"names":["API","Request","Report","ReportsService","kpi","reportedBy","result","completed","status","reportedAt","getReportDTO","post","ROUTES","REPORTS","CREATE_REPORT","then","catch","err","put","UPDATE_REPORT","id","delete","DELETE_REPORT_BY_ID","get","GET_REPORTS","GET_REPORT_BY_ID","kpiID","GET_REPORT_BY_KPI_ID"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA;;;;;;;IAMqBC,c;;;;;;;;;;AAClB;;;;;;oCAOGC,G,EACAC,U,EACAC,M,EACAC,S,EACAC,M,EACAC,U,EACD;AACC,aAAO,IAAIP,MAAJ,CACJE,GADI,EAEJC,UAFI,EAGJC,MAHI,EAIJC,SAJI,EAKJC,MALI,EAMJC,UANI,EAOLC,YAPK,EAAP;AAQF;AAED;;;;;;;;;;;gDAKwBR,M;;;;;;uBACRD,OAAO,CAACU,IAAR,CAAaX,GAAG,CAACY,MAAJ,CAAWC,OAAX,CAAmBC,aAAhC,EAA+CZ,MAA/C,EACTa,IADS,CACJ,UAAAT,MAAM,EAAI;AACb,yBAAOA,MAAP;AACF,iBAHS,EAITU,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;iDAK0Bf,M;;;;;;uBACVD,OAAO,CAACiB,GAAR,CAAYlB,GAAG,CAACY,MAAJ,CAAWC,OAAX,CAAmBM,aAA/B,EAA8CjB,MAA9C,EACTa,IADS,CACJ,UAAAT,MAAM,EAAI;AACb,yBAAOA,MAAP;AACF,iBAHS,EAITU,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;iDAK8BG,E;;;;;;uBACdnB,OAAO,CAACoB,MAAR,CAAerB,GAAG,CAACY,MAAJ,CAAWC,OAAX,CAAmBS,mBAAnB,GAAyCF,EAAxD,EACTL,IADS,CACJ,UAAAT,MAAM,EAAI;AACb,yBAAOA,MAAP;AACF,iBAHS,EAITU,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;;;;;;;uBAMgBhB,OAAO,CAACsB,GAAR,CAAYvB,GAAG,CAACY,MAAJ,CAAWC,OAAX,CAAmBW,WAA/B,EACTT,IADS,CACJ,UAAAT,MAAM,EAAI;AACb,yBAAOA,MAAP;AACF,iBAHS,EAITU,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;iDAK2BG,E;;;;;;uBACXnB,OAAO,CAACsB,GAAR,CAAYvB,GAAG,CAACY,MAAJ,CAAWC,OAAX,CAAmBY,gBAAnB,GAAsCL,EAAlD,EACTL,IADS,CACJ,UAAAT,MAAM,EAAI;AACb,yBAAOA,MAAP;AACF,iBAHS,EAITU,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;iDAScS,K;;;;;;uBACdzB,OAAO,CAACsB,GAAR,CAAYvB,GAAG,CAACY,MAAJ,CAAWC,OAAX,CAAmBc,oBAAnB,GAA0CD,KAAtD,EACTX,IADS,CACJ,UAAAT,MAAM,EAAI;AACb,yBAAOA,MAAP;AACF,iBAHS,EAITU,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;SArGEd,c","sourcesContent":["import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Report from './DTO/Report';\n\n/**\n * @author Rafal Cymbalsita\n * @class ReportsService\n * @description ReportsService : HTTP communication layer\n * @static\n */\nexport default class ReportsService {\n   /**\n    * @public\n    * @param {String} Name\n    * @param {ObjectID} Manager\n    *\n    */\n   static createReportDTO(\n      kpi,\n      reportedBy,\n      result,\n      completed,\n      status,\n      reportedAt\n   ) {\n      return new Report(\n         kpi,\n         reportedBy,\n         result,\n         completed,\n         status,\n         reportedAt\n      ).getReportDTO();\n   }\n\n   /**\n    * @public\n    * @param {Report} Report\n    * @returns - HTTP Response\n    */\n   static async saveReport(Report) {\n      return await Request.post(API.ROUTES.REPORTS.CREATE_REPORT, Report)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {Report} Report\n    * @returns - HTTP Response\n    */\n   static async updateReport(Report) {\n      return await Request.put(API.ROUTES.REPORTS.UPDATE_REPORT, Report)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} Report._id\n    * @returns - HTTP Response\n    */\n   static async deleteReportByID(id) {\n      return await Request.delete(API.ROUTES.REPORTS.DELETE_REPORT_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @returns - HTTP Response\n    * @throws - HTTP Axios Error\n    */\n   static async getReports() {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORTS)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   /**\n    * @public\n    * @param {id} Report._id\n    * @returns - HTTP Response\n    */\n   static async getReportById(id) {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_ID + id)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n\n   static async getReportByKPIID(kpiID) {\n      return await Request.get(API.ROUTES.REPORTS.GET_REPORT_BY_KPI_ID + kpiID)\n         .then(result => {\n            return result;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n}\n"]},"metadata":{},"sourceType":"module"}