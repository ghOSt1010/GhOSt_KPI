{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractPureComponent2 } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { Utils } from \"../common/index\";\nimport { Orientation, ResizeHandle } from \"./resizeHandle\";\n\nvar Resizable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Resizable, _super);\n\n  function Resizable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = Resizable_1.getDerivedStateFromProps(_this.props, null);\n\n    _this.onResizeMove = function (_offset, delta) {\n      _this.offsetSize(delta);\n\n      if (_this.props.onSizeChanged != null) {\n        _this.props.onSizeChanged(_this.state.size);\n      }\n    };\n\n    _this.onResizeEnd = function (_offset) {\n      // reset \"unclamped\" size on end\n      _this.setState({\n        unclampedSize: _this.state.size\n      });\n\n      if (_this.props.onResizeEnd != null) {\n        _this.props.onResizeEnd(_this.state.size);\n      }\n    };\n\n    return _this;\n  }\n\n  Resizable_1 = Resizable;\n\n  Resizable.getDerivedStateFromProps = function (_a, prevState) {\n    var size = _a.size;\n\n    if (prevState == null) {\n      return {\n        size: size,\n        unclampedSize: size\n      };\n    }\n\n    return null;\n  };\n\n  Resizable.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.size !== this.props.size) {\n      this.setState(Resizable_1.getDerivedStateFromProps(this.props, null));\n    }\n  };\n\n  Resizable.prototype.render = function () {\n    var child = React.Children.only(this.props.children);\n\n    var style = tslib_1.__assign({}, child.props.style, this.getStyle());\n\n    if (this.props.isResizable === false) {\n      return React.cloneElement(child, {\n        style: style\n      });\n    }\n\n    var resizeHandle = this.renderResizeHandle();\n    return React.cloneElement(child, {\n      style: style,\n      resizeHandle: resizeHandle\n    });\n  };\n\n  Resizable.prototype.renderResizeHandle = function () {\n    var _a = this.props,\n        onLayoutLock = _a.onLayoutLock,\n        onDoubleClick = _a.onDoubleClick,\n        orientation = _a.orientation;\n    return React.createElement(ResizeHandle, {\n      key: \"resize-handle\",\n      onDoubleClick: onDoubleClick,\n      onLayoutLock: onLayoutLock,\n      onResizeEnd: this.onResizeEnd,\n      onResizeMove: this.onResizeMove,\n      orientation: orientation\n    });\n  };\n  /**\n   * Returns the CSS style to apply to the child element given the state's\n   * size value.\n   */\n\n\n  Resizable.prototype.getStyle = function () {\n    if (this.props.orientation === Orientation.VERTICAL) {\n      return {\n        flexBasis: this.state.size + \"px\",\n        minWidth: \"0px\",\n        width: this.state.size + \"px\"\n      };\n    } else {\n      return {\n        flexBasis: this.state.size + \"px\",\n        height: this.state.size + \"px\",\n        minHeight: \"0px\"\n      };\n    }\n  };\n\n  Resizable.prototype.offsetSize = function (offset) {\n    var unclampedSize = this.state.unclampedSize + offset;\n    this.setState({\n      size: Utils.clamp(unclampedSize, this.props.minSize, this.props.maxSize),\n      unclampedSize: unclampedSize\n    });\n  };\n\n  var Resizable_1;\n  Resizable.defaultProps = {\n    isResizable: true,\n    minSize: 0\n  };\n  Resizable = Resizable_1 = tslib_1.__decorate([polyfill], Resizable);\n  return Resizable;\n}(AbstractPureComponent2);\n\nexport { Resizable };","map":null,"metadata":{},"sourceType":"module"}