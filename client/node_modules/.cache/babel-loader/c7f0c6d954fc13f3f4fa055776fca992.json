{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport API from '../../API';\nimport Request from '../../Requests/Request';\nimport Language from './DTO/Language';\n\nvar Languageservice =\n/*#__PURE__*/\nfunction () {\n  function Languageservice() {\n    _classCallCheck(this, Languageservice);\n  }\n\n  _createClass(Languageservice, null, [{\n    key: \"createLanguageDTO\",\n    value: function createLanguageDTO(language) {\n      return new Language(language).getLanguageDTO();\n    }\n  }, {\n    key: \"getLanguages\",\n    value: function () {\n      var _getLanguages = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Request.get(API.ROUTES.LANGUAGES.GET_LANGUAGES);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getLanguages() {\n        return _getLanguages.apply(this, arguments);\n      }\n\n      return getLanguages;\n    }()\n    /**\n     *\n     * @param {String} language\n     *\n     */\n\n  }, {\n    key: \"saveNewLanguage\",\n    value: function () {\n      var _saveNewLanguage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(language) {\n        var lang;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                lang = this.createLanguageDTO(language);\n                _context2.next = 3;\n                return Request.post(API.ROUTES.LANGUAGES.CREATE_NEW_LANGUAGE, lang).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function saveNewLanguage(_x) {\n        return _saveNewLanguage.apply(this, arguments);\n      }\n\n      return saveNewLanguage;\n    }()\n    /**\n     *\n     * @param {String} id\n     *\n     */\n\n  }, {\n    key: \"getLanguageByID\",\n    value: function () {\n      var _getLanguageByID = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Request.get(API.ROUTES.LANGUAGES.GET_LANGUAGE_BY_ID + id).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getLanguageByID(_x2) {\n        return _getLanguageByID.apply(this, arguments);\n      }\n\n      return getLanguageByID;\n    }()\n    /**\n     *\n     * @param {String} name\n     */\n\n  }, {\n    key: \"getLanguageByName\",\n    value: function () {\n      var _getLanguageByName = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(name) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Request.delete(API.ROUTES.LANGUAGES.GET_LANGUAGE_BY_NAME + name).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getLanguageByName(_x3) {\n        return _getLanguageByName.apply(this, arguments);\n      }\n\n      return getLanguageByName;\n    }()\n  }]);\n\n  return Languageservice;\n}();\n\nexport { Languageservice as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/Client/API/Services/LanguagesService/LanguagesService.js"],"names":["API","Request","Language","Languageservice","language","getLanguageDTO","get","ROUTES","LANGUAGES","GET_LANGUAGES","lang","createLanguageDTO","post","CREATE_NEW_LANGUAGE","then","res","catch","err","id","GET_LANGUAGE_BY_ID","name","delete","GET_LANGUAGE_BY_NAME"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;IAEqBC,e;;;;;;;;;sCACOC,Q,EAAU;AAChC,aAAO,IAAIF,QAAJ,CAAaE,QAAb,EAAuBC,cAAvB,EAAP;AACF;;;;;;;;;;;;uBAEeJ,OAAO,CAACK,GAAR,CAAYN,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBC,aAAjC,C;;;;;;;;;;;;;;;;;;;AAEhB;;;;;;;;;;;iDAK6BL,Q;;;;;;AACtBM,gBAAAA,I,GAAO,KAAKC,iBAAL,CAAuBP,QAAvB,C;;uBACEH,OAAO,CAACW,IAAR,CAAaZ,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBK,mBAAlC,EAAuDH,IAAvD,EACTI,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;iDAK6BC,E;;;;;;uBACbjB,OAAO,CAACK,GAAR,CAAYN,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBW,kBAArB,GAA0CD,EAAtD,EACTJ,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAQhB;;;;;;;;;;iDAI+BG,I;;;;;;uBACfnB,OAAO,CAACoB,MAAR,CACVrB,GAAG,CAACO,MAAJ,CAAWC,SAAX,CAAqBc,oBAArB,GAA4CF,IADlC,EAGTN,IAHS,CAGJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBALS,EAMTC,KANS,CAMH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBARS,C;;;;;;;;;;;;;;;;;;;;;;;;SA1CEd,e","sourcesContent":["import API from '../../API';\nimport Request from '../../Requests/Request';\nimport Language from './DTO/Language';\n\nexport default class Languageservice {\n   static createLanguageDTO(language) {\n      return new Language(language).getLanguageDTO();\n   }\n   static async getLanguages() {\n      return await Request.get(API.ROUTES.LANGUAGES.GET_LANGUAGES);\n   }\n   /**\n    *\n    * @param {String} language\n    *\n    */\n   static async saveNewLanguage(language) {\n      let lang = this.createLanguageDTO(language);\n      return await Request.post(API.ROUTES.LANGUAGES.CREATE_NEW_LANGUAGE, lang)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   /**\n    *\n    * @param {String} id\n    *\n    */\n   static async getLanguageByID(id) {\n      return await Request.get(API.ROUTES.LANGUAGES.GET_LANGUAGE_BY_ID + id)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n   /**\n    *\n    * @param {String} name\n    */\n   static async getLanguageByName(name) {\n      return await Request.delete(\n         API.ROUTES.LANGUAGES.GET_LANGUAGE_BY_NAME + name\n      )\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n}\n"]},"metadata":{},"sourceType":"module"}