{"ast":null,"code":"import _defineProperty from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Table/SLAsTable/SLAsReportingTable.jsx\";\nimport React, { Component } from 'react';\nimport { Table, Button, Input, Spinner, Progress } from 'reactstrap';\nimport axios from 'axios';\n\nvar SLAsReportingTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SLAsReportingTable, _Component);\n\n  function SLAsReportingTable(props) {\n    var _this;\n\n    _classCallCheck(this, SLAsReportingTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SLAsReportingTable).call(this, props));\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var readySLAReport, data, URL;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                readySLAReport = _this.state.slaArr.map(function (sla, index) {\n                  return {\n                    reportedAt: sla.reportedAt,\n                    project: sla.project._id,\n                    sla_id: sla._id,\n                    sla: sla.SLA,\n                    logic: sla.logic,\n                    slaType: sla.type.type,\n                    target: sla.target,\n                    result: sla.result,\n                    status: sla.status\n                  };\n                });\n                data = {\n                  SLAReport: readySLAReport\n                };\n                URL = '/api/reports/report/sla';\n                _context.t0 = _this;\n                _context.next = 7;\n                return _this.isCompleted();\n\n              case 7:\n                _context.t1 = _context.sent;\n                _context.t2 = {\n                  isCompleted: _context.t1\n                };\n\n                _context.t0.setState.call(_context.t0, _context.t2);\n\n                if (_this.state.isCompleted) {\n                  axios.post(URL, data).then(function (doc) {\n                    alert('SLA Report saved successfully');\n\n                    _this.setState({\n                      enableInputs: false\n                    });\n                  });\n                } else {\n                  alert('SLA Report not completed yet');\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getSLAs = _this.getSLAs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderTableHeaders = _this.renderTableHeaders.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderTableData = _this.renderTableData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      modal: false,\n      theme: _this.props.theme,\n      isLoading: true,\n      enableInputs: true,\n      slaArr: [],\n      isCompleted: false\n    };\n    return _this;\n  }\n\n  _createClass(SLAsReportingTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getSLAs();\n    }\n  }, {\n    key: \"handleUserInput\",\n    value: function handleUserInput(filterText) {\n      this.setState({\n        filterText: filterText\n      });\n    }\n  }, {\n    key: \"getSLAs\",\n    value: function getSLAs() {\n      var _this2 = this;\n\n      this.setState({\n        isLoading: true\n      });\n      var URL = '/api/sla/all';\n      axios.get(URL).then(function (res) {\n        _this2.setState({\n          slaArr: res.data,\n          isLoading: false\n        });\n      }).catch(function (err) {\n        alert('Error loading SLAs table');\n        console.log(JSON.stringify(err));\n      });\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme() {\n      var theme = this.state.theme;\n\n      if (theme === 'dark') {\n        return 'bg-dark text-white table-dark';\n      }\n\n      if (theme === 'light') {\n        return '';\n      }\n    }\n  }, {\n    key: \"setCardTheme\",\n    value: function setCardTheme() {\n      var theme = this.state.theme;\n\n      if (theme === 'dark') {\n        return 'bg-dark text-white';\n      }\n\n      if (theme === 'light') {\n        return '';\n      }\n    }\n  }, {\n    key: \"setInputTheme\",\n    value: function setInputTheme() {\n      var theme = this.props.theme;\n\n      if (theme === 'dark') {\n        return 'bg-secondary text-white no-border text-center';\n      }\n\n      if (theme === 'light') {\n        return 'text-center';\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(index, dataType, value) {\n      var newState = this.state.slaArr.map(function (item, i) {\n        if (i === index) {\n          return _objectSpread({}, item, _defineProperty({}, dataType, value));\n        }\n\n        return item;\n      });\n      this.setState({\n        slaArr: newState\n      });\n    }\n  }, {\n    key: \"renderTableHeaders\",\n    value: function renderTableHeaders() {\n      return React.createElement(\"tr\", {\n        className: \"bg-black text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Project\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"SLA Type\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"SLA\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Description\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Target\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Logic\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Result\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Status\"), React.createElement(\"th\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"SLA Result Rate\"));\n    }\n  }, {\n    key: \"renderTableData\",\n    value: function renderTableData() {\n      var _this3 = this;\n\n      return this.state.slaArr.map(function (sla, index) {\n        return React.createElement(\"tr\", {\n          key: sla._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, sla.reportedAt = new Date().toLocaleDateString()), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, sla.project.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, sla.type.type), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, sla.SLA), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, sla.description), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, sla.target), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, sla.logic), React.createElement(\"td\", {\n          className: \"align-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"number\",\n          onChange: function onChange(e) {\n            return _this3.handleChange(index, 'result', e.target.value);\n          },\n          step: \"0.001\",\n          min: \"0\",\n          value: _this3.state.slaArr[index].result,\n          bsSize: \"sm\",\n          disabled: !_this3.state.enableInputs,\n          className: _this3.setInputTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, _this3.calcSLAStatus(sla)), React.createElement(\"td\", {\n          className: \"align-middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(Progress, {\n          className: _this3.setInputTheme(),\n          value: _this3.calculateREsultRate(sla.logic, sla.result, sla.target),\n          color: _this3.isSLAPass(sla) ? 'success' : 'primary',\n          max: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, isNaN(sla.result / sla.target) ? '' : Math.round(_this3.calculateREsultRate(sla.logic, sla.result, sla.target) * 100) + ' %')));\n      });\n    }\n  }, {\n    key: \"calculateREsultRate\",\n    value: function calculateREsultRate(log, result, target) {\n      if (log === '>=') return result / target;\n      if (log === '>') return result / target;\n      if (log === '=') return result / target;\n      if (log === '<=') return target / result;\n      if (log === '<') return target / result;\n    }\n  }, {\n    key: \"isCompleted\",\n    value: function () {\n      var _isCompleted = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var slaArr, isReady, i;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                slaArr = this.state.slaArr;\n                isReady = false;\n                i = 0;\n\n              case 3:\n                if (!(i < slaArr.length)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(isNaN(slaArr[i].result) || slaArr[i].result === null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 7;\n                return isReady;\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n                i++;\n                _context2.next = 3;\n                break;\n\n              case 11:\n                _context2.next = 13;\n                return !isReady;\n\n              case 13:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function isCompleted() {\n        return _isCompleted.apply(this, arguments);\n      }\n\n      return isCompleted;\n    }()\n  }, {\n    key: \"calcSLAStatus\",\n    value: function calcSLAStatus(sla) {\n      if (this.isSLAPass(sla)) {\n        sla.status = this.isSLAPass(sla);\n        return React.createElement(\"i\", {\n          className: \"fas fa-check text-success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        });\n      }\n\n      sla.status = this.isSLAPass(sla);\n      return React.createElement(\"i\", {\n        className: \"fas fa-times text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"isSLAPass\",\n    value: function isSLAPass(sla) {\n      if (sla.logic === '>') return sla.result > sla.target;\n      if (sla.logic === '>=') return sla.result >= sla.target;\n      if (sla.logic === '=') return sla.result = sla.target;\n      if (sla.logic === '<=') return sla.result <= sla.target;\n      if (sla.logic === '<') return sla.result < sla.target;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          slaArr = _this$state.slaArr,\n          isLoading = _this$state.isLoading;\n\n      if (isLoading) {\n        return React.createElement(\"div\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, React.createElement(Spinner, {\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }));\n      }\n\n      if (slaArr.length === 0) {\n        return React.createElement(\"div\", {\n          className: \"text-center text-secondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, \"No SLAs found...\"));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"SLAs to Report\", React.createElement(Button, {\n        color: \"primary\",\n        size: \"sm\",\n        ref: \"getslasData\",\n        id: \"getslasData\",\n        className: \"float-right\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"Submit \", React.createElement(\"span\", {\n        className: \"fas fa-check ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(Table, {\n        responsive: true,\n        borderless: true,\n        striped: true,\n        hover: true,\n        size: \"sm\",\n        className: this.setTheme(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, this.renderTableHeaders()), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, this.renderTableData())));\n    }\n  }]);\n\n  return SLAsReportingTable;\n}(Component);\n/*\r\n\r\n*/\n\n/*\r\nrequired data structure\r\n==================================================================\r\n   reportedAt: { type: Date, default: Date.now },\r\n   sla_id: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'SLAs',\r\n      autopopulate: true\r\n   },\r\n   project: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Projects',\r\n      autopopulate: { maxDepth: 2 }\r\n   },\r\n   sla: { type: String, required: true },\r\n   slaType: { type: String, required: true },\r\n   target: { type: Number, required: true },\r\n   logic: { type: String, required: true },\r\n   result: { type: Number, required: true },          *to be calculated and send\r\n   status: { type: Boolean, required: true }          **to be calculated and send\r\n                                                         **(server side validation post submit)\r\n===================================================================\r\n*/\n\n\nexport { SLAsReportingTable as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Table/SLAsTable/SLAsReportingTable.jsx"],"names":["React","Component","Table","Button","Input","Spinner","Progress","axios","SLAsReportingTable","props","handleSubmit","e","preventDefault","readySLAReport","state","slaArr","map","sla","index","reportedAt","project","_id","sla_id","SLA","logic","slaType","type","target","result","status","data","SLAReport","URL","isCompleted","setState","post","then","doc","alert","enableInputs","getSLAs","bind","renderTableHeaders","renderTableData","modal","theme","isLoading","filterText","get","res","catch","err","console","log","JSON","stringify","dataType","value","newState","item","i","Date","toLocaleDateString","name","description","handleChange","setInputTheme","calcSLAStatus","calculateREsultRate","isSLAPass","isNaN","Math","round","isReady","length","setTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Button, Input, Spinner, Progress } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nexport default class SLAsReportingTable extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.getSLAs = this.getSLAs.bind(this);\r\n      this.renderTableHeaders = this.renderTableHeaders.bind(this);\r\n      this.renderTableData = this.renderTableData.bind(this);\r\n\r\n      this.state = {\r\n         modal: false,\r\n         theme: this.props.theme,\r\n         isLoading: true,\r\n         enableInputs: true,\r\n         slaArr: [],\r\n         isCompleted: false\r\n      };\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.getSLAs();\r\n   }\r\n\r\n   handleUserInput(filterText) {\r\n      this.setState({ filterText: filterText });\r\n   }\r\n\r\n   getSLAs() {\r\n      this.setState({ isLoading: true });\r\n\r\n      const URL = '/api/sla/all';\r\n\r\n      axios\r\n         .get(URL)\r\n         .then(res => {\r\n            this.setState({\r\n               slaArr: res.data,\r\n               isLoading: false\r\n            });\r\n         })\r\n         .catch(err => {\r\n            alert('Error loading SLAs table');\r\n            console.log(JSON.stringify(err));\r\n         });\r\n   }\r\n\r\n   setTheme() {\r\n      const { theme } = this.state;\r\n      if (theme === 'dark') {\r\n         return 'bg-dark text-white table-dark';\r\n      }\r\n      if (theme === 'light') {\r\n         return '';\r\n      }\r\n   }\r\n\r\n   setCardTheme() {\r\n      const { theme } = this.state;\r\n      if (theme === 'dark') {\r\n         return 'bg-dark text-white';\r\n      }\r\n      if (theme === 'light') {\r\n         return '';\r\n      }\r\n   }\r\n\r\n   setInputTheme() {\r\n      const { theme } = this.props;\r\n      if (theme === 'dark') {\r\n         return 'bg-secondary text-white no-border text-center';\r\n      }\r\n      if (theme === 'light') {\r\n         return 'text-center';\r\n      }\r\n   }\r\n\r\n   handleChange(index, dataType, value) {\r\n      const newState = this.state.slaArr.map((item, i) => {\r\n         if (i === index) {\r\n            return { ...item, [dataType]: value };\r\n         }\r\n         return item;\r\n      });\r\n\r\n      this.setState({\r\n         slaArr: newState\r\n      });\r\n   }\r\n\r\n   renderTableHeaders() {\r\n      return (\r\n         <tr className='bg-black text-white'>\r\n            <th>Date</th>\r\n            <th>Project</th>\r\n            <th>SLA Type</th>\r\n            <th>SLA</th>\r\n            <th>Description</th>\r\n            <th>Target</th>\r\n            <th>Logic</th>\r\n            <th>Result</th>\r\n            <th className='text-center'>Status</th>\r\n            <th className='text-center'>SLA Result Rate</th>\r\n         </tr>\r\n      );\r\n   }\r\n\r\n   renderTableData() {\r\n      return this.state.slaArr.map((sla, index) => {\r\n         return (\r\n            <tr key={sla._id}>\r\n               <td>{(sla.reportedAt = new Date().toLocaleDateString())}</td>\r\n               <td>{sla.project.name}</td>\r\n               <td>{sla.type.type}</td>\r\n               <td>{sla.SLA}</td>\r\n               <td>{sla.description}</td>\r\n               <td>{sla.target}</td>\r\n               <td>{sla.logic}</td>\r\n               <td className='align-center'>\r\n                  <Input\r\n                     type='number'\r\n                     onChange={e =>\r\n                        this.handleChange(index, 'result', e.target.value)\r\n                     }\r\n                     step='0.001'\r\n                     min='0'\r\n                     value={this.state.slaArr[index].result}\r\n                     bsSize='sm'\r\n                     disabled={!this.state.enableInputs}\r\n                     className={this.setInputTheme()}\r\n                  />\r\n               </td>\r\n               <td className='text-center'>{this.calcSLAStatus(sla)}</td>\r\n               <td className='align-middle'>\r\n                  <Progress\r\n                     className={this.setInputTheme()}\r\n                     value={this.calculateREsultRate(\r\n                        sla.logic,\r\n                        sla.result,\r\n                        sla.target\r\n                     )}\r\n                     color={this.isSLAPass(sla) ? 'success' : 'primary'}\r\n                     max={1}\r\n                  >\r\n                     {isNaN(sla.result / sla.target)\r\n                        ? ''\r\n                        : Math.round(\r\n                             this.calculateREsultRate(\r\n                                sla.logic,\r\n                                sla.result,\r\n                                sla.target\r\n                             ) * 100\r\n                          ) + ' %'}\r\n                  </Progress>\r\n               </td>\r\n            </tr>\r\n         );\r\n      });\r\n   }\r\n\r\n   calculateREsultRate(log, result, target) {\r\n      if (log === '>=') return result / target;\r\n      if (log === '>') return result / target;\r\n      if (log === '=') return result / target;\r\n      if (log === '<=') return target / result;\r\n      if (log === '<') return target / result;\r\n   }\r\n\r\n   async isCompleted() {\r\n      const { slaArr } = this.state;\r\n      var isReady = false;\r\n\r\n      for (let i = 0; i < slaArr.length; i++) {\r\n         if (isNaN(slaArr[i].result) || slaArr[i].result === null) {\r\n            return await isReady;\r\n         }\r\n      }\r\n      return await !isReady;\r\n   }\r\n\r\n   calcSLAStatus(sla) {\r\n      if (this.isSLAPass(sla)) {\r\n         sla.status = this.isSLAPass(sla);\r\n         return <i className='fas fa-check text-success' />;\r\n      }\r\n      sla.status = this.isSLAPass(sla);\r\n      return <i className='fas fa-times text-danger' />;\r\n   }\r\n\r\n   isSLAPass(sla) {\r\n      if (sla.logic === '>') return sla.result > sla.target;\r\n      if (sla.logic === '>=') return sla.result >= sla.target;\r\n      if (sla.logic === '=') return (sla.result = sla.target);\r\n      if (sla.logic === '<=') return sla.result <= sla.target;\r\n      if (sla.logic === '<') return sla.result < sla.target;\r\n   }\r\n\r\n   handleSubmit = async e => {\r\n      e.preventDefault();\r\n\r\n      var readySLAReport = this.state.slaArr.map((sla, index) => {\r\n         return {\r\n            reportedAt: sla.reportedAt,\r\n            project: sla.project._id,\r\n            sla_id: sla._id,\r\n            sla: sla.SLA,\r\n            logic: sla.logic,\r\n            slaType: sla.type.type,\r\n            target: sla.target,\r\n            result: sla.result,\r\n            status: sla.status\r\n         };\r\n      });\r\n\r\n      var data = {\r\n         SLAReport: readySLAReport\r\n      };\r\n\r\n      const URL = '/api/reports/report/sla';\r\n\r\n      this.setState({\r\n         isCompleted: await this.isCompleted()\r\n      });\r\n\r\n      if (this.state.isCompleted) {\r\n         axios.post(URL, data).then(doc => {\r\n            alert('SLA Report saved successfully');\r\n            this.setState({\r\n               enableInputs: false\r\n            });\r\n         });\r\n      } else {\r\n         alert('SLA Report not completed yet');\r\n      }\r\n   };\r\n\r\n   render() {\r\n      const { slaArr, isLoading } = this.state;\r\n\r\n      if (isLoading) {\r\n         return (\r\n            <div className='text-center'>\r\n               <Spinner color='primary' />\r\n            </div>\r\n         );\r\n      }\r\n\r\n      if (slaArr.length === 0) {\r\n         return (\r\n            <div className='text-center text-secondary'>\r\n               <h6>No SLAs found...</h6>\r\n            </div>\r\n         );\r\n      }\r\n\r\n      return (\r\n         <div className='mt-5'>\r\n            <p>\r\n               SLAs to Report\r\n               <Button\r\n                  color='primary'\r\n                  size='sm'\r\n                  ref='getslasData'\r\n                  id='getslasData'\r\n                  className='float-right'\r\n                  onClick={this.handleSubmit}\r\n               >\r\n                  Submit <span className='fas fa-check ml-2' />\r\n               </Button>\r\n            </p>\r\n            <hr />\r\n            <Table\r\n               responsive\r\n               borderless\r\n               striped\r\n               hover\r\n               size='sm'\r\n               className={this.setTheme()}\r\n            >\r\n               <thead>{this.renderTableHeaders()}</thead>\r\n               <tbody>{this.renderTableData()}</tbody>\r\n            </Table>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n/*\r\n\r\n*/\r\n\r\n/*\r\nrequired data structure\r\n==================================================================\r\n   reportedAt: { type: Date, default: Date.now },\r\n   sla_id: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'SLAs',\r\n      autopopulate: true\r\n   },\r\n   project: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Projects',\r\n      autopopulate: { maxDepth: 2 }\r\n   },\r\n   sla: { type: String, required: true },\r\n   slaType: { type: String, required: true },\r\n   target: { type: Number, required: true },\r\n   logic: { type: String, required: true },\r\n   result: { type: Number, required: true },          *to be calculated and send\r\n   status: { type: Boolean, required: true }          **to be calculated and send\r\n                                                         **(server side validation post submit)\r\n===================================================================\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}