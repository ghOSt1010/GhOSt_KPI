{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_KPI/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Toaster } from '@blueprintjs/core';\nvar doToast = Toaster.create({\n  className: '',\n  position: 'top-right',\n  maxToasts: 10\n});\n\nvar Notifications =\n/*#__PURE__*/\nfunction () {\n  function Notifications() {\n    _classCallCheck(this, Notifications);\n  }\n\n  _createClass(Notifications, null, [{\n    key: \"simple\",\n    value: function simple(message) {\n      doToast.show({\n        message: message\n      });\n    }\n  }, {\n    key: \"success\",\n    value: function success(message) {\n      doToast.show({\n        message: message,\n        intent: '',\n        icon: \"<Icon icon='tick' intent='success'/>\"\n      });\n    }\n  }, {\n    key: \"alert\",\n    value: function alert(message) {\n      doToast.show({\n        message: message,\n        intent: 'warning',\n        icon: 'warning-sign'\n      });\n    }\n  }, {\n    key: \"failure\",\n    value: function failure(message) {\n      doToast.show({\n        message: message,\n        intent: 'danger',\n        icon: 'delete'\n      });\n    }\n  }, {\n    key: \"error\",\n    value: function error(message) {\n      doToast.show({\n        message: message,\n        intent: 'danger',\n        icon: 'issue'\n      });\n    }\n  }, {\n    key: \"custom\",\n    value: function custom(message, intent, icon, timeout) {\n      doToast.show({\n        message: message,\n        intent: intent,\n        icon: icon,\n        timeout: timeout\n      });\n    }\n  }]);\n\n  return Notifications;\n}();\n\nexport { Notifications as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_KPI/client/src/Modules/Client/Notifications/Notifications.js"],"names":["Toaster","doToast","create","className","position","maxToasts","Notifications","message","show","intent","icon","timeout"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,mBAAxB;AAEA,IAAMC,OAAO,GAAGD,OAAO,CAACE,MAAR,CAAe;AAC5BC,EAAAA,SAAS,EAAE,EADiB;AAE5BC,EAAAA,QAAQ,EAAE,WAFkB;AAG5BC,EAAAA,SAAS,EAAE;AAHiB,CAAf,CAAhB;;IAMqBC,a;;;;;;;;;2BACJC,O,EAAS;AACpBN,MAAAA,OAAO,CAACO,IAAR,CAAa;AAAED,QAAAA,OAAO,EAAEA;AAAX,OAAb;AACF;;;4BACcA,O,EAAS;AACrBN,MAAAA,OAAO,CAACO,IAAR,CAAa;AACVD,QAAAA,OAAO,EAAEA,OADC;AAEVE,QAAAA,MAAM,EAAE,EAFE;AAGVC,QAAAA,IAAI,EAAE;AAHI,OAAb;AAKF;;;0BACYH,O,EAAS;AACnBN,MAAAA,OAAO,CAACO,IAAR,CAAa;AACVD,QAAAA,OAAO,EAAEA,OADC;AAEVE,QAAAA,MAAM,EAAE,SAFE;AAGVC,QAAAA,IAAI,EAAE;AAHI,OAAb;AAKF;;;4BACcH,O,EAAS;AACrBN,MAAAA,OAAO,CAACO,IAAR,CAAa;AACVD,QAAAA,OAAO,EAAEA,OADC;AAEVE,QAAAA,MAAM,EAAE,QAFE;AAGVC,QAAAA,IAAI,EAAE;AAHI,OAAb;AAKF;;;0BACYH,O,EAAS;AACnBN,MAAAA,OAAO,CAACO,IAAR,CAAa;AACVD,QAAAA,OAAO,EAAEA,OADC;AAEVE,QAAAA,MAAM,EAAE,QAFE;AAGVC,QAAAA,IAAI,EAAE;AAHI,OAAb;AAKF;;;2BACaH,O,EAASE,M,EAAQC,I,EAAMC,O,EAAS;AAC3CV,MAAAA,OAAO,CAACO,IAAR,CAAa;AACVD,QAAAA,OAAO,EAAEA,OADC;AAEVE,QAAAA,MAAM,EAAEA,MAFE;AAGVC,QAAAA,IAAI,EAAEA,IAHI;AAIVC,QAAAA,OAAO,EAAEA;AAJC,OAAb;AAMF;;;;;;SAvCiBL,a","sourcesContent":["import { Toaster } from '@blueprintjs/core';\n\nconst doToast = Toaster.create({\n   className: '',\n   position: 'top-right',\n   maxToasts: 10\n});\n\nexport default class Notifications {\n   static simple(message) {\n      doToast.show({ message: message });\n   }\n   static success(message) {\n      doToast.show({\n         message: message,\n         intent: '',\n         icon: \"<Icon icon='tick' intent='success'/>\"\n      });\n   }\n   static alert(message) {\n      doToast.show({\n         message: message,\n         intent: 'warning',\n         icon: 'warning-sign'\n      });\n   }\n   static failure(message) {\n      doToast.show({\n         message: message,\n         intent: 'danger',\n         icon: 'delete'\n      });\n   }\n   static error(message) {\n      doToast.show({\n         message: message,\n         intent: 'danger',\n         icon: 'issue'\n      });\n   }\n   static custom(message, intent, icon, timeout) {\n      doToast.show({\n         message: message,\n         intent: intent,\n         icon: icon,\n         timeout: timeout\n      });\n   }\n}\n"]},"metadata":{},"sourceType":"module"}