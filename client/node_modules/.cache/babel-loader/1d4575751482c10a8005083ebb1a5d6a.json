{"ast":null,"code":"import _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Card/DataManagerCard.jsx\";\nimport React, { Component } from 'react';\nimport { CardBody } from 'reactstrap';\nimport { Card, Icon, Button, ButtonGroup, Dialog } from '@blueprintjs/core';\nimport StdCard from './StdCard';\nimport CardHeader from './CardHeader';\nimport Client from '../../Modules/Client/Client';\n\nvar DataManagerCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataManagerCard, _Component);\n\n  function DataManagerCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataManagerCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataManagerCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      modal: false,\n      tableData: _this.props.data,\n      userRole: ''\n    };\n    return _this;\n  }\n\n  _createClass(DataManagerCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        userRole: Client.User.getRole()\n      });\n      console.log(this.state.userRole);\n    }\n  }, {\n    key: \"canAdd\",\n    value: function canAdd() {\n      var role = Client.User.getRole();\n      if (role === 'ROOT') return false;\n      if (role === 'ADMIN') return false;\n      return true;\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState(function (prevState) {\n        return {\n          modal: !prevState.modal\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var modal = this.state.modal;\n      return React.createElement(StdCard, {\n        icon: this.props.icon,\n        headerText: this.props.headerText,\n        size: this.props.cardSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.cardCaption, React.createElement(ButtonGroup, {\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Button, {\n        icon: \"add\",\n        minimal: true,\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        disabled: this.canAdd(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.props.addButtonText), React.createElement(Button, {\n        icon: \"refresh\",\n        onClick: this.props.onRefresh,\n        minimal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Refresh\"))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), this.props.table, this.props.children, React.createElement(Dialog, {\n        isOpen: modal,\n        onClose: function onClose() {\n          return _this2.toggle();\n        },\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: this.props.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"user\",\n        className: \"header-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), this.props.modalHeaderText, React.createElement(\"div\", {\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        icon: \"cross\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))), React.createElement(CardBody, {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.props.addForm)))));\n    }\n  }]);\n\n  return DataManagerCard;\n}(Component);\n\nexport { DataManagerCard as default };\nDataManagerCard.defaultProps = {\n  cardSize: 'xl',\n  icon: 'square',\n  headerText: 'headerText',\n  cardCaption: 'cardCaption',\n  addButtonText: 'addButtonText',\n  id: 'id',\n  modalHeaderText: 'modalHeaderText',\n  addForm: '<div></div>',\n  table: 'some data'\n};","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/components/Card/DataManagerCard.jsx"],"names":["React","Component","CardBody","Card","Icon","Button","ButtonGroup","Dialog","StdCard","CardHeader","Client","DataManagerCard","state","modal","tableData","props","data","userRole","setState","User","getRole","console","log","role","prevState","icon","headerText","cardSize","cardCaption","toggle","canAdd","addButtonText","onRefresh","table","children","id","modalHeaderText","addForm","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,MAA1C,QAAwD,mBAAxD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;IAEqBC,e;;;;;;;;;;;;;;;;;UAClBC,K,GAAQ;AACLC,MAAAA,KAAK,EAAE,KADF;AAELC,MAAAA,SAAS,EAAE,MAAKC,KAAL,CAAWC,IAFjB;AAGLC,MAAAA,QAAQ,EAAE;AAHL,K;;;;;;wCAKY;AACjB,WAAKC,QAAL,CAAc;AAAED,QAAAA,QAAQ,EAAEP,MAAM,CAACS,IAAP,CAAYC,OAAZ;AAAZ,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWK,QAAvB;AACF;;;6BAEQ;AACN,UAAIM,IAAI,GAAGb,MAAM,CAACS,IAAP,CAAYC,OAAZ,EAAX;AACA,UAAIG,IAAI,KAAK,MAAb,EAAqB,OAAO,KAAP;AACrB,UAAIA,IAAI,KAAK,OAAb,EAAsB,OAAO,KAAP;AACtB,aAAO,IAAP;AACF;;;6BACQ;AACN,WAAKL,QAAL,CAAc,UAAAM,SAAS;AAAA,eAAK;AACzBX,UAAAA,KAAK,EAAE,CAACW,SAAS,CAACX;AADO,SAAL;AAAA,OAAvB;AAGF;;;6BACQ;AAAA;;AAAA,UACEA,KADF,GACY,KAAKD,KADjB,CACEC,KADF;AAGN,aACG,oBAAC,OAAD;AACG,QAAA,IAAI,EAAE,KAAKE,KAAL,CAAWU,IADpB;AAEG,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWW,UAF1B;AAGG,QAAA,IAAI,EAAE,KAAKX,KAAL,CAAWY,QAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKZ,KAAL,CAAWa,WADf,EAEG,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,MAAD;AACG,QAAA,IAAI,EAAC,KADR;AAEG,QAAA,OAAO,MAFV;AAGG,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,MAAL,EAAN;AAAA,SAHZ;AAIG,QAAA,QAAQ,EAAE,KAAKC,MAAL,EAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,KAAKf,KAAL,CAAWgB,aANf,CADH,EASG,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWiB,SAA3C;AAAsD,QAAA,OAAO,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATH,CAFH,CALH,EAqBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBH,EAsBI,KAAKjB,KAAL,CAAWkB,KAtBf,EAuBI,KAAKlB,KAAL,CAAWmB,QAvBf,EAyBG,oBAAC,MAAD;AACG,QAAA,MAAM,EAAErB,KADX;AAEG,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACgB,MAAL,EAAN;AAAA,SAFZ;AAGG,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAACA,MAAL,EAAN;AAAA,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAK,QAAA,EAAE,EAAE,KAAKd,KAAL,CAAWoB,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,EAEI,KAAKpB,KAAL,CAAWqB,eAFf,EAGG;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACP,MAAL,EAAN;AAAA,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CAHH,CADH,EAQG,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKd,KAAL,CAAWsB,OADf,CARH,CADH,CALH,CAzBH,CADH;AAgDF;;;;EAzEyCpC,S;;SAAxBU,e;AA4ErBA,eAAe,CAAC2B,YAAhB,GAA+B;AAC5BX,EAAAA,QAAQ,EAAE,IADkB;AAE5BF,EAAAA,IAAI,EAAE,QAFsB;AAG5BC,EAAAA,UAAU,EAAE,YAHgB;AAI5BE,EAAAA,WAAW,EAAE,aAJe;AAK5BG,EAAAA,aAAa,EAAE,eALa;AAM5BI,EAAAA,EAAE,EAAE,IANwB;AAO5BC,EAAAA,eAAe,EAAE,iBAPW;AAQ5BC,EAAAA,OAAO,EAAE,aARmB;AAS5BJ,EAAAA,KAAK,EAAE;AATqB,CAA/B","sourcesContent":["import React, { Component } from 'react';\nimport { CardBody } from 'reactstrap';\nimport { Card, Icon, Button, ButtonGroup, Dialog } from '@blueprintjs/core';\nimport StdCard from './StdCard';\nimport CardHeader from './CardHeader';\nimport Client from '../../Modules/Client/Client';\n\nexport default class DataManagerCard extends Component {\n   state = {\n      modal: false,\n      tableData: this.props.data,\n      userRole: ''\n   };\n   componentDidMount() {\n      this.setState({ userRole: Client.User.getRole() });\n      console.log(this.state.userRole);\n   }\n\n   canAdd() {\n      let role = Client.User.getRole();\n      if (role === 'ROOT') return false;\n      if (role === 'ADMIN') return false;\n      return true;\n   }\n   toggle() {\n      this.setState(prevState => ({\n         modal: !prevState.modal\n      }));\n   }\n   render() {\n      const { modal } = this.state;\n\n      return (\n         <StdCard\n            icon={this.props.icon}\n            headerText={this.props.headerText}\n            size={this.props.cardSize}\n         >\n            <h5>\n               {this.props.cardCaption}\n               <ButtonGroup className='float-right'>\n                  <Button\n                     icon='add'\n                     minimal\n                     onClick={() => this.toggle()}\n                     disabled={this.canAdd()}\n                  >\n                     {this.props.addButtonText}\n                  </Button>\n                  <Button icon='refresh' onClick={this.props.onRefresh} minimal>\n                     Refresh\n                  </Button>\n               </ButtonGroup>\n            </h5>\n            <hr />\n            {this.props.table}\n            {this.props.children}\n\n            <Dialog\n               isOpen={modal}\n               onClose={() => this.toggle()}\n               toggle={() => this.toggle()}\n            >\n               <Card>\n                  <div id={this.props.id}>\n                     <CardHeader>\n                        <Icon icon='user' className='header-icon' />\n                        {this.props.modalHeaderText}\n                        <div className='float-right'>\n                           <Icon icon='cross' onClick={() => this.toggle()} />\n                        </div>\n                     </CardHeader>\n                     <CardBody className='card-body'>\n                        {this.props.addForm}\n                     </CardBody>\n                  </div>\n               </Card>\n            </Dialog>\n         </StdCard>\n      );\n   }\n}\n\nDataManagerCard.defaultProps = {\n   cardSize: 'xl',\n   icon: 'square',\n   headerText: 'headerText',\n   cardCaption: 'cardCaption',\n   addButtonText: 'addButtonText',\n   id: 'id',\n   modalHeaderText: 'modalHeaderText',\n   addForm: '<div></div>',\n   table: 'some data'\n};\n"]},"metadata":{},"sourceType":"module"}