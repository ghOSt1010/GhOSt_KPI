{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafalcymbalista/Projects/GhOSt_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport API from '../../API';\nimport Request from '../../Requests/Request';\nimport User from './DTO/User';\n/**\n * @class UserService\n * @description UserService HTTP communication layer\n */\n\nvar UserService =\n/*#__PURE__*/\nfunction () {\n  function UserService() {\n    _classCallCheck(this, UserService);\n  }\n\n  _createClass(UserService, null, [{\n    key: \"createUserDTO\",\n\n    /**\n     * @public\n     * @param {String} username\n     * @param {String} email\n     * @param {Enum} role : ['USER','TL','SM','OPS',ADMIN','ROOT']\n     * @param {ObjectID} usertype\n     * @param {ObjectID} employeeID\n     * @returns {User} DTO\n     */\n    value: function createUserDTO(username, email, password, role, usertype, employeeID) {\n      return new User(username, email, password, role, usertype, employeeID).getUserDTO();\n    }\n    /**\n     * @public\n     * @param {User} user DTO\n     * @returns HTTP Response\n     */\n\n  }, {\n    key: \"saveNewUser\",\n    value: function () {\n      var _saveNewUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(user) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Request.post(API.ROUTES.USERS.CREATE_NEW_USER, user).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function saveNewUser(_x) {\n        return _saveNewUser.apply(this, arguments);\n      }\n\n      return saveNewUser;\n    }()\n    /**\n     * @public\n     * @param {User} user DTO\n     * @returns HTTP Response\n     */\n\n  }, {\n    key: \"updateUser\",\n    value: function () {\n      var _updateUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(user) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Request.put(API.ROUTES.USERS.UPDATE_USER, user).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateUser(_x2) {\n        return _updateUser.apply(this, arguments);\n      }\n\n      return updateUser;\n    }()\n    /**\n     * @returns HHTP response\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function () {\n      var _getUsers = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Request.get(API.ROUTES.USERS.GET_ALL_USERS).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getUsers() {\n        return _getUsers.apply(this, arguments);\n      }\n\n      return getUsers;\n    }()\n    /**\n     * @public\n     * @returns HTTP Response\n     */\n\n  }, {\n    key: \"getUserTypes\",\n    value: function () {\n      var _getUserTypes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Request.get(API.ROUTES.USERS.USER_TYPES.GET_USER_TYPES).then(function (res) {\n                  return res;\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getUserTypes() {\n        return _getUserTypes.apply(this, arguments);\n      }\n\n      return getUserTypes;\n    }()\n  }]);\n\n  return UserService;\n}();\n\nexport { UserService as default };","map":{"version":3,"sources":["/Users/rafalcymbalista/Projects/GhOSt_app/client/src/Modules/Client/API/Services/UsersService/UserService.js"],"names":["API","Request","User","UserService","username","email","password","role","usertype","employeeID","getUserDTO","user","post","ROUTES","USERS","CREATE_NEW_USER","then","res","catch","err","put","UPDATE_USER","get","GET_ALL_USERS","USER_TYPES","GET_USER_TYPES"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;;;;;IAIqBC,W;;;;;;;;;;AAClB;;;;;;;;;kCASqBC,Q,EAAUC,K,EAAOC,Q,EAAUC,I,EAAMC,Q,EAAUC,U,EAAY;AACzE,aAAO,IAAIP,IAAJ,CACJE,QADI,EAEJC,KAFI,EAGJC,QAHI,EAIJC,IAJI,EAKJC,QALI,EAMJC,UANI,EAOLC,UAPK,EAAP;AAQF;AACD;;;;;;;;;;;gDAKyBC,I;;;;;;uBACTV,OAAO,CAACW,IAAR,CAAaZ,GAAG,CAACa,MAAJ,CAAWC,KAAX,CAAiBC,eAA9B,EAA+CJ,IAA/C,EACTK,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,wBAAMA,GAAN;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAQhB;;;;;;;;;;;iDAKwBR,I;;;;;;uBACRV,OAAO,CAACmB,GAAR,CAAYpB,GAAG,CAACa,MAAJ,CAAWC,KAAX,CAAiBO,WAA7B,EAA0CV,IAA1C,EACTK,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;;;;;uBAIgBlB,OAAO,CAACqB,GAAR,CAAYtB,GAAG,CAACa,MAAJ,CAAWC,KAAX,CAAiBS,aAA7B,EACTP,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;AAShB;;;;;;;;;;;;;;;;uBAKgBlB,OAAO,CAACqB,GAAR,CAAYtB,GAAG,CAACa,MAAJ,CAAWC,KAAX,CAAiBU,UAAjB,CAA4BC,cAAxC,EACTT,IADS,CACJ,UAAAC,GAAG,EAAI;AACV,yBAAOA,GAAP;AACF,iBAHS,EAITC,KAJS,CAIH,UAAAC,GAAG,EAAI;AACX,yBAAOA,GAAP;AACF,iBANS,C;;;;;;;;;;;;;;;;;;;;;;;;SAnEEhB,W","sourcesContent":["import API from '../../API';\nimport Request from '../../Requests/Request';\nimport User from './DTO/User';\n\n/**\n * @class UserService\n * @description UserService HTTP communication layer\n */\nexport default class UserService {\n   /**\n    * @public\n    * @param {String} username\n    * @param {String} email\n    * @param {Enum} role : ['USER','TL','SM','OPS',ADMIN','ROOT']\n    * @param {ObjectID} usertype\n    * @param {ObjectID} employeeID\n    * @returns {User} DTO\n    */\n   static createUserDTO(username, email, password, role, usertype, employeeID) {\n      return new User(\n         username,\n         email,\n         password,\n         role,\n         usertype,\n         employeeID\n      ).getUserDTO();\n   }\n   /**\n    * @public\n    * @param {User} user DTO\n    * @returns HTTP Response\n    */\n   static async saveNewUser(user) {\n      return await Request.post(API.ROUTES.USERS.CREATE_NEW_USER, user)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            throw err;\n         });\n   }\n   /**\n    * @public\n    * @param {User} user DTO\n    * @returns HTTP Response\n    */\n   static async updateUser(user) {\n      return await Request.put(API.ROUTES.USERS.UPDATE_USER, user)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   /**\n    * @returns HHTP response\n    */\n   static async getUsers() {\n      return await Request.get(API.ROUTES.USERS.GET_ALL_USERS)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n\n   /**\n    * @public\n    * @returns HTTP Response\n    */\n   static async getUserTypes() {\n      return await Request.get(API.ROUTES.USERS.USER_TYPES.GET_USER_TYPES)\n         .then(res => {\n            return res;\n         })\n         .catch(err => {\n            return err;\n         });\n   }\n}\n"]},"metadata":{},"sourceType":"module"}